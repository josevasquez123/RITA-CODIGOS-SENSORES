
BNO_085.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000070c0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a4  080071d0  080071d0  000171d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007674  08007674  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08007674  08007674  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007674  08007674  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007674  08007674  00017674  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007678  08007678  00017678  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800767c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000028c  200001e0  0800785c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000046c  0800785c  0002046c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008bdc  00000000  00000000  0002024c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d81  00000000  00000000  00028e28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a20  00000000  00000000  0002abb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007a6  00000000  00000000  0002b5d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000193c5  00000000  00000000  0002bd76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b6dd  00000000  00000000  0004513b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008ad1e  00000000  00000000  00050818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003c5c  00000000  00000000  000db538  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  000df194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	080071b8 	.word	0x080071b8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	080071b8 	.word	0x080071b8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <__gesf2>:
 8000f44:	f04f 3cff 	mov.w	ip, #4294967295
 8000f48:	e006      	b.n	8000f58 <__cmpsf2+0x4>
 8000f4a:	bf00      	nop

08000f4c <__lesf2>:
 8000f4c:	f04f 0c01 	mov.w	ip, #1
 8000f50:	e002      	b.n	8000f58 <__cmpsf2+0x4>
 8000f52:	bf00      	nop

08000f54 <__cmpsf2>:
 8000f54:	f04f 0c01 	mov.w	ip, #1
 8000f58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f68:	bf18      	it	ne
 8000f6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f6e:	d011      	beq.n	8000f94 <__cmpsf2+0x40>
 8000f70:	b001      	add	sp, #4
 8000f72:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f76:	bf18      	it	ne
 8000f78:	ea90 0f01 	teqne	r0, r1
 8000f7c:	bf58      	it	pl
 8000f7e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f82:	bf88      	it	hi
 8000f84:	17c8      	asrhi	r0, r1, #31
 8000f86:	bf38      	it	cc
 8000f88:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f8c:	bf18      	it	ne
 8000f8e:	f040 0001 	orrne.w	r0, r0, #1
 8000f92:	4770      	bx	lr
 8000f94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f98:	d102      	bne.n	8000fa0 <__cmpsf2+0x4c>
 8000f9a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f9e:	d105      	bne.n	8000fac <__cmpsf2+0x58>
 8000fa0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fa4:	d1e4      	bne.n	8000f70 <__cmpsf2+0x1c>
 8000fa6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000faa:	d0e1      	beq.n	8000f70 <__cmpsf2+0x1c>
 8000fac:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_cfrcmple>:
 8000fb4:	4684      	mov	ip, r0
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	4661      	mov	r1, ip
 8000fba:	e7ff      	b.n	8000fbc <__aeabi_cfcmpeq>

08000fbc <__aeabi_cfcmpeq>:
 8000fbc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fbe:	f7ff ffc9 	bl	8000f54 <__cmpsf2>
 8000fc2:	2800      	cmp	r0, #0
 8000fc4:	bf48      	it	mi
 8000fc6:	f110 0f00 	cmnmi.w	r0, #0
 8000fca:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fcc <__aeabi_fcmpeq>:
 8000fcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fd0:	f7ff fff4 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fd4:	bf0c      	ite	eq
 8000fd6:	2001      	moveq	r0, #1
 8000fd8:	2000      	movne	r0, #0
 8000fda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fde:	bf00      	nop

08000fe0 <__aeabi_fcmplt>:
 8000fe0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe4:	f7ff ffea 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fe8:	bf34      	ite	cc
 8000fea:	2001      	movcc	r0, #1
 8000fec:	2000      	movcs	r0, #0
 8000fee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_fcmple>:
 8000ff4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff8:	f7ff ffe0 	bl	8000fbc <__aeabi_cfcmpeq>
 8000ffc:	bf94      	ite	ls
 8000ffe:	2001      	movls	r0, #1
 8001000:	2000      	movhi	r0, #0
 8001002:	f85d fb08 	ldr.w	pc, [sp], #8
 8001006:	bf00      	nop

08001008 <__aeabi_fcmpge>:
 8001008:	f84d ed08 	str.w	lr, [sp, #-8]!
 800100c:	f7ff ffd2 	bl	8000fb4 <__aeabi_cfrcmple>
 8001010:	bf94      	ite	ls
 8001012:	2001      	movls	r0, #1
 8001014:	2000      	movhi	r0, #0
 8001016:	f85d fb08 	ldr.w	pc, [sp], #8
 800101a:	bf00      	nop

0800101c <__aeabi_fcmpgt>:
 800101c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001020:	f7ff ffc8 	bl	8000fb4 <__aeabi_cfrcmple>
 8001024:	bf34      	ite	cc
 8001026:	2001      	movcc	r0, #1
 8001028:	2000      	movcs	r0, #0
 800102a:	f85d fb08 	ldr.w	pc, [sp], #8
 800102e:	bf00      	nop

08001030 <__aeabi_fcmpun>:
 8001030:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001034:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001038:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800103c:	d102      	bne.n	8001044 <__aeabi_fcmpun+0x14>
 800103e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001042:	d108      	bne.n	8001056 <__aeabi_fcmpun+0x26>
 8001044:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001048:	d102      	bne.n	8001050 <__aeabi_fcmpun+0x20>
 800104a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104e:	d102      	bne.n	8001056 <__aeabi_fcmpun+0x26>
 8001050:	f04f 0000 	mov.w	r0, #0
 8001054:	4770      	bx	lr
 8001056:	f04f 0001 	mov.w	r0, #1
 800105a:	4770      	bx	lr

0800105c <__aeabi_f2iz>:
 800105c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001060:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001064:	d30f      	bcc.n	8001086 <__aeabi_f2iz+0x2a>
 8001066:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800106a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800106e:	d90d      	bls.n	800108c <__aeabi_f2iz+0x30>
 8001070:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001074:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001078:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800107c:	fa23 f002 	lsr.w	r0, r3, r2
 8001080:	bf18      	it	ne
 8001082:	4240      	negne	r0, r0
 8001084:	4770      	bx	lr
 8001086:	f04f 0000 	mov.w	r0, #0
 800108a:	4770      	bx	lr
 800108c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001090:	d101      	bne.n	8001096 <__aeabi_f2iz+0x3a>
 8001092:	0242      	lsls	r2, r0, #9
 8001094:	d105      	bne.n	80010a2 <__aeabi_f2iz+0x46>
 8001096:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800109a:	bf08      	it	eq
 800109c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80010a0:	4770      	bx	lr
 80010a2:	f04f 0000 	mov.w	r0, #0
 80010a6:	4770      	bx	lr

080010a8 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	601a      	str	r2, [r3, #0]
}
 80010bc:	bf00      	nop
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bc80      	pop	{r7}
 80010c4:	4770      	bx	lr

080010c6 <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 80010c6:	b480      	push	{r7}
 80010c8:	b083      	sub	sp, #12
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	689b      	ldr	r3, [r3, #8]
 80010d2:	f003 0301 	and.w	r3, r3, #1
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d101      	bne.n	80010de <LL_SPI_IsActiveFlag_RXNE+0x18>
 80010da:	2301      	movs	r3, #1
 80010dc:	e000      	b.n	80010e0 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 80010de:	2300      	movs	r3, #0
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	370c      	adds	r7, #12
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bc80      	pop	{r7}
 80010e8:	4770      	bx	lr

080010ea <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 80010ea:	b480      	push	{r7}
 80010ec:	b083      	sub	sp, #12
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	689b      	ldr	r3, [r3, #8]
 80010f6:	f003 0302 	and.w	r3, r3, #2
 80010fa:	2b02      	cmp	r3, #2
 80010fc:	d101      	bne.n	8001102 <LL_SPI_IsActiveFlag_TXE+0x18>
 80010fe:	2301      	movs	r3, #1
 8001100:	e000      	b.n	8001104 <LL_SPI_IsActiveFlag_TXE+0x1a>
 8001102:	2300      	movs	r3, #0
}
 8001104:	4618      	mov	r0, r3
 8001106:	370c      	adds	r7, #12
 8001108:	46bd      	mov	sp, r7
 800110a:	bc80      	pop	{r7}
 800110c:	4770      	bx	lr

0800110e <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 800110e:	b480      	push	{r7}
 8001110:	b083      	sub	sp, #12
 8001112:	af00      	add	r7, sp, #0
 8001114:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	330c      	adds	r3, #12
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	b2db      	uxtb	r3, r3
}
 800111e:	4618      	mov	r0, r3
 8001120:	370c      	adds	r7, #12
 8001122:	46bd      	mov	sp, r7
 8001124:	bc80      	pop	{r7}
 8001126:	4770      	bx	lr

08001128 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8001128:	b480      	push	{r7}
 800112a:	b085      	sub	sp, #20
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	460b      	mov	r3, r1
 8001132:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	330c      	adds	r3, #12
 8001138:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	78fa      	ldrb	r2, [r7, #3]
 800113e:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 8001140:	bf00      	nop
 8001142:	3714      	adds	r7, #20
 8001144:	46bd      	mov	sp, r7
 8001146:	bc80      	pop	{r7}
 8001148:	4770      	bx	lr

0800114a <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800114a:	b480      	push	{r7}
 800114c:	b083      	sub	sp, #12
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
 8001152:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU) == ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	689b      	ldr	r3, [r3, #8]
 8001158:	43da      	mvns	r2, r3
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	0a1b      	lsrs	r3, r3, #8
 800115e:	4013      	ands	r3, r2
 8001160:	b29b      	uxth	r3, r3
 8001162:	2b00      	cmp	r3, #0
 8001164:	bf0c      	ite	eq
 8001166:	2301      	moveq	r3, #1
 8001168:	2300      	movne	r3, #0
 800116a:	b2db      	uxtb	r3, r3
}
 800116c:	4618      	mov	r0, r3
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	bc80      	pop	{r7}
 8001174:	4770      	bx	lr

08001176 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001176:	b480      	push	{r7}
 8001178:	b083      	sub	sp, #12
 800117a:	af00      	add	r7, sp, #0
 800117c:	6078      	str	r0, [r7, #4]
 800117e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	0a1b      	lsrs	r3, r3, #8
 8001184:	b29a      	uxth	r2, r3
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	611a      	str	r2, [r3, #16]
}
 800118a:	bf00      	nop
 800118c:	370c      	adds	r7, #12
 800118e:	46bd      	mov	sp, r7
 8001190:	bc80      	pop	{r7}
 8001192:	4770      	bx	lr

08001194 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	0a1b      	lsrs	r3, r3, #8
 80011a2:	b29a      	uxth	r2, r3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	615a      	str	r2, [r3, #20]
}
 80011a8:	bf00      	nop
 80011aa:	370c      	adds	r7, #12
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bc80      	pop	{r7}
 80011b0:	4770      	bx	lr
	...

080011b4 <BNO080_Initialization>:
int16_t gyro_Q1 = 9;
int16_t magnetometer_Q1 = 4;


int BNO080_Initialization(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af02      	add	r7, sp, #8
	//BNO080_GPIO_SPI_Initialization();
	LL_SPI_Enable(BNO080_SPI_CHANNEL);
 80011ba:	4833      	ldr	r0, [pc, #204]	; (8001288 <BNO080_Initialization+0xd4>)
 80011bc:	f7ff ff74 	bl	80010a8 <LL_SPI_Enable>

	CHIP_DESELECT(BNO080);
 80011c0:	4932      	ldr	r1, [pc, #200]	; (800128c <BNO080_Initialization+0xd8>)
 80011c2:	4833      	ldr	r0, [pc, #204]	; (8001290 <BNO080_Initialization+0xdc>)
 80011c4:	f7ff ffd7 	bl	8001176 <LL_GPIO_SetOutputPin>
	WAKE_HIGH();
 80011c8:	4932      	ldr	r1, [pc, #200]	; (8001294 <BNO080_Initialization+0xe0>)
 80011ca:	4831      	ldr	r0, [pc, #196]	; (8001290 <BNO080_Initialization+0xdc>)
 80011cc:	f7ff ffd3 	bl	8001176 <LL_GPIO_SetOutputPin>
	RESET_HIGH();
 80011d0:	4931      	ldr	r1, [pc, #196]	; (8001298 <BNO080_Initialization+0xe4>)
 80011d2:	482f      	ldr	r0, [pc, #188]	; (8001290 <BNO080_Initialization+0xdc>)
 80011d4:	f7ff ffcf 	bl	8001176 <LL_GPIO_SetOutputPin>
	
	printf("Checking BNO080...");
 80011d8:	4830      	ldr	r0, [pc, #192]	; (800129c <BNO080_Initialization+0xe8>)
 80011da:	f003 f869 	bl	80042b0 <iprintf>
	
	CHIP_DESELECT(BNO080);
 80011de:	492b      	ldr	r1, [pc, #172]	; (800128c <BNO080_Initialization+0xd8>)
 80011e0:	482b      	ldr	r0, [pc, #172]	; (8001290 <BNO080_Initialization+0xdc>)
 80011e2:	f7ff ffc8 	bl	8001176 <LL_GPIO_SetOutputPin>
	
	//Configure the BNO080 for SPI communication
	WAKE_HIGH();	//Before boot up the PS0/WAK pin must be high to enter SPI mode
 80011e6:	492b      	ldr	r1, [pc, #172]	; (8001294 <BNO080_Initialization+0xe0>)
 80011e8:	4829      	ldr	r0, [pc, #164]	; (8001290 <BNO080_Initialization+0xdc>)
 80011ea:	f7ff ffc4 	bl	8001176 <LL_GPIO_SetOutputPin>
	RESET_LOW();	//Reset BNO080
 80011ee:	492a      	ldr	r1, [pc, #168]	; (8001298 <BNO080_Initialization+0xe4>)
 80011f0:	4827      	ldr	r0, [pc, #156]	; (8001290 <BNO080_Initialization+0xdc>)
 80011f2:	f7ff ffcf 	bl	8001194 <LL_GPIO_ResetOutputPin>
	HAL_Delay(200);	//Min length not specified in datasheet?
 80011f6:	20c8      	movs	r0, #200	; 0xc8
 80011f8:	f001 f942 	bl	8002480 <HAL_Delay>
	RESET_HIGH();	//Bring out of reset
 80011fc:	4926      	ldr	r1, [pc, #152]	; (8001298 <BNO080_Initialization+0xe4>)
 80011fe:	4824      	ldr	r0, [pc, #144]	; (8001290 <BNO080_Initialization+0xdc>)
 8001200:	f7ff ffb9 	bl	8001176 <LL_GPIO_SetOutputPin>
	
	BNO080_waitForSPI(); //Wait until INT pin goes low.
 8001204:	f000 fb18 	bl	8001838 <BNO080_waitForSPI>
	
	//At system startup, the hub must send its full advertisement message (see 5.2 and 5.3) to the
	//host. It must not send any other data until this step is complete.
	//When BNO080 first boots it broadcasts big startup packet
	//Read it and dump it
	BNO080_waitForSPI(); //Wait for assertion of INT before reading advert message.
 8001208:	f000 fb16 	bl	8001838 <BNO080_waitForSPI>
	BNO080_receivePacket();
 800120c:	f000 fb38 	bl	8001880 <BNO080_receivePacket>
	
	//The BNO080 will then transmit an unsolicited Initialize Response (see 6.4.5.2)
	//Read it and dump it
	BNO080_waitForSPI();  //Wait for assertion of INT before reading Init response
 8001210:	f000 fb12 	bl	8001838 <BNO080_waitForSPI>
	BNO080_receivePacket();
 8001214:	f000 fb34 	bl	8001880 <BNO080_receivePacket>
	
	//Check communication with device
	shtpData[0] = SHTP_REPORT_PRODUCT_ID_REQUEST; //Request the product ID and reset info
 8001218:	4b21      	ldr	r3, [pc, #132]	; (80012a0 <BNO080_Initialization+0xec>)
 800121a:	22f9      	movs	r2, #249	; 0xf9
 800121c:	701a      	strb	r2, [r3, #0]
	shtpData[1] = 0;						 //Reserved
 800121e:	4b20      	ldr	r3, [pc, #128]	; (80012a0 <BNO080_Initialization+0xec>)
 8001220:	2200      	movs	r2, #0
 8001222:	705a      	strb	r2, [r3, #1]
	
	//Transmit packet on channel 2, 2 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 2);
 8001224:	2102      	movs	r1, #2
 8001226:	2002      	movs	r0, #2
 8001228:	f000 fb9a 	bl	8001960 <BNO080_sendPacket>
	
	//Now we wait for response
	BNO080_waitForSPI();
 800122c:	f000 fb04 	bl	8001838 <BNO080_waitForSPI>
	if (BNO080_receivePacket() == 1)
 8001230:	f000 fb26 	bl	8001880 <BNO080_receivePacket>
 8001234:	4603      	mov	r3, r0
 8001236:	2b01      	cmp	r3, #1
 8001238:	d11b      	bne.n	8001272 <BNO080_Initialization+0xbe>
	{
		printf("header: %d %d %d %d\n", shtpHeader[0], shtpHeader[1], shtpHeader[2], shtpHeader[3]);
 800123a:	4b1a      	ldr	r3, [pc, #104]	; (80012a4 <BNO080_Initialization+0xf0>)
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	4619      	mov	r1, r3
 8001240:	4b18      	ldr	r3, [pc, #96]	; (80012a4 <BNO080_Initialization+0xf0>)
 8001242:	785b      	ldrb	r3, [r3, #1]
 8001244:	461a      	mov	r2, r3
 8001246:	4b17      	ldr	r3, [pc, #92]	; (80012a4 <BNO080_Initialization+0xf0>)
 8001248:	789b      	ldrb	r3, [r3, #2]
 800124a:	4618      	mov	r0, r3
 800124c:	4b15      	ldr	r3, [pc, #84]	; (80012a4 <BNO080_Initialization+0xf0>)
 800124e:	78db      	ldrb	r3, [r3, #3]
 8001250:	9300      	str	r3, [sp, #0]
 8001252:	4603      	mov	r3, r0
 8001254:	4814      	ldr	r0, [pc, #80]	; (80012a8 <BNO080_Initialization+0xf4>)
 8001256:	f003 f82b 	bl	80042b0 <iprintf>
		if (shtpData[0] == SHTP_REPORT_PRODUCT_ID_RESPONSE)
 800125a:	4b11      	ldr	r3, [pc, #68]	; (80012a0 <BNO080_Initialization+0xec>)
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	2bf8      	cmp	r3, #248	; 0xf8
 8001260:	d107      	bne.n	8001272 <BNO080_Initialization+0xbe>
		{
			printf("BNO080 who_am_i = 0x%02x...ok\n\n", shtpData[0]);
 8001262:	4b0f      	ldr	r3, [pc, #60]	; (80012a0 <BNO080_Initialization+0xec>)
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	4619      	mov	r1, r3
 8001268:	4810      	ldr	r0, [pc, #64]	; (80012ac <BNO080_Initialization+0xf8>)
 800126a:	f003 f821 	bl	80042b0 <iprintf>
			return (0);
 800126e:	2300      	movs	r3, #0
 8001270:	e007      	b.n	8001282 <BNO080_Initialization+0xce>
		}// Sensor OK
	}
	
	printf("BNO080 Not OK: 0x%02x Should be 0x%02x\n", shtpData[0], SHTP_REPORT_PRODUCT_ID_RESPONSE);
 8001272:	4b0b      	ldr	r3, [pc, #44]	; (80012a0 <BNO080_Initialization+0xec>)
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	22f8      	movs	r2, #248	; 0xf8
 8001278:	4619      	mov	r1, r3
 800127a:	480d      	ldr	r0, [pc, #52]	; (80012b0 <BNO080_Initialization+0xfc>)
 800127c:	f003 f818 	bl	80042b0 <iprintf>
	return (1); //Something went wrong
 8001280:	2301      	movs	r3, #1
}
 8001282:	4618      	mov	r0, r3
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	40013000 	.word	0x40013000
 800128c:	04100010 	.word	0x04100010
 8001290:	40010c00 	.word	0x40010c00
 8001294:	04400040 	.word	0x04400040
 8001298:	04800080 	.word	0x04800080
 800129c:	080071d0 	.word	0x080071d0
 80012a0:	20000200 	.word	0x20000200
 80012a4:	200001fc 	.word	0x200001fc
 80012a8:	080071e4 	.word	0x080071e4
 80012ac:	080071fc 	.word	0x080071fc
 80012b0:	0800721c 	.word	0x0800721c

080012b4 <SPI2_SendByte>:

unsigned char SPI2_SendByte(unsigned char data)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4603      	mov	r3, r0
 80012bc:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(BNO080_SPI_CHANNEL)==RESET);
 80012be:	bf00      	nop
 80012c0:	480c      	ldr	r0, [pc, #48]	; (80012f4 <SPI2_SendByte+0x40>)
 80012c2:	f7ff ff12 	bl	80010ea <LL_SPI_IsActiveFlag_TXE>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d0f9      	beq.n	80012c0 <SPI2_SendByte+0xc>
	LL_SPI_TransmitData8(BNO080_SPI_CHANNEL, data);
 80012cc:	79fb      	ldrb	r3, [r7, #7]
 80012ce:	4619      	mov	r1, r3
 80012d0:	4808      	ldr	r0, [pc, #32]	; (80012f4 <SPI2_SendByte+0x40>)
 80012d2:	f7ff ff29 	bl	8001128 <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(BNO080_SPI_CHANNEL)==RESET);
 80012d6:	bf00      	nop
 80012d8:	4806      	ldr	r0, [pc, #24]	; (80012f4 <SPI2_SendByte+0x40>)
 80012da:	f7ff fef4 	bl	80010c6 <LL_SPI_IsActiveFlag_RXNE>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d0f9      	beq.n	80012d8 <SPI2_SendByte+0x24>
	return LL_SPI_ReceiveData8(BNO080_SPI_CHANNEL);
 80012e4:	4803      	ldr	r0, [pc, #12]	; (80012f4 <SPI2_SendByte+0x40>)
 80012e6:	f7ff ff12 	bl	800110e <LL_SPI_ReceiveData8>
 80012ea:	4603      	mov	r3, r0
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	3708      	adds	r7, #8
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	40013000 	.word	0x40013000

080012f8 <BNO080_dataAvailable>:
//////////////////////////////////////////////////////////////////////////

//Updates the latest variables if possible
//Returns false if new readings are not available
int BNO080_dataAvailable(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
	//If we have an interrupt pin connection available, check if data is available.
	//If int pin is NULL, then we'll rely on BNO080_receivePacket() to timeout
	//See issue 13: https://github.com/sparkfun/SparkFun_BNO080_Arduino_Library/issues/13
	if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 1)
 80012fc:	4912      	ldr	r1, [pc, #72]	; (8001348 <BNO080_dataAvailable+0x50>)
 80012fe:	4813      	ldr	r0, [pc, #76]	; (800134c <BNO080_dataAvailable+0x54>)
 8001300:	f7ff ff23 	bl	800114a <LL_GPIO_IsInputPinSet>
 8001304:	4603      	mov	r3, r0
 8001306:	2b01      	cmp	r3, #1
 8001308:	d101      	bne.n	800130e <BNO080_dataAvailable+0x16>
		return (0);
 800130a:	2300      	movs	r3, #0
 800130c:	e019      	b.n	8001342 <BNO080_dataAvailable+0x4a>

	if (BNO080_receivePacket() == 1)
 800130e:	f000 fab7 	bl	8001880 <BNO080_receivePacket>
 8001312:	4603      	mov	r3, r0
 8001314:	2b01      	cmp	r3, #1
 8001316:	d113      	bne.n	8001340 <BNO080_dataAvailable+0x48>
	{
		//Check to see if this packet is a sensor reporting its data to us
		if (shtpHeader[2] == CHANNEL_REPORTS && shtpData[0] == SHTP_REPORT_BASE_TIMESTAMP)
 8001318:	4b0d      	ldr	r3, [pc, #52]	; (8001350 <BNO080_dataAvailable+0x58>)
 800131a:	789b      	ldrb	r3, [r3, #2]
 800131c:	2b03      	cmp	r3, #3
 800131e:	d107      	bne.n	8001330 <BNO080_dataAvailable+0x38>
 8001320:	4b0c      	ldr	r3, [pc, #48]	; (8001354 <BNO080_dataAvailable+0x5c>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	2bfb      	cmp	r3, #251	; 0xfb
 8001326:	d103      	bne.n	8001330 <BNO080_dataAvailable+0x38>
		{
			BNO080_parseInputReport(); //This will update the rawAccelX, etc variables depending on which feature report is found
 8001328:	f000 f830 	bl	800138c <BNO080_parseInputReport>
			return (1);
 800132c:	2301      	movs	r3, #1
 800132e:	e008      	b.n	8001342 <BNO080_dataAvailable+0x4a>
		}
		else if (shtpHeader[2] == CHANNEL_CONTROL)
 8001330:	4b07      	ldr	r3, [pc, #28]	; (8001350 <BNO080_dataAvailable+0x58>)
 8001332:	789b      	ldrb	r3, [r3, #2]
 8001334:	2b02      	cmp	r3, #2
 8001336:	d103      	bne.n	8001340 <BNO080_dataAvailable+0x48>
		{
			BNO080_parseCommandReport(); //This will update responses to commands, calibrationStatus, etc.
 8001338:	f000 f80e 	bl	8001358 <BNO080_parseCommandReport>
			return (1);
 800133c:	2301      	movs	r3, #1
 800133e:	e000      	b.n	8001342 <BNO080_dataAvailable+0x4a>
		}
	}
	return (0);
 8001340:	2300      	movs	r3, #0
}
 8001342:	4618      	mov	r0, r3
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	04200020 	.word	0x04200020
 800134c:	40010c00 	.word	0x40010c00
 8001350:	200001fc 	.word	0x200001fc
 8001354:	20000200 	.word	0x20000200

08001358 <BNO080_parseCommandReport>:
//shtpData[5 + 5]: R5
//shtpData[5 + 6]: R6
//shtpData[5 + 7]: R7
//shtpData[5 + 8]: R8
void BNO080_parseCommandReport(void)
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
	if (shtpData[0] == SHTP_REPORT_COMMAND_RESPONSE)
 800135e:	4b09      	ldr	r3, [pc, #36]	; (8001384 <BNO080_parseCommandReport+0x2c>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	2bf1      	cmp	r3, #241	; 0xf1
 8001364:	d109      	bne.n	800137a <BNO080_parseCommandReport+0x22>
	{
		//The BNO080 responds with this report to command requests. It's up to use to remember which command we issued.
		uint8_t command = shtpData[2]; //This is the Command byte of the response
 8001366:	4b07      	ldr	r3, [pc, #28]	; (8001384 <BNO080_parseCommandReport+0x2c>)
 8001368:	789b      	ldrb	r3, [r3, #2]
 800136a:	71fb      	strb	r3, [r7, #7]

		if (command == COMMAND_ME_CALIBRATE)
 800136c:	79fb      	ldrb	r3, [r7, #7]
 800136e:	2b07      	cmp	r3, #7
 8001370:	d103      	bne.n	800137a <BNO080_parseCommandReport+0x22>
		{
			calibrationStatus = shtpData[5]; //R0 - Status (0 = success, non-zero = fail)
 8001372:	4b04      	ldr	r3, [pc, #16]	; (8001384 <BNO080_parseCommandReport+0x2c>)
 8001374:	795a      	ldrb	r2, [r3, #5]
 8001376:	4b04      	ldr	r3, [pc, #16]	; (8001388 <BNO080_parseCommandReport+0x30>)
 8001378:	701a      	strb	r2, [r3, #0]
		//This sensor report ID is unhandled.
		//See reference manual to add additional feature reports as needed
	}

	//TODO additional feature reports may be strung together. Parse them all.
}
 800137a:	bf00      	nop
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	bc80      	pop	{r7}
 8001382:	4770      	bx	lr
 8001384:	20000200 	.word	0x20000200
 8001388:	200002c0 	.word	0x200002c0

0800138c <BNO080_parseInputReport>:
//shtpData[6:7]: j/accel y/gyro y/etc
//shtpData[8:9]: k/accel z/gyro z/etc
//shtpData[10:11]: real/gyro temp/etc
//shtpData[12:13]: Accuracy estimate
void BNO080_parseInputReport(void)
{
 800138c:	b480      	push	{r7}
 800138e:	b087      	sub	sp, #28
 8001390:	af00      	add	r7, sp, #0
	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)shtpHeader[1] << 8 | shtpHeader[0]);
 8001392:	4b97      	ldr	r3, [pc, #604]	; (80015f0 <BNO080_parseInputReport+0x264>)
 8001394:	785b      	ldrb	r3, [r3, #1]
 8001396:	021b      	lsls	r3, r3, #8
 8001398:	b21a      	sxth	r2, r3
 800139a:	4b95      	ldr	r3, [pc, #596]	; (80015f0 <BNO080_parseInputReport+0x264>)
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	b21b      	sxth	r3, r3
 80013a0:	4313      	orrs	r3, r2
 80013a2:	823b      	strh	r3, [r7, #16]
	dataLength &= ~(1 << 15); //Clear the MSbit. This bit indicates if this package is a continuation of the last.
 80013a4:	8a3b      	ldrh	r3, [r7, #16]
 80013a6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80013aa:	823b      	strh	r3, [r7, #16]
	//Ignore it for now. TODO catch this as an error and exit

	dataLength -= 4; //Remove the header bytes from the data count
 80013ac:	8a3b      	ldrh	r3, [r7, #16]
 80013ae:	3b04      	subs	r3, #4
 80013b0:	b29b      	uxth	r3, r3
 80013b2:	823b      	strh	r3, [r7, #16]

	timeStamp = ((uint32_t)shtpData[4] << (8 * 3)) | (shtpData[3] << (8 * 2)) | (shtpData[2] << (8 * 1)) | (shtpData[1] << (8 * 0));
 80013b4:	4b8f      	ldr	r3, [pc, #572]	; (80015f4 <BNO080_parseInputReport+0x268>)
 80013b6:	791b      	ldrb	r3, [r3, #4]
 80013b8:	061b      	lsls	r3, r3, #24
 80013ba:	4a8e      	ldr	r2, [pc, #568]	; (80015f4 <BNO080_parseInputReport+0x268>)
 80013bc:	78d2      	ldrb	r2, [r2, #3]
 80013be:	0412      	lsls	r2, r2, #16
 80013c0:	4313      	orrs	r3, r2
 80013c2:	4a8c      	ldr	r2, [pc, #560]	; (80015f4 <BNO080_parseInputReport+0x268>)
 80013c4:	7892      	ldrb	r2, [r2, #2]
 80013c6:	0212      	lsls	r2, r2, #8
 80013c8:	4313      	orrs	r3, r2
 80013ca:	4a8a      	ldr	r2, [pc, #552]	; (80015f4 <BNO080_parseInputReport+0x268>)
 80013cc:	7852      	ldrb	r2, [r2, #1]
 80013ce:	4313      	orrs	r3, r2
 80013d0:	4a89      	ldr	r2, [pc, #548]	; (80015f8 <BNO080_parseInputReport+0x26c>)
 80013d2:	6013      	str	r3, [r2, #0]

	uint8_t status = shtpData[7] & 0x03; //Get status bits
 80013d4:	4b87      	ldr	r3, [pc, #540]	; (80015f4 <BNO080_parseInputReport+0x268>)
 80013d6:	79db      	ldrb	r3, [r3, #7]
 80013d8:	f003 0303 	and.w	r3, r3, #3
 80013dc:	73fb      	strb	r3, [r7, #15]
	uint16_t data1 = (uint16_t)shtpData[10] << 8 | shtpData[9];
 80013de:	4b85      	ldr	r3, [pc, #532]	; (80015f4 <BNO080_parseInputReport+0x268>)
 80013e0:	7a9b      	ldrb	r3, [r3, #10]
 80013e2:	021b      	lsls	r3, r3, #8
 80013e4:	b21a      	sxth	r2, r3
 80013e6:	4b83      	ldr	r3, [pc, #524]	; (80015f4 <BNO080_parseInputReport+0x268>)
 80013e8:	7a5b      	ldrb	r3, [r3, #9]
 80013ea:	b21b      	sxth	r3, r3
 80013ec:	4313      	orrs	r3, r2
 80013ee:	b21b      	sxth	r3, r3
 80013f0:	81bb      	strh	r3, [r7, #12]
	uint16_t data2 = (uint16_t)shtpData[12] << 8 | shtpData[11];
 80013f2:	4b80      	ldr	r3, [pc, #512]	; (80015f4 <BNO080_parseInputReport+0x268>)
 80013f4:	7b1b      	ldrb	r3, [r3, #12]
 80013f6:	021b      	lsls	r3, r3, #8
 80013f8:	b21a      	sxth	r2, r3
 80013fa:	4b7e      	ldr	r3, [pc, #504]	; (80015f4 <BNO080_parseInputReport+0x268>)
 80013fc:	7adb      	ldrb	r3, [r3, #11]
 80013fe:	b21b      	sxth	r3, r3
 8001400:	4313      	orrs	r3, r2
 8001402:	b21b      	sxth	r3, r3
 8001404:	817b      	strh	r3, [r7, #10]
	uint16_t data3 = (uint16_t)shtpData[14] << 8 | shtpData[13];
 8001406:	4b7b      	ldr	r3, [pc, #492]	; (80015f4 <BNO080_parseInputReport+0x268>)
 8001408:	7b9b      	ldrb	r3, [r3, #14]
 800140a:	021b      	lsls	r3, r3, #8
 800140c:	b21a      	sxth	r2, r3
 800140e:	4b79      	ldr	r3, [pc, #484]	; (80015f4 <BNO080_parseInputReport+0x268>)
 8001410:	7b5b      	ldrb	r3, [r3, #13]
 8001412:	b21b      	sxth	r3, r3
 8001414:	4313      	orrs	r3, r2
 8001416:	b21b      	sxth	r3, r3
 8001418:	813b      	strh	r3, [r7, #8]
	uint16_t data4 = 0;
 800141a:	2300      	movs	r3, #0
 800141c:	82fb      	strh	r3, [r7, #22]
	uint16_t data5 = 0;
 800141e:	2300      	movs	r3, #0
 8001420:	82bb      	strh	r3, [r7, #20]

	if (dataLength > 14)
 8001422:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001426:	2b0e      	cmp	r3, #14
 8001428:	dd09      	ble.n	800143e <BNO080_parseInputReport+0xb2>
	{
		data4 = (uint16_t)shtpData[16] << 8 | shtpData[15];
 800142a:	4b72      	ldr	r3, [pc, #456]	; (80015f4 <BNO080_parseInputReport+0x268>)
 800142c:	7c1b      	ldrb	r3, [r3, #16]
 800142e:	021b      	lsls	r3, r3, #8
 8001430:	b21a      	sxth	r2, r3
 8001432:	4b70      	ldr	r3, [pc, #448]	; (80015f4 <BNO080_parseInputReport+0x268>)
 8001434:	7bdb      	ldrb	r3, [r3, #15]
 8001436:	b21b      	sxth	r3, r3
 8001438:	4313      	orrs	r3, r2
 800143a:	b21b      	sxth	r3, r3
 800143c:	82fb      	strh	r3, [r7, #22]
	}
	if (dataLength > 16)
 800143e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001442:	2b10      	cmp	r3, #16
 8001444:	dd09      	ble.n	800145a <BNO080_parseInputReport+0xce>
	{
		data5 = (uint16_t)shtpData[18] << 8 | shtpData[17];
 8001446:	4b6b      	ldr	r3, [pc, #428]	; (80015f4 <BNO080_parseInputReport+0x268>)
 8001448:	7c9b      	ldrb	r3, [r3, #18]
 800144a:	021b      	lsls	r3, r3, #8
 800144c:	b21a      	sxth	r2, r3
 800144e:	4b69      	ldr	r3, [pc, #420]	; (80015f4 <BNO080_parseInputReport+0x268>)
 8001450:	7c5b      	ldrb	r3, [r3, #17]
 8001452:	b21b      	sxth	r3, r3
 8001454:	4313      	orrs	r3, r2
 8001456:	b21b      	sxth	r3, r3
 8001458:	82bb      	strh	r3, [r7, #20]
	}

	//Store these generic values to their proper global variable
	switch(shtpData[5])
 800145a:	4b66      	ldr	r3, [pc, #408]	; (80015f4 <BNO080_parseInputReport+0x268>)
 800145c:	795b      	ldrb	r3, [r3, #5]
 800145e:	2b1e      	cmp	r3, #30
 8001460:	dc46      	bgt.n	80014f0 <BNO080_parseInputReport+0x164>
 8001462:	2b00      	cmp	r3, #0
 8001464:	f340 80bf 	ble.w	80015e6 <BNO080_parseInputReport+0x25a>
 8001468:	3b01      	subs	r3, #1
 800146a:	2b1d      	cmp	r3, #29
 800146c:	f200 80bb 	bhi.w	80015e6 <BNO080_parseInputReport+0x25a>
 8001470:	a201      	add	r2, pc, #4	; (adr r2, 8001478 <BNO080_parseInputReport+0xec>)
 8001472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001476:	bf00      	nop
 8001478:	080014f7 	.word	0x080014f7
 800147c:	0800152f 	.word	0x0800152f
 8001480:	0800154b 	.word	0x0800154b
 8001484:	08001513 	.word	0x08001513
 8001488:	08001567 	.word	0x08001567
 800148c:	080015e7 	.word	0x080015e7
 8001490:	080015e7 	.word	0x080015e7
 8001494:	08001567 	.word	0x08001567
 8001498:	080015e7 	.word	0x080015e7
 800149c:	080015e7 	.word	0x080015e7
 80014a0:	080015e7 	.word	0x080015e7
 80014a4:	080015e7 	.word	0x080015e7
 80014a8:	080015e7 	.word	0x080015e7
 80014ac:	080015e7 	.word	0x080015e7
 80014b0:	080015e7 	.word	0x080015e7
 80014b4:	080015e7 	.word	0x080015e7
 80014b8:	0800158f 	.word	0x0800158f
 80014bc:	080015e7 	.word	0x080015e7
 80014c0:	08001597 	.word	0x08001597
 80014c4:	080015e7 	.word	0x080015e7
 80014c8:	080015e7 	.word	0x080015e7
 80014cc:	080015e7 	.word	0x080015e7
 80014d0:	080015e7 	.word	0x080015e7
 80014d4:	080015e7 	.word	0x080015e7
 80014d8:	080015e7 	.word	0x080015e7
 80014dc:	080015e7 	.word	0x080015e7
 80014e0:	080015e7 	.word	0x080015e7
 80014e4:	080015e7 	.word	0x080015e7
 80014e8:	080015e7 	.word	0x080015e7
 80014ec:	080015a1 	.word	0x080015a1
 80014f0:	2bf1      	cmp	r3, #241	; 0xf1
 80014f2:	d06d      	beq.n	80015d0 <BNO080_parseInputReport+0x244>
			//See reference manual to add additional feature reports as needed
		}
	}

	//TODO additional feature reports may be strung together. Parse them all.
}
 80014f4:	e077      	b.n	80015e6 <BNO080_parseInputReport+0x25a>
			accelAccuracy = status;
 80014f6:	7bfb      	ldrb	r3, [r7, #15]
 80014f8:	b29a      	uxth	r2, r3
 80014fa:	4b40      	ldr	r3, [pc, #256]	; (80015fc <BNO080_parseInputReport+0x270>)
 80014fc:	801a      	strh	r2, [r3, #0]
			rawAccelX = data1;
 80014fe:	4a40      	ldr	r2, [pc, #256]	; (8001600 <BNO080_parseInputReport+0x274>)
 8001500:	89bb      	ldrh	r3, [r7, #12]
 8001502:	8013      	strh	r3, [r2, #0]
			rawAccelY = data2;
 8001504:	4a3f      	ldr	r2, [pc, #252]	; (8001604 <BNO080_parseInputReport+0x278>)
 8001506:	897b      	ldrh	r3, [r7, #10]
 8001508:	8013      	strh	r3, [r2, #0]
			rawAccelZ = data3;
 800150a:	4a3f      	ldr	r2, [pc, #252]	; (8001608 <BNO080_parseInputReport+0x27c>)
 800150c:	893b      	ldrh	r3, [r7, #8]
 800150e:	8013      	strh	r3, [r2, #0]
			break;
 8001510:	e069      	b.n	80015e6 <BNO080_parseInputReport+0x25a>
			accelLinAccuracy = status;
 8001512:	7bfb      	ldrb	r3, [r7, #15]
 8001514:	b29a      	uxth	r2, r3
 8001516:	4b3d      	ldr	r3, [pc, #244]	; (800160c <BNO080_parseInputReport+0x280>)
 8001518:	801a      	strh	r2, [r3, #0]
			rawLinAccelX = data1;
 800151a:	4a3d      	ldr	r2, [pc, #244]	; (8001610 <BNO080_parseInputReport+0x284>)
 800151c:	89bb      	ldrh	r3, [r7, #12]
 800151e:	8013      	strh	r3, [r2, #0]
			rawLinAccelY = data2;
 8001520:	4a3c      	ldr	r2, [pc, #240]	; (8001614 <BNO080_parseInputReport+0x288>)
 8001522:	897b      	ldrh	r3, [r7, #10]
 8001524:	8013      	strh	r3, [r2, #0]
			rawLinAccelZ = data3;
 8001526:	4a3c      	ldr	r2, [pc, #240]	; (8001618 <BNO080_parseInputReport+0x28c>)
 8001528:	893b      	ldrh	r3, [r7, #8]
 800152a:	8013      	strh	r3, [r2, #0]
			break;
 800152c:	e05b      	b.n	80015e6 <BNO080_parseInputReport+0x25a>
			gyroAccuracy = status;
 800152e:	7bfb      	ldrb	r3, [r7, #15]
 8001530:	b29a      	uxth	r2, r3
 8001532:	4b3a      	ldr	r3, [pc, #232]	; (800161c <BNO080_parseInputReport+0x290>)
 8001534:	801a      	strh	r2, [r3, #0]
			rawGyroX = data1;
 8001536:	4a3a      	ldr	r2, [pc, #232]	; (8001620 <BNO080_parseInputReport+0x294>)
 8001538:	89bb      	ldrh	r3, [r7, #12]
 800153a:	8013      	strh	r3, [r2, #0]
			rawGyroY = data2;
 800153c:	4a39      	ldr	r2, [pc, #228]	; (8001624 <BNO080_parseInputReport+0x298>)
 800153e:	897b      	ldrh	r3, [r7, #10]
 8001540:	8013      	strh	r3, [r2, #0]
			rawGyroZ = data3;
 8001542:	4a39      	ldr	r2, [pc, #228]	; (8001628 <BNO080_parseInputReport+0x29c>)
 8001544:	893b      	ldrh	r3, [r7, #8]
 8001546:	8013      	strh	r3, [r2, #0]
			break;
 8001548:	e04d      	b.n	80015e6 <BNO080_parseInputReport+0x25a>
			magAccuracy = status;
 800154a:	7bfb      	ldrb	r3, [r7, #15]
 800154c:	b29a      	uxth	r2, r3
 800154e:	4b37      	ldr	r3, [pc, #220]	; (800162c <BNO080_parseInputReport+0x2a0>)
 8001550:	801a      	strh	r2, [r3, #0]
			rawMagX = data1;
 8001552:	4a37      	ldr	r2, [pc, #220]	; (8001630 <BNO080_parseInputReport+0x2a4>)
 8001554:	89bb      	ldrh	r3, [r7, #12]
 8001556:	8013      	strh	r3, [r2, #0]
			rawMagY = data2;
 8001558:	4a36      	ldr	r2, [pc, #216]	; (8001634 <BNO080_parseInputReport+0x2a8>)
 800155a:	897b      	ldrh	r3, [r7, #10]
 800155c:	8013      	strh	r3, [r2, #0]
			rawMagZ = data3;
 800155e:	4a36      	ldr	r2, [pc, #216]	; (8001638 <BNO080_parseInputReport+0x2ac>)
 8001560:	893b      	ldrh	r3, [r7, #8]
 8001562:	8013      	strh	r3, [r2, #0]
			break;
 8001564:	e03f      	b.n	80015e6 <BNO080_parseInputReport+0x25a>
			quatAccuracy = status;
 8001566:	7bfb      	ldrb	r3, [r7, #15]
 8001568:	b29a      	uxth	r2, r3
 800156a:	4b34      	ldr	r3, [pc, #208]	; (800163c <BNO080_parseInputReport+0x2b0>)
 800156c:	801a      	strh	r2, [r3, #0]
			rawQuatI = data1;
 800156e:	4a34      	ldr	r2, [pc, #208]	; (8001640 <BNO080_parseInputReport+0x2b4>)
 8001570:	89bb      	ldrh	r3, [r7, #12]
 8001572:	8013      	strh	r3, [r2, #0]
			rawQuatJ = data2;
 8001574:	4a33      	ldr	r2, [pc, #204]	; (8001644 <BNO080_parseInputReport+0x2b8>)
 8001576:	897b      	ldrh	r3, [r7, #10]
 8001578:	8013      	strh	r3, [r2, #0]
			rawQuatK = data3;
 800157a:	4a33      	ldr	r2, [pc, #204]	; (8001648 <BNO080_parseInputReport+0x2bc>)
 800157c:	893b      	ldrh	r3, [r7, #8]
 800157e:	8013      	strh	r3, [r2, #0]
			rawQuatReal = data4;
 8001580:	4a32      	ldr	r2, [pc, #200]	; (800164c <BNO080_parseInputReport+0x2c0>)
 8001582:	8afb      	ldrh	r3, [r7, #22]
 8001584:	8013      	strh	r3, [r2, #0]
			rawQuatRadianAccuracy = data5; //Only available on rotation vector, not game rot vector
 8001586:	4a32      	ldr	r2, [pc, #200]	; (8001650 <BNO080_parseInputReport+0x2c4>)
 8001588:	8abb      	ldrh	r3, [r7, #20]
 800158a:	8013      	strh	r3, [r2, #0]
			break;
 800158c:	e02b      	b.n	80015e6 <BNO080_parseInputReport+0x25a>
			stepCount = data3; //Bytes 8/9
 800158e:	4a31      	ldr	r2, [pc, #196]	; (8001654 <BNO080_parseInputReport+0x2c8>)
 8001590:	893b      	ldrh	r3, [r7, #8]
 8001592:	8013      	strh	r3, [r2, #0]
			break;
 8001594:	e027      	b.n	80015e6 <BNO080_parseInputReport+0x25a>
			stabilityClassifier = shtpData[5 + 4]; //Byte 4 only
 8001596:	4b17      	ldr	r3, [pc, #92]	; (80015f4 <BNO080_parseInputReport+0x268>)
 8001598:	7a5a      	ldrb	r2, [r3, #9]
 800159a:	4b2f      	ldr	r3, [pc, #188]	; (8001658 <BNO080_parseInputReport+0x2cc>)
 800159c:	701a      	strb	r2, [r3, #0]
			break;
 800159e:	e022      	b.n	80015e6 <BNO080_parseInputReport+0x25a>
			activityClassifier = shtpData[5 + 5]; //Most likely state
 80015a0:	4b14      	ldr	r3, [pc, #80]	; (80015f4 <BNO080_parseInputReport+0x268>)
 80015a2:	7a9a      	ldrb	r2, [r3, #10]
 80015a4:	4b2d      	ldr	r3, [pc, #180]	; (800165c <BNO080_parseInputReport+0x2d0>)
 80015a6:	701a      	strb	r2, [r3, #0]
			for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9. TODO - bring in array size
 80015a8:	2300      	movs	r3, #0
 80015aa:	74fb      	strb	r3, [r7, #19]
 80015ac:	e00c      	b.n	80015c8 <BNO080_parseInputReport+0x23c>
				_activityConfidences[x] = shtpData[11 + x]; //5 bytes of timestamp, byte 6 is first confidence byte
 80015ae:	7cfb      	ldrb	r3, [r7, #19]
 80015b0:	f103 020b 	add.w	r2, r3, #11
 80015b4:	4b2a      	ldr	r3, [pc, #168]	; (8001660 <BNO080_parseInputReport+0x2d4>)
 80015b6:	6819      	ldr	r1, [r3, #0]
 80015b8:	7cfb      	ldrb	r3, [r7, #19]
 80015ba:	440b      	add	r3, r1
 80015bc:	490d      	ldr	r1, [pc, #52]	; (80015f4 <BNO080_parseInputReport+0x268>)
 80015be:	5c8a      	ldrb	r2, [r1, r2]
 80015c0:	701a      	strb	r2, [r3, #0]
			for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9. TODO - bring in array size
 80015c2:	7cfb      	ldrb	r3, [r7, #19]
 80015c4:	3301      	adds	r3, #1
 80015c6:	74fb      	strb	r3, [r7, #19]
 80015c8:	7cfb      	ldrb	r3, [r7, #19]
 80015ca:	2b08      	cmp	r3, #8
 80015cc:	d9ef      	bls.n	80015ae <BNO080_parseInputReport+0x222>
			break;
 80015ce:	e00a      	b.n	80015e6 <BNO080_parseInputReport+0x25a>
			uint8_t command = shtpData[5 + 2]; //This is the Command byte of the response
 80015d0:	4b08      	ldr	r3, [pc, #32]	; (80015f4 <BNO080_parseInputReport+0x268>)
 80015d2:	79db      	ldrb	r3, [r3, #7]
 80015d4:	71fb      	strb	r3, [r7, #7]
			if (command == COMMAND_ME_CALIBRATE)
 80015d6:	79fb      	ldrb	r3, [r7, #7]
 80015d8:	2b07      	cmp	r3, #7
 80015da:	d103      	bne.n	80015e4 <BNO080_parseInputReport+0x258>
				calibrationStatus = shtpData[5 + 5]; //R0 - Status (0 = success, non-zero = fail)
 80015dc:	4b05      	ldr	r3, [pc, #20]	; (80015f4 <BNO080_parseInputReport+0x268>)
 80015de:	7a9a      	ldrb	r2, [r3, #10]
 80015e0:	4b20      	ldr	r3, [pc, #128]	; (8001664 <BNO080_parseInputReport+0x2d8>)
 80015e2:	701a      	strb	r2, [r3, #0]
			break;
 80015e4:	bf00      	nop
}
 80015e6:	bf00      	nop
 80015e8:	371c      	adds	r7, #28
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bc80      	pop	{r7}
 80015ee:	4770      	bx	lr
 80015f0:	200001fc 	.word	0x200001fc
 80015f4:	20000200 	.word	0x20000200
 80015f8:	200002b4 	.word	0x200002b4
 80015fc:	2000028c 	.word	0x2000028c
 8001600:	20000286 	.word	0x20000286
 8001604:	20000288 	.word	0x20000288
 8001608:	2000028a 	.word	0x2000028a
 800160c:	20000294 	.word	0x20000294
 8001610:	2000028e 	.word	0x2000028e
 8001614:	20000290 	.word	0x20000290
 8001618:	20000292 	.word	0x20000292
 800161c:	2000029c 	.word	0x2000029c
 8001620:	20000296 	.word	0x20000296
 8001624:	20000298 	.word	0x20000298
 8001628:	2000029a 	.word	0x2000029a
 800162c:	200002a4 	.word	0x200002a4
 8001630:	2000029e 	.word	0x2000029e
 8001634:	200002a0 	.word	0x200002a0
 8001638:	200002a2 	.word	0x200002a2
 800163c:	200002b0 	.word	0x200002b0
 8001640:	200002a6 	.word	0x200002a6
 8001644:	200002a8 	.word	0x200002a8
 8001648:	200002aa 	.word	0x200002aa
 800164c:	200002ac 	.word	0x200002ac
 8001650:	200002ae 	.word	0x200002ae
 8001654:	200002b2 	.word	0x200002b2
 8001658:	200002b8 	.word	0x200002b8
 800165c:	200002b9 	.word	0x200002b9
 8001660:	200002bc 	.word	0x200002bc
 8001664:	200002c0 	.word	0x200002c0

08001668 <BNO080_getQuatI>:

//Return the rotation vector quaternion I
float BNO080_getQuatI()
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatI, rotationVector_Q1);
 800166c:	4b06      	ldr	r3, [pc, #24]	; (8001688 <BNO080_getQuatI+0x20>)
 800166e:	881b      	ldrh	r3, [r3, #0]
 8001670:	b21b      	sxth	r3, r3
 8001672:	4a06      	ldr	r2, [pc, #24]	; (800168c <BNO080_getQuatI+0x24>)
 8001674:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001678:	b2d2      	uxtb	r2, r2
 800167a:	4611      	mov	r1, r2
 800167c:	4618      	mov	r0, r3
 800167e:	f000 f857 	bl	8001730 <BNO080_qToFloat>
 8001682:	4603      	mov	r3, r0
}
 8001684:	4618      	mov	r0, r3
 8001686:	bd80      	pop	{r7, pc}
 8001688:	200002a6 	.word	0x200002a6
 800168c:	20000000 	.word	0x20000000

08001690 <BNO080_getQuatJ>:

//Return the rotation vector quaternion J
float BNO080_getQuatJ()
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatJ, rotationVector_Q1);
 8001694:	4b06      	ldr	r3, [pc, #24]	; (80016b0 <BNO080_getQuatJ+0x20>)
 8001696:	881b      	ldrh	r3, [r3, #0]
 8001698:	b21b      	sxth	r3, r3
 800169a:	4a06      	ldr	r2, [pc, #24]	; (80016b4 <BNO080_getQuatJ+0x24>)
 800169c:	f9b2 2000 	ldrsh.w	r2, [r2]
 80016a0:	b2d2      	uxtb	r2, r2
 80016a2:	4611      	mov	r1, r2
 80016a4:	4618      	mov	r0, r3
 80016a6:	f000 f843 	bl	8001730 <BNO080_qToFloat>
 80016aa:	4603      	mov	r3, r0
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	200002a8 	.word	0x200002a8
 80016b4:	20000000 	.word	0x20000000

080016b8 <BNO080_getQuatK>:

//Return the rotation vector quaternion K
float BNO080_getQuatK()
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatK, rotationVector_Q1);
 80016bc:	4b06      	ldr	r3, [pc, #24]	; (80016d8 <BNO080_getQuatK+0x20>)
 80016be:	881b      	ldrh	r3, [r3, #0]
 80016c0:	b21b      	sxth	r3, r3
 80016c2:	4a06      	ldr	r2, [pc, #24]	; (80016dc <BNO080_getQuatK+0x24>)
 80016c4:	f9b2 2000 	ldrsh.w	r2, [r2]
 80016c8:	b2d2      	uxtb	r2, r2
 80016ca:	4611      	mov	r1, r2
 80016cc:	4618      	mov	r0, r3
 80016ce:	f000 f82f 	bl	8001730 <BNO080_qToFloat>
 80016d2:	4603      	mov	r3, r0
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	200002aa 	.word	0x200002aa
 80016dc:	20000000 	.word	0x20000000

080016e0 <BNO080_getQuatReal>:

//Return the rotation vector quaternion Real
float BNO080_getQuatReal()
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatReal, rotationVector_Q1);
 80016e4:	4b06      	ldr	r3, [pc, #24]	; (8001700 <BNO080_getQuatReal+0x20>)
 80016e6:	881b      	ldrh	r3, [r3, #0]
 80016e8:	b21b      	sxth	r3, r3
 80016ea:	4a06      	ldr	r2, [pc, #24]	; (8001704 <BNO080_getQuatReal+0x24>)
 80016ec:	f9b2 2000 	ldrsh.w	r2, [r2]
 80016f0:	b2d2      	uxtb	r2, r2
 80016f2:	4611      	mov	r1, r2
 80016f4:	4618      	mov	r0, r3
 80016f6:	f000 f81b 	bl	8001730 <BNO080_qToFloat>
 80016fa:	4603      	mov	r3, r0
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	200002ac 	.word	0x200002ac
 8001704:	20000000 	.word	0x20000000

08001708 <BNO080_getQuatRadianAccuracy>:

//Return the rotation vector accuracy
float BNO080_getQuatRadianAccuracy()
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatRadianAccuracy, rotationVector_Q1);
 800170c:	4b06      	ldr	r3, [pc, #24]	; (8001728 <BNO080_getQuatRadianAccuracy+0x20>)
 800170e:	881b      	ldrh	r3, [r3, #0]
 8001710:	b21b      	sxth	r3, r3
 8001712:	4a06      	ldr	r2, [pc, #24]	; (800172c <BNO080_getQuatRadianAccuracy+0x24>)
 8001714:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001718:	b2d2      	uxtb	r2, r2
 800171a:	4611      	mov	r1, r2
 800171c:	4618      	mov	r0, r3
 800171e:	f000 f807 	bl	8001730 <BNO080_qToFloat>
 8001722:	4603      	mov	r3, r0
}
 8001724:	4618      	mov	r0, r3
 8001726:	bd80      	pop	{r7, pc}
 8001728:	200002ae 	.word	0x200002ae
 800172c:	20000000 	.word	0x20000000

08001730 <BNO080_qToFloat>:
}

//Given a register value and a Q point, convert to float
//See https://en.wikipedia.org/wiki/Q_(number_format)
float BNO080_qToFloat(int16_t fixedPointValue, uint8_t qPoint)
{
 8001730:	b590      	push	{r4, r7, lr}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	4603      	mov	r3, r0
 8001738:	460a      	mov	r2, r1
 800173a:	80fb      	strh	r3, [r7, #6]
 800173c:	4613      	mov	r3, r2
 800173e:	717b      	strb	r3, [r7, #5]
	return fixedPointValue * powf(2, qPoint * -1);
 8001740:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001744:	4618      	mov	r0, r3
 8001746:	f7ff fa59 	bl	8000bfc <__aeabi_i2f>
 800174a:	4604      	mov	r4, r0
 800174c:	797b      	ldrb	r3, [r7, #5]
 800174e:	425b      	negs	r3, r3
 8001750:	4618      	mov	r0, r3
 8001752:	f7ff fa53 	bl	8000bfc <__aeabi_i2f>
 8001756:	4603      	mov	r3, r0
 8001758:	4619      	mov	r1, r3
 800175a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800175e:	f004 fdbb 	bl	80062d8 <powf>
 8001762:	4603      	mov	r3, r0
 8001764:	4619      	mov	r1, r3
 8001766:	4620      	mov	r0, r4
 8001768:	f7ff fa9c 	bl	8000ca4 <__aeabi_fmul>
 800176c:	4603      	mov	r3, r0
}
 800176e:	4618      	mov	r0, r3
 8001770:	370c      	adds	r7, #12
 8001772:	46bd      	mov	sp, r7
 8001774:	bd90      	pop	{r4, r7, pc}

08001776 <BNO080_enableRotationVector>:

//Sends the packet to enable the rotation vector
void BNO080_enableRotationVector(uint16_t timeBetweenReports)
{
 8001776:	b580      	push	{r7, lr}
 8001778:	b082      	sub	sp, #8
 800177a:	af00      	add	r7, sp, #0
 800177c:	4603      	mov	r3, r0
 800177e:	80fb      	strh	r3, [r7, #6]
	BNO080_setFeatureCommand(SENSOR_REPORTID_ROTATION_VECTOR, timeBetweenReports, 0);
 8001780:	88fb      	ldrh	r3, [r7, #6]
 8001782:	2200      	movs	r2, #0
 8001784:	4619      	mov	r1, r3
 8001786:	2005      	movs	r0, #5
 8001788:	f000 f804 	bl	8001794 <BNO080_setFeatureCommand>
}
 800178c:	bf00      	nop
 800178e:	3708      	adds	r7, #8
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}

08001794 <BNO080_setFeatureCommand>:
}

//Given a sensor's report ID, this tells the BNO080 to begin reporting the values
//Also sets the specific config word. Useful for personal activity classifier
void BNO080_setFeatureCommand(uint8_t reportID, uint32_t microsBetweenReports, uint32_t specificConfig)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	4603      	mov	r3, r0
 800179c:	60b9      	str	r1, [r7, #8]
 800179e:	607a      	str	r2, [r7, #4]
 80017a0:	73fb      	strb	r3, [r7, #15]
	shtpData[0] = SHTP_REPORT_SET_FEATURE_COMMAND;	 //Set feature command. Reference page 55
 80017a2:	4b24      	ldr	r3, [pc, #144]	; (8001834 <BNO080_setFeatureCommand+0xa0>)
 80017a4:	22fd      	movs	r2, #253	; 0xfd
 80017a6:	701a      	strb	r2, [r3, #0]
	shtpData[1] = reportID;						 //Feature Report ID. 0x01 = Accelerometer, 0x05 = Rotation vector
 80017a8:	4a22      	ldr	r2, [pc, #136]	; (8001834 <BNO080_setFeatureCommand+0xa0>)
 80017aa:	7bfb      	ldrb	r3, [r7, #15]
 80017ac:	7053      	strb	r3, [r2, #1]
	shtpData[2] = 0;							 //Feature flags
 80017ae:	4b21      	ldr	r3, [pc, #132]	; (8001834 <BNO080_setFeatureCommand+0xa0>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	709a      	strb	r2, [r3, #2]
	shtpData[3] = 0;							 //Change sensitivity (LSB)
 80017b4:	4b1f      	ldr	r3, [pc, #124]	; (8001834 <BNO080_setFeatureCommand+0xa0>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	70da      	strb	r2, [r3, #3]
	shtpData[4] = 0;							 //Change sensitivity (MSB)
 80017ba:	4b1e      	ldr	r3, [pc, #120]	; (8001834 <BNO080_setFeatureCommand+0xa0>)
 80017bc:	2200      	movs	r2, #0
 80017be:	711a      	strb	r2, [r3, #4]
	shtpData[5] = (microsBetweenReports >> 0) & 0xFF;  //Report interval (LSB) in microseconds. 0x7A120 = 500ms
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	b2da      	uxtb	r2, r3
 80017c4:	4b1b      	ldr	r3, [pc, #108]	; (8001834 <BNO080_setFeatureCommand+0xa0>)
 80017c6:	715a      	strb	r2, [r3, #5]
	shtpData[6] = (microsBetweenReports >> 8) & 0xFF;  //Report interval
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	0a1b      	lsrs	r3, r3, #8
 80017cc:	b2da      	uxtb	r2, r3
 80017ce:	4b19      	ldr	r3, [pc, #100]	; (8001834 <BNO080_setFeatureCommand+0xa0>)
 80017d0:	719a      	strb	r2, [r3, #6]
	shtpData[7] = (microsBetweenReports >> 16) & 0xFF; //Report interval
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	0c1b      	lsrs	r3, r3, #16
 80017d6:	b2da      	uxtb	r2, r3
 80017d8:	4b16      	ldr	r3, [pc, #88]	; (8001834 <BNO080_setFeatureCommand+0xa0>)
 80017da:	71da      	strb	r2, [r3, #7]
	shtpData[8] = (microsBetweenReports >> 24) & 0xFF; //Report interval (MSB)
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	0e1b      	lsrs	r3, r3, #24
 80017e0:	b2da      	uxtb	r2, r3
 80017e2:	4b14      	ldr	r3, [pc, #80]	; (8001834 <BNO080_setFeatureCommand+0xa0>)
 80017e4:	721a      	strb	r2, [r3, #8]
	shtpData[9] = 0;							 //Batch Interval (LSB)
 80017e6:	4b13      	ldr	r3, [pc, #76]	; (8001834 <BNO080_setFeatureCommand+0xa0>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	725a      	strb	r2, [r3, #9]
	shtpData[10] = 0;							 //Batch Interval
 80017ec:	4b11      	ldr	r3, [pc, #68]	; (8001834 <BNO080_setFeatureCommand+0xa0>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	729a      	strb	r2, [r3, #10]
	shtpData[11] = 0;							 //Batch Interval
 80017f2:	4b10      	ldr	r3, [pc, #64]	; (8001834 <BNO080_setFeatureCommand+0xa0>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	72da      	strb	r2, [r3, #11]
	shtpData[12] = 0;							 //Batch Interval (MSB)
 80017f8:	4b0e      	ldr	r3, [pc, #56]	; (8001834 <BNO080_setFeatureCommand+0xa0>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	731a      	strb	r2, [r3, #12]
	shtpData[13] = (specificConfig >> 0) & 0xFF;	   	 //Sensor-specific config (LSB)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	b2da      	uxtb	r2, r3
 8001802:	4b0c      	ldr	r3, [pc, #48]	; (8001834 <BNO080_setFeatureCommand+0xa0>)
 8001804:	735a      	strb	r2, [r3, #13]
	shtpData[14] = (specificConfig >> 8) & 0xFF;	   	 //Sensor-specific config
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	0a1b      	lsrs	r3, r3, #8
 800180a:	b2da      	uxtb	r2, r3
 800180c:	4b09      	ldr	r3, [pc, #36]	; (8001834 <BNO080_setFeatureCommand+0xa0>)
 800180e:	739a      	strb	r2, [r3, #14]
	shtpData[15] = (specificConfig >> 16) & 0xFF;	 //Sensor-specific config
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	0c1b      	lsrs	r3, r3, #16
 8001814:	b2da      	uxtb	r2, r3
 8001816:	4b07      	ldr	r3, [pc, #28]	; (8001834 <BNO080_setFeatureCommand+0xa0>)
 8001818:	73da      	strb	r2, [r3, #15]
	shtpData[16] = (specificConfig >> 24) & 0xFF;	 //Sensor-specific config (MSB)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	0e1b      	lsrs	r3, r3, #24
 800181e:	b2da      	uxtb	r2, r3
 8001820:	4b04      	ldr	r3, [pc, #16]	; (8001834 <BNO080_setFeatureCommand+0xa0>)
 8001822:	741a      	strb	r2, [r3, #16]

	//Transmit packet on channel 2, 17 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 17);
 8001824:	2111      	movs	r1, #17
 8001826:	2002      	movs	r0, #2
 8001828:	f000 f89a 	bl	8001960 <BNO080_sendPacket>
}
 800182c:	bf00      	nop
 800182e:	3710      	adds	r7, #16
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	20000200 	.word	0x20000200

08001838 <BNO080_waitForSPI>:

//Blocking wait for BNO080 to assert (pull low) the INT pin
//indicating it's ready for comm. Can take more than 104ms
//after a hardware reset
int BNO080_waitForSPI(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
	for (uint32_t counter = 0; counter < 0xffffffff; counter++) //Don't got more than 255
 800183e:	2300      	movs	r3, #0
 8001840:	607b      	str	r3, [r7, #4]
 8001842:	e00b      	b.n	800185c <BNO080_waitForSPI+0x24>
	{
		if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 0)
 8001844:	490b      	ldr	r1, [pc, #44]	; (8001874 <BNO080_waitForSPI+0x3c>)
 8001846:	480c      	ldr	r0, [pc, #48]	; (8001878 <BNO080_waitForSPI+0x40>)
 8001848:	f7ff fc7f 	bl	800114a <LL_GPIO_IsInputPinSet>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d101      	bne.n	8001856 <BNO080_waitForSPI+0x1e>
		{
			//printf("\nData available\n");
			return (1);
 8001852:	2301      	movs	r3, #1
 8001854:	e00a      	b.n	800186c <BNO080_waitForSPI+0x34>
	for (uint32_t counter = 0; counter < 0xffffffff; counter++) //Don't got more than 255
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	3301      	adds	r3, #1
 800185a:	607b      	str	r3, [r7, #4]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001862:	d1ef      	bne.n	8001844 <BNO080_waitForSPI+0xc>
		}
		//printf("SPI Wait %d\n", counter);
	}
	printf("\nData not available\n");
 8001864:	4805      	ldr	r0, [pc, #20]	; (800187c <BNO080_waitForSPI+0x44>)
 8001866:	f002 fd89 	bl	800437c <puts>
	return (0);
 800186a:	2300      	movs	r3, #0
}
 800186c:	4618      	mov	r0, r3
 800186e:	3708      	adds	r7, #8
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	04200020 	.word	0x04200020
 8001878:	40010c00 	.word	0x40010c00
 800187c:	08007268 	.word	0x08007268

08001880 <BNO080_receivePacket>:


//Check to see if there is any new data available
//Read the contents of the incoming packet into the shtpData array
int BNO080_receivePacket(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
	uint8_t incoming;

	if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 1)
 8001886:	4931      	ldr	r1, [pc, #196]	; (800194c <BNO080_receivePacket+0xcc>)
 8001888:	4831      	ldr	r0, [pc, #196]	; (8001950 <BNO080_receivePacket+0xd0>)
 800188a:	f7ff fc5e 	bl	800114a <LL_GPIO_IsInputPinSet>
 800188e:	4603      	mov	r3, r0
 8001890:	2b01      	cmp	r3, #1
 8001892:	d101      	bne.n	8001898 <BNO080_receivePacket+0x18>
		return (0); //Data is not available
 8001894:	2300      	movs	r3, #0
 8001896:	e054      	b.n	8001942 <BNO080_receivePacket+0xc2>

	//Old way: if (BNO080_waitForSPI() == 0) return (0); //Something went wrong

	//Get first four bytes to find out how much data we need to read

	CHIP_SELECT(BNO080);
 8001898:	492e      	ldr	r1, [pc, #184]	; (8001954 <BNO080_receivePacket+0xd4>)
 800189a:	482d      	ldr	r0, [pc, #180]	; (8001950 <BNO080_receivePacket+0xd0>)
 800189c:	f7ff fc7a 	bl	8001194 <LL_GPIO_ResetOutputPin>

	//Get the first four bytes, aka the packet header
	uint8_t packetLSB = SPI2_SendByte(0);
 80018a0:	2000      	movs	r0, #0
 80018a2:	f7ff fd07 	bl	80012b4 <SPI2_SendByte>
 80018a6:	4603      	mov	r3, r0
 80018a8:	737b      	strb	r3, [r7, #13]
	uint8_t packetMSB = SPI2_SendByte(0);
 80018aa:	2000      	movs	r0, #0
 80018ac:	f7ff fd02 	bl	80012b4 <SPI2_SendByte>
 80018b0:	4603      	mov	r3, r0
 80018b2:	733b      	strb	r3, [r7, #12]
	uint8_t channelNumber = SPI2_SendByte(0);
 80018b4:	2000      	movs	r0, #0
 80018b6:	f7ff fcfd 	bl	80012b4 <SPI2_SendByte>
 80018ba:	4603      	mov	r3, r0
 80018bc:	72fb      	strb	r3, [r7, #11]
	uint8_t sequenceNumber = SPI2_SendByte(0); //Not sure if we need to store this or not
 80018be:	2000      	movs	r0, #0
 80018c0:	f7ff fcf8 	bl	80012b4 <SPI2_SendByte>
 80018c4:	4603      	mov	r3, r0
 80018c6:	72bb      	strb	r3, [r7, #10]

	//Store the header info
	shtpHeader[0] = packetLSB;
 80018c8:	4a23      	ldr	r2, [pc, #140]	; (8001958 <BNO080_receivePacket+0xd8>)
 80018ca:	7b7b      	ldrb	r3, [r7, #13]
 80018cc:	7013      	strb	r3, [r2, #0]
	shtpHeader[1] = packetMSB;
 80018ce:	4a22      	ldr	r2, [pc, #136]	; (8001958 <BNO080_receivePacket+0xd8>)
 80018d0:	7b3b      	ldrb	r3, [r7, #12]
 80018d2:	7053      	strb	r3, [r2, #1]
	shtpHeader[2] = channelNumber;
 80018d4:	4a20      	ldr	r2, [pc, #128]	; (8001958 <BNO080_receivePacket+0xd8>)
 80018d6:	7afb      	ldrb	r3, [r7, #11]
 80018d8:	7093      	strb	r3, [r2, #2]
	shtpHeader[3] = sequenceNumber;
 80018da:	4a1f      	ldr	r2, [pc, #124]	; (8001958 <BNO080_receivePacket+0xd8>)
 80018dc:	7abb      	ldrb	r3, [r7, #10]
 80018de:	70d3      	strb	r3, [r2, #3]

	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)packetMSB << 8 | packetLSB);
 80018e0:	7b3b      	ldrb	r3, [r7, #12]
 80018e2:	021b      	lsls	r3, r3, #8
 80018e4:	b21a      	sxth	r2, r3
 80018e6:	7b7b      	ldrb	r3, [r7, #13]
 80018e8:	b21b      	sxth	r3, r3
 80018ea:	4313      	orrs	r3, r2
 80018ec:	813b      	strh	r3, [r7, #8]
	dataLength &= 0x7fff; //Clear the MSbit.
 80018ee:	893b      	ldrh	r3, [r7, #8]
 80018f0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80018f4:	813b      	strh	r3, [r7, #8]
	//This bit indicates if this package is a continuation of the last. Ignore it for now.
	//TODO catch this as an error and exit
	if (dataLength == 0)
 80018f6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d101      	bne.n	8001902 <BNO080_receivePacket+0x82>
	{
		//Packet is empty
		return (0); //All done
 80018fe:	2300      	movs	r3, #0
 8001900:	e01f      	b.n	8001942 <BNO080_receivePacket+0xc2>
	}
	dataLength -= 4; //Remove the header bytes from the data count
 8001902:	893b      	ldrh	r3, [r7, #8]
 8001904:	3b04      	subs	r3, #4
 8001906:	b29b      	uxth	r3, r3
 8001908:	813b      	strh	r3, [r7, #8]

	//printf("length: %d\n", dataLength);

	//Read incoming data into the shtpData array
	for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
 800190a:	2300      	movs	r3, #0
 800190c:	81fb      	strh	r3, [r7, #14]
 800190e:	e00e      	b.n	800192e <BNO080_receivePacket+0xae>
	{
		incoming = SPI2_SendByte(0xFF);
 8001910:	20ff      	movs	r0, #255	; 0xff
 8001912:	f7ff fccf 	bl	80012b4 <SPI2_SendByte>
 8001916:	4603      	mov	r3, r0
 8001918:	71fb      	strb	r3, [r7, #7]
		//printf("%d ", incoming);
		if (dataSpot < MAX_PACKET_SIZE)	//BNO080 can respond with upto 270 bytes, avoid overflow
 800191a:	89fb      	ldrh	r3, [r7, #14]
 800191c:	2b7f      	cmp	r3, #127	; 0x7f
 800191e:	d803      	bhi.n	8001928 <BNO080_receivePacket+0xa8>
			shtpData[dataSpot] = incoming; //Store data into the shtpData array
 8001920:	89fb      	ldrh	r3, [r7, #14]
 8001922:	490e      	ldr	r1, [pc, #56]	; (800195c <BNO080_receivePacket+0xdc>)
 8001924:	79fa      	ldrb	r2, [r7, #7]
 8001926:	54ca      	strb	r2, [r1, r3]
	for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
 8001928:	89fb      	ldrh	r3, [r7, #14]
 800192a:	3301      	adds	r3, #1
 800192c:	81fb      	strh	r3, [r7, #14]
 800192e:	89fa      	ldrh	r2, [r7, #14]
 8001930:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001934:	429a      	cmp	r2, r3
 8001936:	dbeb      	blt.n	8001910 <BNO080_receivePacket+0x90>
	}
	//printf("\n");

	CHIP_DESELECT(BNO080); //Release BNO080
 8001938:	4906      	ldr	r1, [pc, #24]	; (8001954 <BNO080_receivePacket+0xd4>)
 800193a:	4805      	ldr	r0, [pc, #20]	; (8001950 <BNO080_receivePacket+0xd0>)
 800193c:	f7ff fc1b 	bl	8001176 <LL_GPIO_SetOutputPin>
	return (1); //We're done!
 8001940:	2301      	movs	r3, #1
}
 8001942:	4618      	mov	r0, r3
 8001944:	3710      	adds	r7, #16
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	04200020 	.word	0x04200020
 8001950:	40010c00 	.word	0x40010c00
 8001954:	04100010 	.word	0x04100010
 8001958:	200001fc 	.word	0x200001fc
 800195c:	20000200 	.word	0x20000200

08001960 <BNO080_sendPacket>:

//Given the data packet, send the header then the data
//Returns false if sensor does not ACK
//TODO - Arduino has a max 32 byte send. Break sending into multi packets if needed.
int BNO080_sendPacket(uint8_t channelNumber, uint8_t dataLength)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af00      	add	r7, sp, #0
 8001966:	4603      	mov	r3, r0
 8001968:	460a      	mov	r2, r1
 800196a:	71fb      	strb	r3, [r7, #7]
 800196c:	4613      	mov	r3, r2
 800196e:	71bb      	strb	r3, [r7, #6]
	uint8_t packetLength = dataLength + 4; //Add four bytes for the header
 8001970:	79bb      	ldrb	r3, [r7, #6]
 8001972:	3304      	adds	r3, #4
 8001974:	73bb      	strb	r3, [r7, #14]

	//Wait for BNO080 to indicate it is available for communication
	if (BNO080_waitForSPI() == 0)
 8001976:	f7ff ff5f 	bl	8001838 <BNO080_waitForSPI>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d101      	bne.n	8001984 <BNO080_sendPacket+0x24>
		return (0); //Data is not available
 8001980:	2300      	movs	r3, #0
 8001982:	e030      	b.n	80019e6 <BNO080_sendPacket+0x86>

	//BNO080 has max CLK of 3MHz, MSB first,
	//The BNO080 uses CPOL = 1 and CPHA = 1. This is mode3
	CHIP_SELECT(BNO080);
 8001984:	491a      	ldr	r1, [pc, #104]	; (80019f0 <BNO080_sendPacket+0x90>)
 8001986:	481b      	ldr	r0, [pc, #108]	; (80019f4 <BNO080_sendPacket+0x94>)
 8001988:	f7ff fc04 	bl	8001194 <LL_GPIO_ResetOutputPin>

	//Send the 4 byte packet header
	SPI2_SendByte(packetLength & 0xFF);			//Packet length LSB
 800198c:	7bbb      	ldrb	r3, [r7, #14]
 800198e:	4618      	mov	r0, r3
 8001990:	f7ff fc90 	bl	80012b4 <SPI2_SendByte>
	SPI2_SendByte(packetLength >> 8);				//Packet length MSB
 8001994:	7bbb      	ldrb	r3, [r7, #14]
 8001996:	121b      	asrs	r3, r3, #8
 8001998:	b2db      	uxtb	r3, r3
 800199a:	4618      	mov	r0, r3
 800199c:	f7ff fc8a 	bl	80012b4 <SPI2_SendByte>
	SPI2_SendByte(channelNumber);					//Channel number
 80019a0:	79fb      	ldrb	r3, [r7, #7]
 80019a2:	4618      	mov	r0, r3
 80019a4:	f7ff fc86 	bl	80012b4 <SPI2_SendByte>
	SPI2_SendByte(sequenceNumber[channelNumber]++); 	//Send the sequence number, increments with each packet sent, different counter for each channel
 80019a8:	79fb      	ldrb	r3, [r7, #7]
 80019aa:	4a13      	ldr	r2, [pc, #76]	; (80019f8 <BNO080_sendPacket+0x98>)
 80019ac:	5cd2      	ldrb	r2, [r2, r3]
 80019ae:	1c51      	adds	r1, r2, #1
 80019b0:	b2c8      	uxtb	r0, r1
 80019b2:	4911      	ldr	r1, [pc, #68]	; (80019f8 <BNO080_sendPacket+0x98>)
 80019b4:	54c8      	strb	r0, [r1, r3]
 80019b6:	4610      	mov	r0, r2
 80019b8:	f7ff fc7c 	bl	80012b4 <SPI2_SendByte>

	//Send the user's data packet
	for (uint8_t i = 0; i < dataLength; i++)
 80019bc:	2300      	movs	r3, #0
 80019be:	73fb      	strb	r3, [r7, #15]
 80019c0:	e008      	b.n	80019d4 <BNO080_sendPacket+0x74>
	{
		SPI2_SendByte(shtpData[i]);
 80019c2:	7bfb      	ldrb	r3, [r7, #15]
 80019c4:	4a0d      	ldr	r2, [pc, #52]	; (80019fc <BNO080_sendPacket+0x9c>)
 80019c6:	5cd3      	ldrb	r3, [r2, r3]
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7ff fc73 	bl	80012b4 <SPI2_SendByte>
	for (uint8_t i = 0; i < dataLength; i++)
 80019ce:	7bfb      	ldrb	r3, [r7, #15]
 80019d0:	3301      	adds	r3, #1
 80019d2:	73fb      	strb	r3, [r7, #15]
 80019d4:	7bfa      	ldrb	r2, [r7, #15]
 80019d6:	79bb      	ldrb	r3, [r7, #6]
 80019d8:	429a      	cmp	r2, r3
 80019da:	d3f2      	bcc.n	80019c2 <BNO080_sendPacket+0x62>
	}

	CHIP_DESELECT(BNO080);
 80019dc:	4904      	ldr	r1, [pc, #16]	; (80019f0 <BNO080_sendPacket+0x90>)
 80019de:	4805      	ldr	r0, [pc, #20]	; (80019f4 <BNO080_sendPacket+0x94>)
 80019e0:	f7ff fbc9 	bl	8001176 <LL_GPIO_SetOutputPin>

	return (1);
 80019e4:	2301      	movs	r3, #1
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3710      	adds	r7, #16
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	04100010 	.word	0x04100010
 80019f4:	40010c00 	.word	0x40010c00
 80019f8:	20000280 	.word	0x20000280
 80019fc:	20000200 	.word	0x20000200

08001a00 <Quaternion_Update>:
float BNO080_Roll;
float BNO080_Pitch;
float BNO080_Yaw;

void Quaternion_Update(float* q)
{
 8001a00:	b5b0      	push	{r4, r5, r7, lr}
 8001a02:	b088      	sub	sp, #32
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
	float q1, q2, q3, q4;
	float norm;

	norm = invSqrt(q[0]*q[0] + q[1]*q[1] + q[2]*q[2] + q[3]*q[3]);    // normalize quaternion
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4619      	mov	r1, r3
 8001a12:	4610      	mov	r0, r2
 8001a14:	f7ff f946 	bl	8000ca4 <__aeabi_fmul>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	461c      	mov	r4, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	3304      	adds	r3, #4
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	3304      	adds	r3, #4
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4619      	mov	r1, r3
 8001a2a:	4610      	mov	r0, r2
 8001a2c:	f7ff f93a 	bl	8000ca4 <__aeabi_fmul>
 8001a30:	4603      	mov	r3, r0
 8001a32:	4619      	mov	r1, r3
 8001a34:	4620      	mov	r0, r4
 8001a36:	f7ff f82d 	bl	8000a94 <__addsf3>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	461c      	mov	r4, r3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	3308      	adds	r3, #8
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	3308      	adds	r3, #8
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	4610      	mov	r0, r2
 8001a4e:	f7ff f929 	bl	8000ca4 <__aeabi_fmul>
 8001a52:	4603      	mov	r3, r0
 8001a54:	4619      	mov	r1, r3
 8001a56:	4620      	mov	r0, r4
 8001a58:	f7ff f81c 	bl	8000a94 <__addsf3>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	461c      	mov	r4, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	330c      	adds	r3, #12
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	330c      	adds	r3, #12
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	4610      	mov	r0, r2
 8001a70:	f7ff f918 	bl	8000ca4 <__aeabi_fmul>
 8001a74:	4603      	mov	r3, r0
 8001a76:	4619      	mov	r1, r3
 8001a78:	4620      	mov	r0, r4
 8001a7a:	f7ff f80b 	bl	8000a94 <__addsf3>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	4618      	mov	r0, r3
 8001a82:	f000 f931 	bl	8001ce8 <invSqrt>
 8001a86:	61f8      	str	r0, [r7, #28]
	
	q1 = q[0] * norm; //x
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	69f8      	ldr	r0, [r7, #28]
 8001a90:	f7ff f908 	bl	8000ca4 <__aeabi_fmul>
 8001a94:	4603      	mov	r3, r0
 8001a96:	61bb      	str	r3, [r7, #24]
	q2 = q[1] * norm; //y
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	3304      	adds	r3, #4
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	69f8      	ldr	r0, [r7, #28]
 8001aa2:	f7ff f8ff 	bl	8000ca4 <__aeabi_fmul>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	617b      	str	r3, [r7, #20]
	q3 = q[2] * norm; //z
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	3308      	adds	r3, #8
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	69f8      	ldr	r0, [r7, #28]
 8001ab4:	f7ff f8f6 	bl	8000ca4 <__aeabi_fmul>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	613b      	str	r3, [r7, #16]
	q4 = q[3] * norm; //w
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	330c      	adds	r3, #12
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	69f8      	ldr	r0, [r7, #28]
 8001ac6:	f7ff f8ed 	bl	8000ca4 <__aeabi_fmul>
 8001aca:	4603      	mov	r3, r0
 8001acc:	60fb      	str	r3, [r7, #12]

	BNO080_Pitch = atan2f(2.0f * (q2*q3 + q1*q4), q1*q1 + q2*q2 - q3*q3 - q4*q4);
 8001ace:	6939      	ldr	r1, [r7, #16]
 8001ad0:	6978      	ldr	r0, [r7, #20]
 8001ad2:	f7ff f8e7 	bl	8000ca4 <__aeabi_fmul>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	461c      	mov	r4, r3
 8001ada:	68f9      	ldr	r1, [r7, #12]
 8001adc:	69b8      	ldr	r0, [r7, #24]
 8001ade:	f7ff f8e1 	bl	8000ca4 <__aeabi_fmul>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	4620      	mov	r0, r4
 8001ae8:	f7fe ffd4 	bl	8000a94 <__addsf3>
 8001aec:	4603      	mov	r3, r0
 8001aee:	4619      	mov	r1, r3
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7fe ffcf 	bl	8000a94 <__addsf3>
 8001af6:	4603      	mov	r3, r0
 8001af8:	461c      	mov	r4, r3
 8001afa:	69b9      	ldr	r1, [r7, #24]
 8001afc:	69b8      	ldr	r0, [r7, #24]
 8001afe:	f7ff f8d1 	bl	8000ca4 <__aeabi_fmul>
 8001b02:	4603      	mov	r3, r0
 8001b04:	461d      	mov	r5, r3
 8001b06:	6979      	ldr	r1, [r7, #20]
 8001b08:	6978      	ldr	r0, [r7, #20]
 8001b0a:	f7ff f8cb 	bl	8000ca4 <__aeabi_fmul>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	4619      	mov	r1, r3
 8001b12:	4628      	mov	r0, r5
 8001b14:	f7fe ffbe 	bl	8000a94 <__addsf3>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	461d      	mov	r5, r3
 8001b1c:	6939      	ldr	r1, [r7, #16]
 8001b1e:	6938      	ldr	r0, [r7, #16]
 8001b20:	f7ff f8c0 	bl	8000ca4 <__aeabi_fmul>
 8001b24:	4603      	mov	r3, r0
 8001b26:	4619      	mov	r1, r3
 8001b28:	4628      	mov	r0, r5
 8001b2a:	f7fe ffb1 	bl	8000a90 <__aeabi_fsub>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	461d      	mov	r5, r3
 8001b32:	68f9      	ldr	r1, [r7, #12]
 8001b34:	68f8      	ldr	r0, [r7, #12]
 8001b36:	f7ff f8b5 	bl	8000ca4 <__aeabi_fmul>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	4628      	mov	r0, r5
 8001b40:	f7fe ffa6 	bl	8000a90 <__aeabi_fsub>
 8001b44:	4603      	mov	r3, r0
 8001b46:	4619      	mov	r1, r3
 8001b48:	4620      	mov	r0, r4
 8001b4a:	f004 fbc3 	bl	80062d4 <atan2f>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	4a5f      	ldr	r2, [pc, #380]	; (8001cd0 <Quaternion_Update+0x2d0>)
 8001b52:	6013      	str	r3, [r2, #0]
	BNO080_Roll  = -asinf(2.0f * (q2*q4 - q1*q3));
 8001b54:	68f9      	ldr	r1, [r7, #12]
 8001b56:	6978      	ldr	r0, [r7, #20]
 8001b58:	f7ff f8a4 	bl	8000ca4 <__aeabi_fmul>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	461c      	mov	r4, r3
 8001b60:	6939      	ldr	r1, [r7, #16]
 8001b62:	69b8      	ldr	r0, [r7, #24]
 8001b64:	f7ff f89e 	bl	8000ca4 <__aeabi_fmul>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	4620      	mov	r0, r4
 8001b6e:	f7fe ff8f 	bl	8000a90 <__aeabi_fsub>
 8001b72:	4603      	mov	r3, r0
 8001b74:	4619      	mov	r1, r3
 8001b76:	4618      	mov	r0, r3
 8001b78:	f7fe ff8c 	bl	8000a94 <__addsf3>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f004 fb88 	bl	8006294 <asinf>
 8001b84:	4603      	mov	r3, r0
 8001b86:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001b8a:	4a52      	ldr	r2, [pc, #328]	; (8001cd4 <Quaternion_Update+0x2d4>)
 8001b8c:	6013      	str	r3, [r2, #0]
	BNO080_Yaw   = atan2f(2.0f * (q1*q2 + q3*q4), q1*q1 - q2*q2 - q3*q3 + q4*q4);
 8001b8e:	6979      	ldr	r1, [r7, #20]
 8001b90:	69b8      	ldr	r0, [r7, #24]
 8001b92:	f7ff f887 	bl	8000ca4 <__aeabi_fmul>
 8001b96:	4603      	mov	r3, r0
 8001b98:	461c      	mov	r4, r3
 8001b9a:	68f9      	ldr	r1, [r7, #12]
 8001b9c:	6938      	ldr	r0, [r7, #16]
 8001b9e:	f7ff f881 	bl	8000ca4 <__aeabi_fmul>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	4620      	mov	r0, r4
 8001ba8:	f7fe ff74 	bl	8000a94 <__addsf3>
 8001bac:	4603      	mov	r3, r0
 8001bae:	4619      	mov	r1, r3
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7fe ff6f 	bl	8000a94 <__addsf3>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	461c      	mov	r4, r3
 8001bba:	69b9      	ldr	r1, [r7, #24]
 8001bbc:	69b8      	ldr	r0, [r7, #24]
 8001bbe:	f7ff f871 	bl	8000ca4 <__aeabi_fmul>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	461d      	mov	r5, r3
 8001bc6:	6979      	ldr	r1, [r7, #20]
 8001bc8:	6978      	ldr	r0, [r7, #20]
 8001bca:	f7ff f86b 	bl	8000ca4 <__aeabi_fmul>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	4628      	mov	r0, r5
 8001bd4:	f7fe ff5c 	bl	8000a90 <__aeabi_fsub>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	461d      	mov	r5, r3
 8001bdc:	6939      	ldr	r1, [r7, #16]
 8001bde:	6938      	ldr	r0, [r7, #16]
 8001be0:	f7ff f860 	bl	8000ca4 <__aeabi_fmul>
 8001be4:	4603      	mov	r3, r0
 8001be6:	4619      	mov	r1, r3
 8001be8:	4628      	mov	r0, r5
 8001bea:	f7fe ff51 	bl	8000a90 <__aeabi_fsub>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	461d      	mov	r5, r3
 8001bf2:	68f9      	ldr	r1, [r7, #12]
 8001bf4:	68f8      	ldr	r0, [r7, #12]
 8001bf6:	f7ff f855 	bl	8000ca4 <__aeabi_fmul>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	4628      	mov	r0, r5
 8001c00:	f7fe ff48 	bl	8000a94 <__addsf3>
 8001c04:	4603      	mov	r3, r0
 8001c06:	4619      	mov	r1, r3
 8001c08:	4620      	mov	r0, r4
 8001c0a:	f004 fb63 	bl	80062d4 <atan2f>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	4a31      	ldr	r2, [pc, #196]	; (8001cd8 <Quaternion_Update+0x2d8>)
 8001c12:	6013      	str	r3, [r2, #0]

	BNO080_Pitch *= _180_DIV_PI;
 8001c14:	4b2e      	ldr	r3, [pc, #184]	; (8001cd0 <Quaternion_Update+0x2d0>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4930      	ldr	r1, [pc, #192]	; (8001cdc <Quaternion_Update+0x2dc>)
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f7ff f842 	bl	8000ca4 <__aeabi_fmul>
 8001c20:	4603      	mov	r3, r0
 8001c22:	461a      	mov	r2, r3
 8001c24:	4b2a      	ldr	r3, [pc, #168]	; (8001cd0 <Quaternion_Update+0x2d0>)
 8001c26:	601a      	str	r2, [r3, #0]
	BNO080_Roll  *= _180_DIV_PI;
 8001c28:	4b2a      	ldr	r3, [pc, #168]	; (8001cd4 <Quaternion_Update+0x2d4>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	492b      	ldr	r1, [pc, #172]	; (8001cdc <Quaternion_Update+0x2dc>)
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f7ff f838 	bl	8000ca4 <__aeabi_fmul>
 8001c34:	4603      	mov	r3, r0
 8001c36:	461a      	mov	r2, r3
 8001c38:	4b26      	ldr	r3, [pc, #152]	; (8001cd4 <Quaternion_Update+0x2d4>)
 8001c3a:	601a      	str	r2, [r3, #0]
	BNO080_Yaw   *= _180_DIV_PI;
 8001c3c:	4b26      	ldr	r3, [pc, #152]	; (8001cd8 <Quaternion_Update+0x2d8>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4926      	ldr	r1, [pc, #152]	; (8001cdc <Quaternion_Update+0x2dc>)
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7ff f82e 	bl	8000ca4 <__aeabi_fmul>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	4b22      	ldr	r3, [pc, #136]	; (8001cd8 <Quaternion_Update+0x2d8>)
 8001c4e:	601a      	str	r2, [r3, #0]
	
	if(BNO080_Yaw>=0)
 8001c50:	4b21      	ldr	r3, [pc, #132]	; (8001cd8 <Quaternion_Update+0x2d8>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f04f 0100 	mov.w	r1, #0
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7ff f9d5 	bl	8001008 <__aeabi_fcmpge>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d00a      	beq.n	8001c7a <Quaternion_Update+0x27a>
		BNO080_Yaw = 360.f - BNO080_Yaw;
 8001c64:	4b1c      	ldr	r3, [pc, #112]	; (8001cd8 <Quaternion_Update+0x2d8>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4619      	mov	r1, r3
 8001c6a:	481d      	ldr	r0, [pc, #116]	; (8001ce0 <Quaternion_Update+0x2e0>)
 8001c6c:	f7fe ff10 	bl	8000a90 <__aeabi_fsub>
 8001c70:	4603      	mov	r3, r0
 8001c72:	461a      	mov	r2, r3
 8001c74:	4b18      	ldr	r3, [pc, #96]	; (8001cd8 <Quaternion_Update+0x2d8>)
 8001c76:	601a      	str	r2, [r3, #0]
 8001c78:	e005      	b.n	8001c86 <Quaternion_Update+0x286>
	else	
		BNO080_Yaw = -BNO080_Yaw;
 8001c7a:	4b17      	ldr	r3, [pc, #92]	; (8001cd8 <Quaternion_Update+0x2d8>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001c82:	4a15      	ldr	r2, [pc, #84]	; (8001cd8 <Quaternion_Update+0x2d8>)
 8001c84:	6013      	str	r3, [r2, #0]
	
	
	if(BNO080_Pitch>=0)
 8001c86:	4b12      	ldr	r3, [pc, #72]	; (8001cd0 <Quaternion_Update+0x2d0>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f04f 0100 	mov.w	r1, #0
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7ff f9ba 	bl	8001008 <__aeabi_fcmpge>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d00a      	beq.n	8001cb0 <Quaternion_Update+0x2b0>
		BNO080_Pitch = 180.f - BNO080_Pitch;
 8001c9a:	4b0d      	ldr	r3, [pc, #52]	; (8001cd0 <Quaternion_Update+0x2d0>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	4810      	ldr	r0, [pc, #64]	; (8001ce4 <Quaternion_Update+0x2e4>)
 8001ca2:	f7fe fef5 	bl	8000a90 <__aeabi_fsub>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	461a      	mov	r2, r3
 8001caa:	4b09      	ldr	r3, [pc, #36]	; (8001cd0 <Quaternion_Update+0x2d0>)
 8001cac:	601a      	str	r2, [r3, #0]
	else
		BNO080_Pitch = -(BNO080_Pitch + 180.f);
}
 8001cae:	e00a      	b.n	8001cc6 <Quaternion_Update+0x2c6>
		BNO080_Pitch = -(BNO080_Pitch + 180.f);
 8001cb0:	4b07      	ldr	r3, [pc, #28]	; (8001cd0 <Quaternion_Update+0x2d0>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	490b      	ldr	r1, [pc, #44]	; (8001ce4 <Quaternion_Update+0x2e4>)
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f7fe feec 	bl	8000a94 <__addsf3>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001cc2:	4a03      	ldr	r2, [pc, #12]	; (8001cd0 <Quaternion_Update+0x2d0>)
 8001cc4:	6013      	str	r3, [r2, #0]
}
 8001cc6:	bf00      	nop
 8001cc8:	3720      	adds	r7, #32
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bdb0      	pop	{r4, r5, r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	200002c8 	.word	0x200002c8
 8001cd4:	200002c4 	.word	0x200002c4
 8001cd8:	200002cc 	.word	0x200002cc
 8001cdc:	42652ee1 	.word	0x42652ee1
 8001ce0:	43b40000 	.word	0x43b40000
 8001ce4:	43340000 	.word	0x43340000

08001ce8 <invSqrt>:

// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float invSqrt(float x)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b086      	sub	sp, #24
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
	float halfx = 0.5f * x;
 8001cf0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	f7fe ffd5 	bl	8000ca4 <__aeabi_fmul>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	617b      	str	r3, [r7, #20]
	float y = x;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 8001d02:	f107 0310 	add.w	r3, r7, #16
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	105a      	asrs	r2, r3, #1
 8001d0e:	4b13      	ldr	r3, [pc, #76]	; (8001d5c <invSqrt+0x74>)
 8001d10:	1a9b      	subs	r3, r3, r2
 8001d12:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 8001d14:	f107 030c 	add.w	r3, r7, #12
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	6979      	ldr	r1, [r7, #20]
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7fe ffbf 	bl	8000ca4 <__aeabi_fmul>
 8001d26:	4603      	mov	r3, r0
 8001d28:	461a      	mov	r2, r3
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	4610      	mov	r0, r2
 8001d30:	f7fe ffb8 	bl	8000ca4 <__aeabi_fmul>
 8001d34:	4603      	mov	r3, r0
 8001d36:	4619      	mov	r1, r3
 8001d38:	f04f 507f 	mov.w	r0, #1069547520	; 0x3fc00000
 8001d3c:	f7fe fea8 	bl	8000a90 <__aeabi_fsub>
 8001d40:	4603      	mov	r3, r0
 8001d42:	461a      	mov	r2, r3
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	4619      	mov	r1, r3
 8001d48:	4610      	mov	r0, r2
 8001d4a:	f7fe ffab 	bl	8000ca4 <__aeabi_fmul>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	613b      	str	r3, [r7, #16]
	return y;
 8001d52:	693b      	ldr	r3, [r7, #16]
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3718      	adds	r7, #24
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	5f3759df 	.word	0x5f3759df

08001d60 <LL_GPIO_ResetOutputPin>:
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	0a1b      	lsrs	r3, r3, #8
 8001d6e:	b29a      	uxth	r2, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	615a      	str	r2, [r3, #20]
}
 8001d74:	bf00      	nop
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bc80      	pop	{r7}
 8001d7c:	4770      	bx	lr
	...

08001d80 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b085      	sub	sp, #20
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001d88:	4b08      	ldr	r3, [pc, #32]	; (8001dac <LL_APB2_GRP1_EnableClock+0x2c>)
 8001d8a:	699a      	ldr	r2, [r3, #24]
 8001d8c:	4907      	ldr	r1, [pc, #28]	; (8001dac <LL_APB2_GRP1_EnableClock+0x2c>)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4313      	orrs	r3, r2
 8001d92:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001d94:	4b05      	ldr	r3, [pc, #20]	; (8001dac <LL_APB2_GRP1_EnableClock+0x2c>)
 8001d96:	699a      	ldr	r2, [r3, #24]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
}
 8001da0:	bf00      	nop
 8001da2:	3714      	adds	r7, #20
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bc80      	pop	{r7}
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	40021000 	.word	0x40021000

08001db0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001db0:	b5b0      	push	{r4, r5, r7, lr}
 8001db2:	b086      	sub	sp, #24
 8001db4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001db6:	f000 fb01 	bl	80023bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001dba:	f000 f859 	bl	8001e70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001dbe:	f000 f91b 	bl	8001ff8 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001dc2:	f000 f89b 	bl	8001efc <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8001dc6:	f000 f8ed 	bl	8001fa4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  BNO080_Initialization();
 8001dca:	f7ff f9f3 	bl	80011b4 <BNO080_Initialization>
  BNO080_enableRotationVector(2500);
 8001dce:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8001dd2:	f7ff fcd0 	bl	8001776 <BNO080_enableRotationVector>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(BNO080_dataAvailable() == 1)
 8001dd6:	f7ff fa8f 	bl	80012f8 <BNO080_dataAvailable>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d1fa      	bne.n	8001dd6 <main+0x26>
	  {
		  q[0] = BNO080_getQuatI();
 8001de0:	f7ff fc42 	bl	8001668 <BNO080_getQuatI>
 8001de4:	4603      	mov	r3, r0
 8001de6:	607b      	str	r3, [r7, #4]
		  q[1] = BNO080_getQuatJ();
 8001de8:	f7ff fc52 	bl	8001690 <BNO080_getQuatJ>
 8001dec:	4603      	mov	r3, r0
 8001dee:	60bb      	str	r3, [r7, #8]
		  q[2] = BNO080_getQuatK();
 8001df0:	f7ff fc62 	bl	80016b8 <BNO080_getQuatK>
 8001df4:	4603      	mov	r3, r0
 8001df6:	60fb      	str	r3, [r7, #12]
		  q[3] = BNO080_getQuatReal();
 8001df8:	f7ff fc72 	bl	80016e0 <BNO080_getQuatReal>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	613b      	str	r3, [r7, #16]
		  quatRadianAccuracy = BNO080_getQuatRadianAccuracy();
 8001e00:	f7ff fc82 	bl	8001708 <BNO080_getQuatRadianAccuracy>
 8001e04:	6178      	str	r0, [r7, #20]

		  Quaternion_Update(&q[0]);
 8001e06:	1d3b      	adds	r3, r7, #4
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7ff fdf9 	bl	8001a00 <Quaternion_Update>

		  printf("%d,%d,%d\n", (int)(BNO080_Roll*100), (int)(BNO080_Pitch*100), (int)(BNO080_Yaw*100)); //print roll, pitch, yaw in degree
 8001e0e:	4b13      	ldr	r3, [pc, #76]	; (8001e5c <main+0xac>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4913      	ldr	r1, [pc, #76]	; (8001e60 <main+0xb0>)
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7fe ff45 	bl	8000ca4 <__aeabi_fmul>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7ff f91d 	bl	800105c <__aeabi_f2iz>
 8001e22:	4604      	mov	r4, r0
 8001e24:	4b0f      	ldr	r3, [pc, #60]	; (8001e64 <main+0xb4>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	490d      	ldr	r1, [pc, #52]	; (8001e60 <main+0xb0>)
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f7fe ff3a 	bl	8000ca4 <__aeabi_fmul>
 8001e30:	4603      	mov	r3, r0
 8001e32:	4618      	mov	r0, r3
 8001e34:	f7ff f912 	bl	800105c <__aeabi_f2iz>
 8001e38:	4605      	mov	r5, r0
 8001e3a:	4b0b      	ldr	r3, [pc, #44]	; (8001e68 <main+0xb8>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4908      	ldr	r1, [pc, #32]	; (8001e60 <main+0xb0>)
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7fe ff2f 	bl	8000ca4 <__aeabi_fmul>
 8001e46:	4603      	mov	r3, r0
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f7ff f907 	bl	800105c <__aeabi_f2iz>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	462a      	mov	r2, r5
 8001e52:	4621      	mov	r1, r4
 8001e54:	4805      	ldr	r0, [pc, #20]	; (8001e6c <main+0xbc>)
 8001e56:	f002 fa2b 	bl	80042b0 <iprintf>
	  if(BNO080_dataAvailable() == 1)
 8001e5a:	e7bc      	b.n	8001dd6 <main+0x26>
 8001e5c:	200002c4 	.word	0x200002c4
 8001e60:	42c80000 	.word	0x42c80000
 8001e64:	200002c8 	.word	0x200002c8
 8001e68:	200002cc 	.word	0x200002cc
 8001e6c:	0800727c 	.word	0x0800727c

08001e70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b090      	sub	sp, #64	; 0x40
 8001e74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e76:	f107 0318 	add.w	r3, r7, #24
 8001e7a:	2228      	movs	r2, #40	; 0x28
 8001e7c:	2100      	movs	r1, #0
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f002 fb5c 	bl	800453c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e84:	1d3b      	adds	r3, r7, #4
 8001e86:	2200      	movs	r2, #0
 8001e88:	601a      	str	r2, [r3, #0]
 8001e8a:	605a      	str	r2, [r3, #4]
 8001e8c:	609a      	str	r2, [r3, #8]
 8001e8e:	60da      	str	r2, [r3, #12]
 8001e90:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e92:	2301      	movs	r3, #1
 8001e94:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e96:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e9a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ea8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001eac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001eae:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001eb4:	f107 0318 	add.w	r3, r7, #24
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f000 fd6d 	bl	8002998 <HAL_RCC_OscConfig>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d001      	beq.n	8001ec8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001ec4:	f000 f8e4 	bl	8002090 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ec8:	230f      	movs	r3, #15
 8001eca:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ecc:	2302      	movs	r3, #2
 8001ece:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ed4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ed8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001eda:	2300      	movs	r3, #0
 8001edc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ede:	1d3b      	adds	r3, r7, #4
 8001ee0:	2102      	movs	r1, #2
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f000 ffda 	bl	8002e9c <HAL_RCC_ClockConfig>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d001      	beq.n	8001ef2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001eee:	f000 f8cf 	bl	8002090 <Error_Handler>
  }
}
 8001ef2:	bf00      	nop
 8001ef4:	3740      	adds	r7, #64	; 0x40
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
	...

08001efc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b090      	sub	sp, #64	; 0x40
 8001f00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001f02:	f107 0318 	add.w	r3, r7, #24
 8001f06:	2228      	movs	r2, #40	; 0x28
 8001f08:	2100      	movs	r1, #0
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f002 fb16 	bl	800453c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f10:	1d3b      	adds	r3, r7, #4
 8001f12:	2200      	movs	r2, #0
 8001f14:	601a      	str	r2, [r3, #0]
 8001f16:	605a      	str	r2, [r3, #4]
 8001f18:	609a      	str	r2, [r3, #8]
 8001f1a:	60da      	str	r2, [r3, #12]
 8001f1c:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8001f1e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001f22:	f7ff ff2d 	bl	8001d80 <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8001f26:	2004      	movs	r0, #4
 8001f28:	f7ff ff2a 	bl	8001d80 <LL_APB2_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_7;
 8001f2c:	f24a 03a0 	movw	r3, #41120	; 0xa0a0
 8001f30:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001f32:	2309      	movs	r3, #9
 8001f34:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001f36:	2303      	movs	r3, #3
 8001f38:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f3e:	1d3b      	adds	r3, r7, #4
 8001f40:	4619      	mov	r1, r3
 8001f42:	4816      	ldr	r0, [pc, #88]	; (8001f9c <MX_SPI1_Init+0xa0>)
 8001f44:	f001 fbc0 	bl	80036c8 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8001f48:	f244 0340 	movw	r3, #16448	; 0x4040
 8001f4c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8001f4e:	2304      	movs	r3, #4
 8001f50:	60bb      	str	r3, [r7, #8]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f52:	1d3b      	adds	r3, r7, #4
 8001f54:	4619      	mov	r1, r3
 8001f56:	4811      	ldr	r0, [pc, #68]	; (8001f9c <MX_SPI1_Init+0xa0>)
 8001f58:	f001 fbb6 	bl	80036c8 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001f60:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001f64:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001f66:	2300      	movs	r3, #0
 8001f68:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8001f72:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f76:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV32;
 8001f78:	2320      	movs	r3, #32
 8001f7a:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001f80:	2300      	movs	r3, #0
 8001f82:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 8001f84:	230a      	movs	r3, #10
 8001f86:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8001f88:	f107 0318 	add.w	r3, r7, #24
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	4804      	ldr	r0, [pc, #16]	; (8001fa0 <MX_SPI1_Init+0xa4>)
 8001f90:	f001 fc21 	bl	80037d6 <LL_SPI_Init>
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001f94:	bf00      	nop
 8001f96:	3740      	adds	r7, #64	; 0x40
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	40010800 	.word	0x40010800
 8001fa0:	40013000 	.word	0x40013000

08001fa4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001fa8:	4b11      	ldr	r3, [pc, #68]	; (8001ff0 <MX_USART2_UART_Init+0x4c>)
 8001faa:	4a12      	ldr	r2, [pc, #72]	; (8001ff4 <MX_USART2_UART_Init+0x50>)
 8001fac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001fae:	4b10      	ldr	r3, [pc, #64]	; (8001ff0 <MX_USART2_UART_Init+0x4c>)
 8001fb0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fb4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001fb6:	4b0e      	ldr	r3, [pc, #56]	; (8001ff0 <MX_USART2_UART_Init+0x4c>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001fbc:	4b0c      	ldr	r3, [pc, #48]	; (8001ff0 <MX_USART2_UART_Init+0x4c>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001fc2:	4b0b      	ldr	r3, [pc, #44]	; (8001ff0 <MX_USART2_UART_Init+0x4c>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001fc8:	4b09      	ldr	r3, [pc, #36]	; (8001ff0 <MX_USART2_UART_Init+0x4c>)
 8001fca:	220c      	movs	r2, #12
 8001fcc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fce:	4b08      	ldr	r3, [pc, #32]	; (8001ff0 <MX_USART2_UART_Init+0x4c>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fd4:	4b06      	ldr	r3, [pc, #24]	; (8001ff0 <MX_USART2_UART_Init+0x4c>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001fda:	4805      	ldr	r0, [pc, #20]	; (8001ff0 <MX_USART2_UART_Init+0x4c>)
 8001fdc:	f001 f8ec 	bl	80031b8 <HAL_UART_Init>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d001      	beq.n	8001fea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001fe6:	f000 f853 	bl	8002090 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001fea:	bf00      	nop
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	200002d0 	.word	0x200002d0
 8001ff4:	40004400 	.word	0x40004400

08001ff8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b086      	sub	sp, #24
 8001ffc:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ffe:	1d3b      	adds	r3, r7, #4
 8002000:	2200      	movs	r2, #0
 8002002:	601a      	str	r2, [r3, #0]
 8002004:	605a      	str	r2, [r3, #4]
 8002006:	609a      	str	r2, [r3, #8]
 8002008:	60da      	str	r2, [r3, #12]
 800200a:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOD);
 800200c:	2020      	movs	r0, #32
 800200e:	f7ff feb7 	bl	8001d80 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8002012:	2004      	movs	r0, #4
 8002014:	f7ff feb4 	bl	8001d80 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8002018:	2008      	movs	r0, #8
 800201a:	f7ff feb1 	bl	8001d80 <LL_APB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, CS_Pin|PS0_Pin|RST_Pin);
 800201e:	4910      	ldr	r1, [pc, #64]	; (8002060 <MX_GPIO_Init+0x68>)
 8002020:	4810      	ldr	r0, [pc, #64]	; (8002064 <MX_GPIO_Init+0x6c>)
 8002022:	f7ff fe9d 	bl	8001d60 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = CS_Pin|PS0_Pin|RST_Pin;
 8002026:	4b0e      	ldr	r3, [pc, #56]	; (8002060 <MX_GPIO_Init+0x68>)
 8002028:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800202a:	2301      	movs	r3, #1
 800202c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800202e:	2303      	movs	r3, #3
 8002030:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002032:	2300      	movs	r3, #0
 8002034:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002036:	1d3b      	adds	r3, r7, #4
 8002038:	4619      	mov	r1, r3
 800203a:	480a      	ldr	r0, [pc, #40]	; (8002064 <MX_GPIO_Init+0x6c>)
 800203c:	f001 fb44 	bl	80036c8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = INT_Pin;
 8002040:	4b09      	ldr	r3, [pc, #36]	; (8002068 <MX_GPIO_Init+0x70>)
 8002042:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8002044:	2308      	movs	r3, #8
 8002046:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8002048:	2301      	movs	r3, #1
 800204a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(INT_GPIO_Port, &GPIO_InitStruct);
 800204c:	1d3b      	adds	r3, r7, #4
 800204e:	4619      	mov	r1, r3
 8002050:	4804      	ldr	r0, [pc, #16]	; (8002064 <MX_GPIO_Init+0x6c>)
 8002052:	f001 fb39 	bl	80036c8 <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002056:	bf00      	nop
 8002058:	3718      	adds	r7, #24
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	04d000d0 	.word	0x04d000d0
 8002064:	40010c00 	.word	0x40010c00
 8002068:	04200020 	.word	0x04200020

0800206c <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8002074:	1d39      	adds	r1, r7, #4
 8002076:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800207a:	2201      	movs	r2, #1
 800207c:	4803      	ldr	r0, [pc, #12]	; (800208c <__io_putchar+0x20>)
 800207e:	f001 f8eb 	bl	8003258 <HAL_UART_Transmit>

  return ch;
 8002082:	687b      	ldr	r3, [r7, #4]
}
 8002084:	4618      	mov	r0, r3
 8002086:	3708      	adds	r7, #8
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	200002d0 	.word	0x200002d0

08002090 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002094:	b672      	cpsid	i
}
 8002096:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002098:	e7fe      	b.n	8002098 <Error_Handler+0x8>
	...

0800209c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800209c:	b480      	push	{r7}
 800209e:	b085      	sub	sp, #20
 80020a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80020a2:	4b15      	ldr	r3, [pc, #84]	; (80020f8 <HAL_MspInit+0x5c>)
 80020a4:	699b      	ldr	r3, [r3, #24]
 80020a6:	4a14      	ldr	r2, [pc, #80]	; (80020f8 <HAL_MspInit+0x5c>)
 80020a8:	f043 0301 	orr.w	r3, r3, #1
 80020ac:	6193      	str	r3, [r2, #24]
 80020ae:	4b12      	ldr	r3, [pc, #72]	; (80020f8 <HAL_MspInit+0x5c>)
 80020b0:	699b      	ldr	r3, [r3, #24]
 80020b2:	f003 0301 	and.w	r3, r3, #1
 80020b6:	60bb      	str	r3, [r7, #8]
 80020b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020ba:	4b0f      	ldr	r3, [pc, #60]	; (80020f8 <HAL_MspInit+0x5c>)
 80020bc:	69db      	ldr	r3, [r3, #28]
 80020be:	4a0e      	ldr	r2, [pc, #56]	; (80020f8 <HAL_MspInit+0x5c>)
 80020c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020c4:	61d3      	str	r3, [r2, #28]
 80020c6:	4b0c      	ldr	r3, [pc, #48]	; (80020f8 <HAL_MspInit+0x5c>)
 80020c8:	69db      	ldr	r3, [r3, #28]
 80020ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ce:	607b      	str	r3, [r7, #4]
 80020d0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80020d2:	4b0a      	ldr	r3, [pc, #40]	; (80020fc <HAL_MspInit+0x60>)
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	60fb      	str	r3, [r7, #12]
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80020de:	60fb      	str	r3, [r7, #12]
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80020e6:	60fb      	str	r3, [r7, #12]
 80020e8:	4a04      	ldr	r2, [pc, #16]	; (80020fc <HAL_MspInit+0x60>)
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020ee:	bf00      	nop
 80020f0:	3714      	adds	r7, #20
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bc80      	pop	{r7}
 80020f6:	4770      	bx	lr
 80020f8:	40021000 	.word	0x40021000
 80020fc:	40010000 	.word	0x40010000

08002100 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b088      	sub	sp, #32
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002108:	f107 0310 	add.w	r3, r7, #16
 800210c:	2200      	movs	r2, #0
 800210e:	601a      	str	r2, [r3, #0]
 8002110:	605a      	str	r2, [r3, #4]
 8002112:	609a      	str	r2, [r3, #8]
 8002114:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a1b      	ldr	r2, [pc, #108]	; (8002188 <HAL_UART_MspInit+0x88>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d12f      	bne.n	8002180 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002120:	4b1a      	ldr	r3, [pc, #104]	; (800218c <HAL_UART_MspInit+0x8c>)
 8002122:	69db      	ldr	r3, [r3, #28]
 8002124:	4a19      	ldr	r2, [pc, #100]	; (800218c <HAL_UART_MspInit+0x8c>)
 8002126:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800212a:	61d3      	str	r3, [r2, #28]
 800212c:	4b17      	ldr	r3, [pc, #92]	; (800218c <HAL_UART_MspInit+0x8c>)
 800212e:	69db      	ldr	r3, [r3, #28]
 8002130:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002134:	60fb      	str	r3, [r7, #12]
 8002136:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002138:	4b14      	ldr	r3, [pc, #80]	; (800218c <HAL_UART_MspInit+0x8c>)
 800213a:	699b      	ldr	r3, [r3, #24]
 800213c:	4a13      	ldr	r2, [pc, #76]	; (800218c <HAL_UART_MspInit+0x8c>)
 800213e:	f043 0304 	orr.w	r3, r3, #4
 8002142:	6193      	str	r3, [r2, #24]
 8002144:	4b11      	ldr	r3, [pc, #68]	; (800218c <HAL_UART_MspInit+0x8c>)
 8002146:	699b      	ldr	r3, [r3, #24]
 8002148:	f003 0304 	and.w	r3, r3, #4
 800214c:	60bb      	str	r3, [r7, #8]
 800214e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002150:	2304      	movs	r3, #4
 8002152:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002154:	2302      	movs	r3, #2
 8002156:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002158:	2303      	movs	r3, #3
 800215a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800215c:	f107 0310 	add.w	r3, r7, #16
 8002160:	4619      	mov	r1, r3
 8002162:	480b      	ldr	r0, [pc, #44]	; (8002190 <HAL_UART_MspInit+0x90>)
 8002164:	f000 fa94 	bl	8002690 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002168:	2308      	movs	r3, #8
 800216a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800216c:	2300      	movs	r3, #0
 800216e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002170:	2300      	movs	r3, #0
 8002172:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002174:	f107 0310 	add.w	r3, r7, #16
 8002178:	4619      	mov	r1, r3
 800217a:	4805      	ldr	r0, [pc, #20]	; (8002190 <HAL_UART_MspInit+0x90>)
 800217c:	f000 fa88 	bl	8002690 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002180:	bf00      	nop
 8002182:	3720      	adds	r7, #32
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	40004400 	.word	0x40004400
 800218c:	40021000 	.word	0x40021000
 8002190:	40010800 	.word	0x40010800

08002194 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002194:	b480      	push	{r7}
 8002196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002198:	e7fe      	b.n	8002198 <NMI_Handler+0x4>

0800219a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800219a:	b480      	push	{r7}
 800219c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800219e:	e7fe      	b.n	800219e <HardFault_Handler+0x4>

080021a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021a4:	e7fe      	b.n	80021a4 <MemManage_Handler+0x4>

080021a6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021a6:	b480      	push	{r7}
 80021a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021aa:	e7fe      	b.n	80021aa <BusFault_Handler+0x4>

080021ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021b0:	e7fe      	b.n	80021b0 <UsageFault_Handler+0x4>

080021b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021b2:	b480      	push	{r7}
 80021b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021b6:	bf00      	nop
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bc80      	pop	{r7}
 80021bc:	4770      	bx	lr

080021be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021be:	b480      	push	{r7}
 80021c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021c2:	bf00      	nop
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bc80      	pop	{r7}
 80021c8:	4770      	bx	lr

080021ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021ca:	b480      	push	{r7}
 80021cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021ce:	bf00      	nop
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bc80      	pop	{r7}
 80021d4:	4770      	bx	lr

080021d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021d6:	b580      	push	{r7, lr}
 80021d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021da:	f000 f935 	bl	8002448 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021de:	bf00      	nop
 80021e0:	bd80      	pop	{r7, pc}

080021e2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80021e2:	b480      	push	{r7}
 80021e4:	af00      	add	r7, sp, #0
  return 1;
 80021e6:	2301      	movs	r3, #1
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bc80      	pop	{r7}
 80021ee:	4770      	bx	lr

080021f0 <_kill>:

int _kill(int pid, int sig)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80021fa:	f002 f9f1 	bl	80045e0 <__errno>
 80021fe:	4603      	mov	r3, r0
 8002200:	2216      	movs	r2, #22
 8002202:	601a      	str	r2, [r3, #0]
  return -1;
 8002204:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002208:	4618      	mov	r0, r3
 800220a:	3708      	adds	r7, #8
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}

08002210 <_exit>:

void _exit (int status)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002218:	f04f 31ff 	mov.w	r1, #4294967295
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	f7ff ffe7 	bl	80021f0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002222:	e7fe      	b.n	8002222 <_exit+0x12>

08002224 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b086      	sub	sp, #24
 8002228:	af00      	add	r7, sp, #0
 800222a:	60f8      	str	r0, [r7, #12]
 800222c:	60b9      	str	r1, [r7, #8]
 800222e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002230:	2300      	movs	r3, #0
 8002232:	617b      	str	r3, [r7, #20]
 8002234:	e00a      	b.n	800224c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002236:	f3af 8000 	nop.w
 800223a:	4601      	mov	r1, r0
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	1c5a      	adds	r2, r3, #1
 8002240:	60ba      	str	r2, [r7, #8]
 8002242:	b2ca      	uxtb	r2, r1
 8002244:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	3301      	adds	r3, #1
 800224a:	617b      	str	r3, [r7, #20]
 800224c:	697a      	ldr	r2, [r7, #20]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	429a      	cmp	r2, r3
 8002252:	dbf0      	blt.n	8002236 <_read+0x12>
  }

  return len;
 8002254:	687b      	ldr	r3, [r7, #4]
}
 8002256:	4618      	mov	r0, r3
 8002258:	3718      	adds	r7, #24
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}

0800225e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800225e:	b580      	push	{r7, lr}
 8002260:	b086      	sub	sp, #24
 8002262:	af00      	add	r7, sp, #0
 8002264:	60f8      	str	r0, [r7, #12]
 8002266:	60b9      	str	r1, [r7, #8]
 8002268:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800226a:	2300      	movs	r3, #0
 800226c:	617b      	str	r3, [r7, #20]
 800226e:	e009      	b.n	8002284 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	1c5a      	adds	r2, r3, #1
 8002274:	60ba      	str	r2, [r7, #8]
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	4618      	mov	r0, r3
 800227a:	f7ff fef7 	bl	800206c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	3301      	adds	r3, #1
 8002282:	617b      	str	r3, [r7, #20]
 8002284:	697a      	ldr	r2, [r7, #20]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	429a      	cmp	r2, r3
 800228a:	dbf1      	blt.n	8002270 <_write+0x12>
  }
  return len;
 800228c:	687b      	ldr	r3, [r7, #4]
}
 800228e:	4618      	mov	r0, r3
 8002290:	3718      	adds	r7, #24
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}

08002296 <_close>:

int _close(int file)
{
 8002296:	b480      	push	{r7}
 8002298:	b083      	sub	sp, #12
 800229a:	af00      	add	r7, sp, #0
 800229c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800229e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	370c      	adds	r7, #12
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bc80      	pop	{r7}
 80022aa:	4770      	bx	lr

080022ac <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022bc:	605a      	str	r2, [r3, #4]
  return 0;
 80022be:	2300      	movs	r3, #0
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	370c      	adds	r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bc80      	pop	{r7}
 80022c8:	4770      	bx	lr

080022ca <_isatty>:

int _isatty(int file)
{
 80022ca:	b480      	push	{r7}
 80022cc:	b083      	sub	sp, #12
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80022d2:	2301      	movs	r3, #1
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	370c      	adds	r7, #12
 80022d8:	46bd      	mov	sp, r7
 80022da:	bc80      	pop	{r7}
 80022dc:	4770      	bx	lr

080022de <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80022de:	b480      	push	{r7}
 80022e0:	b085      	sub	sp, #20
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	60f8      	str	r0, [r7, #12]
 80022e6:	60b9      	str	r1, [r7, #8]
 80022e8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80022ea:	2300      	movs	r3, #0
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3714      	adds	r7, #20
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bc80      	pop	{r7}
 80022f4:	4770      	bx	lr
	...

080022f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b086      	sub	sp, #24
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002300:	4a14      	ldr	r2, [pc, #80]	; (8002354 <_sbrk+0x5c>)
 8002302:	4b15      	ldr	r3, [pc, #84]	; (8002358 <_sbrk+0x60>)
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800230c:	4b13      	ldr	r3, [pc, #76]	; (800235c <_sbrk+0x64>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d102      	bne.n	800231a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002314:	4b11      	ldr	r3, [pc, #68]	; (800235c <_sbrk+0x64>)
 8002316:	4a12      	ldr	r2, [pc, #72]	; (8002360 <_sbrk+0x68>)
 8002318:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800231a:	4b10      	ldr	r3, [pc, #64]	; (800235c <_sbrk+0x64>)
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4413      	add	r3, r2
 8002322:	693a      	ldr	r2, [r7, #16]
 8002324:	429a      	cmp	r2, r3
 8002326:	d207      	bcs.n	8002338 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002328:	f002 f95a 	bl	80045e0 <__errno>
 800232c:	4603      	mov	r3, r0
 800232e:	220c      	movs	r2, #12
 8002330:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002332:	f04f 33ff 	mov.w	r3, #4294967295
 8002336:	e009      	b.n	800234c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002338:	4b08      	ldr	r3, [pc, #32]	; (800235c <_sbrk+0x64>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800233e:	4b07      	ldr	r3, [pc, #28]	; (800235c <_sbrk+0x64>)
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4413      	add	r3, r2
 8002346:	4a05      	ldr	r2, [pc, #20]	; (800235c <_sbrk+0x64>)
 8002348:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800234a:	68fb      	ldr	r3, [r7, #12]
}
 800234c:	4618      	mov	r0, r3
 800234e:	3718      	adds	r7, #24
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	20005000 	.word	0x20005000
 8002358:	00000400 	.word	0x00000400
 800235c:	20000318 	.word	0x20000318
 8002360:	20000470 	.word	0x20000470

08002364 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002364:	b480      	push	{r7}
 8002366:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002368:	bf00      	nop
 800236a:	46bd      	mov	sp, r7
 800236c:	bc80      	pop	{r7}
 800236e:	4770      	bx	lr

08002370 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002370:	f7ff fff8 	bl	8002364 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002374:	480b      	ldr	r0, [pc, #44]	; (80023a4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002376:	490c      	ldr	r1, [pc, #48]	; (80023a8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002378:	4a0c      	ldr	r2, [pc, #48]	; (80023ac <LoopFillZerobss+0x16>)
  movs r3, #0
 800237a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800237c:	e002      	b.n	8002384 <LoopCopyDataInit>

0800237e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800237e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002380:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002382:	3304      	adds	r3, #4

08002384 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002384:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002386:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002388:	d3f9      	bcc.n	800237e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800238a:	4a09      	ldr	r2, [pc, #36]	; (80023b0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800238c:	4c09      	ldr	r4, [pc, #36]	; (80023b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800238e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002390:	e001      	b.n	8002396 <LoopFillZerobss>

08002392 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002392:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002394:	3204      	adds	r2, #4

08002396 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002396:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002398:	d3fb      	bcc.n	8002392 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800239a:	f002 f927 	bl	80045ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800239e:	f7ff fd07 	bl	8001db0 <main>
  bx lr
 80023a2:	4770      	bx	lr
  ldr r0, =_sdata
 80023a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023a8:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80023ac:	0800767c 	.word	0x0800767c
  ldr r2, =_sbss
 80023b0:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80023b4:	2000046c 	.word	0x2000046c

080023b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80023b8:	e7fe      	b.n	80023b8 <ADC1_2_IRQHandler>
	...

080023bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023c0:	4b08      	ldr	r3, [pc, #32]	; (80023e4 <HAL_Init+0x28>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a07      	ldr	r2, [pc, #28]	; (80023e4 <HAL_Init+0x28>)
 80023c6:	f043 0310 	orr.w	r3, r3, #16
 80023ca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023cc:	2003      	movs	r0, #3
 80023ce:	f000 f92b 	bl	8002628 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023d2:	200f      	movs	r0, #15
 80023d4:	f000 f808 	bl	80023e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023d8:	f7ff fe60 	bl	800209c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023dc:	2300      	movs	r3, #0
}
 80023de:	4618      	mov	r0, r3
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	40022000 	.word	0x40022000

080023e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023f0:	4b12      	ldr	r3, [pc, #72]	; (800243c <HAL_InitTick+0x54>)
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	4b12      	ldr	r3, [pc, #72]	; (8002440 <HAL_InitTick+0x58>)
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	4619      	mov	r1, r3
 80023fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002402:	fbb2 f3f3 	udiv	r3, r2, r3
 8002406:	4618      	mov	r0, r3
 8002408:	f000 f935 	bl	8002676 <HAL_SYSTICK_Config>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d001      	beq.n	8002416 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e00e      	b.n	8002434 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2b0f      	cmp	r3, #15
 800241a:	d80a      	bhi.n	8002432 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800241c:	2200      	movs	r2, #0
 800241e:	6879      	ldr	r1, [r7, #4]
 8002420:	f04f 30ff 	mov.w	r0, #4294967295
 8002424:	f000 f90b 	bl	800263e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002428:	4a06      	ldr	r2, [pc, #24]	; (8002444 <HAL_InitTick+0x5c>)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800242e:	2300      	movs	r3, #0
 8002430:	e000      	b.n	8002434 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
}
 8002434:	4618      	mov	r0, r3
 8002436:	3708      	adds	r7, #8
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	20000004 	.word	0x20000004
 8002440:	2000000c 	.word	0x2000000c
 8002444:	20000008 	.word	0x20000008

08002448 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800244c:	4b05      	ldr	r3, [pc, #20]	; (8002464 <HAL_IncTick+0x1c>)
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	461a      	mov	r2, r3
 8002452:	4b05      	ldr	r3, [pc, #20]	; (8002468 <HAL_IncTick+0x20>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4413      	add	r3, r2
 8002458:	4a03      	ldr	r2, [pc, #12]	; (8002468 <HAL_IncTick+0x20>)
 800245a:	6013      	str	r3, [r2, #0]
}
 800245c:	bf00      	nop
 800245e:	46bd      	mov	sp, r7
 8002460:	bc80      	pop	{r7}
 8002462:	4770      	bx	lr
 8002464:	2000000c 	.word	0x2000000c
 8002468:	2000031c 	.word	0x2000031c

0800246c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0
  return uwTick;
 8002470:	4b02      	ldr	r3, [pc, #8]	; (800247c <HAL_GetTick+0x10>)
 8002472:	681b      	ldr	r3, [r3, #0]
}
 8002474:	4618      	mov	r0, r3
 8002476:	46bd      	mov	sp, r7
 8002478:	bc80      	pop	{r7}
 800247a:	4770      	bx	lr
 800247c:	2000031c 	.word	0x2000031c

08002480 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002488:	f7ff fff0 	bl	800246c <HAL_GetTick>
 800248c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002498:	d005      	beq.n	80024a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800249a:	4b0a      	ldr	r3, [pc, #40]	; (80024c4 <HAL_Delay+0x44>)
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	461a      	mov	r2, r3
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	4413      	add	r3, r2
 80024a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80024a6:	bf00      	nop
 80024a8:	f7ff ffe0 	bl	800246c <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	68fa      	ldr	r2, [r7, #12]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d8f7      	bhi.n	80024a8 <HAL_Delay+0x28>
  {
  }
}
 80024b8:	bf00      	nop
 80024ba:	bf00      	nop
 80024bc:	3710      	adds	r7, #16
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	2000000c 	.word	0x2000000c

080024c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b085      	sub	sp, #20
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	f003 0307 	and.w	r3, r3, #7
 80024d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024d8:	4b0c      	ldr	r3, [pc, #48]	; (800250c <__NVIC_SetPriorityGrouping+0x44>)
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024de:	68ba      	ldr	r2, [r7, #8]
 80024e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024e4:	4013      	ands	r3, r2
 80024e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024fa:	4a04      	ldr	r2, [pc, #16]	; (800250c <__NVIC_SetPriorityGrouping+0x44>)
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	60d3      	str	r3, [r2, #12]
}
 8002500:	bf00      	nop
 8002502:	3714      	adds	r7, #20
 8002504:	46bd      	mov	sp, r7
 8002506:	bc80      	pop	{r7}
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	e000ed00 	.word	0xe000ed00

08002510 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002514:	4b04      	ldr	r3, [pc, #16]	; (8002528 <__NVIC_GetPriorityGrouping+0x18>)
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	0a1b      	lsrs	r3, r3, #8
 800251a:	f003 0307 	and.w	r3, r3, #7
}
 800251e:	4618      	mov	r0, r3
 8002520:	46bd      	mov	sp, r7
 8002522:	bc80      	pop	{r7}
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	e000ed00 	.word	0xe000ed00

0800252c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	4603      	mov	r3, r0
 8002534:	6039      	str	r1, [r7, #0]
 8002536:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002538:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800253c:	2b00      	cmp	r3, #0
 800253e:	db0a      	blt.n	8002556 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	b2da      	uxtb	r2, r3
 8002544:	490c      	ldr	r1, [pc, #48]	; (8002578 <__NVIC_SetPriority+0x4c>)
 8002546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800254a:	0112      	lsls	r2, r2, #4
 800254c:	b2d2      	uxtb	r2, r2
 800254e:	440b      	add	r3, r1
 8002550:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002554:	e00a      	b.n	800256c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	b2da      	uxtb	r2, r3
 800255a:	4908      	ldr	r1, [pc, #32]	; (800257c <__NVIC_SetPriority+0x50>)
 800255c:	79fb      	ldrb	r3, [r7, #7]
 800255e:	f003 030f 	and.w	r3, r3, #15
 8002562:	3b04      	subs	r3, #4
 8002564:	0112      	lsls	r2, r2, #4
 8002566:	b2d2      	uxtb	r2, r2
 8002568:	440b      	add	r3, r1
 800256a:	761a      	strb	r2, [r3, #24]
}
 800256c:	bf00      	nop
 800256e:	370c      	adds	r7, #12
 8002570:	46bd      	mov	sp, r7
 8002572:	bc80      	pop	{r7}
 8002574:	4770      	bx	lr
 8002576:	bf00      	nop
 8002578:	e000e100 	.word	0xe000e100
 800257c:	e000ed00 	.word	0xe000ed00

08002580 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002580:	b480      	push	{r7}
 8002582:	b089      	sub	sp, #36	; 0x24
 8002584:	af00      	add	r7, sp, #0
 8002586:	60f8      	str	r0, [r7, #12]
 8002588:	60b9      	str	r1, [r7, #8]
 800258a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	f003 0307 	and.w	r3, r3, #7
 8002592:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	f1c3 0307 	rsb	r3, r3, #7
 800259a:	2b04      	cmp	r3, #4
 800259c:	bf28      	it	cs
 800259e:	2304      	movcs	r3, #4
 80025a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	3304      	adds	r3, #4
 80025a6:	2b06      	cmp	r3, #6
 80025a8:	d902      	bls.n	80025b0 <NVIC_EncodePriority+0x30>
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	3b03      	subs	r3, #3
 80025ae:	e000      	b.n	80025b2 <NVIC_EncodePriority+0x32>
 80025b0:	2300      	movs	r3, #0
 80025b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025b4:	f04f 32ff 	mov.w	r2, #4294967295
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	fa02 f303 	lsl.w	r3, r2, r3
 80025be:	43da      	mvns	r2, r3
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	401a      	ands	r2, r3
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025c8:	f04f 31ff 	mov.w	r1, #4294967295
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	fa01 f303 	lsl.w	r3, r1, r3
 80025d2:	43d9      	mvns	r1, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025d8:	4313      	orrs	r3, r2
         );
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3724      	adds	r7, #36	; 0x24
 80025de:	46bd      	mov	sp, r7
 80025e0:	bc80      	pop	{r7}
 80025e2:	4770      	bx	lr

080025e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b082      	sub	sp, #8
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	3b01      	subs	r3, #1
 80025f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025f4:	d301      	bcc.n	80025fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025f6:	2301      	movs	r3, #1
 80025f8:	e00f      	b.n	800261a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025fa:	4a0a      	ldr	r2, [pc, #40]	; (8002624 <SysTick_Config+0x40>)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	3b01      	subs	r3, #1
 8002600:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002602:	210f      	movs	r1, #15
 8002604:	f04f 30ff 	mov.w	r0, #4294967295
 8002608:	f7ff ff90 	bl	800252c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800260c:	4b05      	ldr	r3, [pc, #20]	; (8002624 <SysTick_Config+0x40>)
 800260e:	2200      	movs	r2, #0
 8002610:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002612:	4b04      	ldr	r3, [pc, #16]	; (8002624 <SysTick_Config+0x40>)
 8002614:	2207      	movs	r2, #7
 8002616:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002618:	2300      	movs	r3, #0
}
 800261a:	4618      	mov	r0, r3
 800261c:	3708      	adds	r7, #8
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	e000e010 	.word	0xe000e010

08002628 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f7ff ff49 	bl	80024c8 <__NVIC_SetPriorityGrouping>
}
 8002636:	bf00      	nop
 8002638:	3708      	adds	r7, #8
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}

0800263e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800263e:	b580      	push	{r7, lr}
 8002640:	b086      	sub	sp, #24
 8002642:	af00      	add	r7, sp, #0
 8002644:	4603      	mov	r3, r0
 8002646:	60b9      	str	r1, [r7, #8]
 8002648:	607a      	str	r2, [r7, #4]
 800264a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800264c:	2300      	movs	r3, #0
 800264e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002650:	f7ff ff5e 	bl	8002510 <__NVIC_GetPriorityGrouping>
 8002654:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	68b9      	ldr	r1, [r7, #8]
 800265a:	6978      	ldr	r0, [r7, #20]
 800265c:	f7ff ff90 	bl	8002580 <NVIC_EncodePriority>
 8002660:	4602      	mov	r2, r0
 8002662:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002666:	4611      	mov	r1, r2
 8002668:	4618      	mov	r0, r3
 800266a:	f7ff ff5f 	bl	800252c <__NVIC_SetPriority>
}
 800266e:	bf00      	nop
 8002670:	3718      	adds	r7, #24
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}

08002676 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002676:	b580      	push	{r7, lr}
 8002678:	b082      	sub	sp, #8
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f7ff ffb0 	bl	80025e4 <SysTick_Config>
 8002684:	4603      	mov	r3, r0
}
 8002686:	4618      	mov	r0, r3
 8002688:	3708      	adds	r7, #8
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
	...

08002690 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002690:	b480      	push	{r7}
 8002692:	b08b      	sub	sp, #44	; 0x2c
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800269a:	2300      	movs	r3, #0
 800269c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800269e:	2300      	movs	r3, #0
 80026a0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026a2:	e169      	b.n	8002978 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80026a4:	2201      	movs	r2, #1
 80026a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	69fa      	ldr	r2, [r7, #28]
 80026b4:	4013      	ands	r3, r2
 80026b6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80026b8:	69ba      	ldr	r2, [r7, #24]
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	429a      	cmp	r2, r3
 80026be:	f040 8158 	bne.w	8002972 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	4a9a      	ldr	r2, [pc, #616]	; (8002930 <HAL_GPIO_Init+0x2a0>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d05e      	beq.n	800278a <HAL_GPIO_Init+0xfa>
 80026cc:	4a98      	ldr	r2, [pc, #608]	; (8002930 <HAL_GPIO_Init+0x2a0>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d875      	bhi.n	80027be <HAL_GPIO_Init+0x12e>
 80026d2:	4a98      	ldr	r2, [pc, #608]	; (8002934 <HAL_GPIO_Init+0x2a4>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d058      	beq.n	800278a <HAL_GPIO_Init+0xfa>
 80026d8:	4a96      	ldr	r2, [pc, #600]	; (8002934 <HAL_GPIO_Init+0x2a4>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d86f      	bhi.n	80027be <HAL_GPIO_Init+0x12e>
 80026de:	4a96      	ldr	r2, [pc, #600]	; (8002938 <HAL_GPIO_Init+0x2a8>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d052      	beq.n	800278a <HAL_GPIO_Init+0xfa>
 80026e4:	4a94      	ldr	r2, [pc, #592]	; (8002938 <HAL_GPIO_Init+0x2a8>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d869      	bhi.n	80027be <HAL_GPIO_Init+0x12e>
 80026ea:	4a94      	ldr	r2, [pc, #592]	; (800293c <HAL_GPIO_Init+0x2ac>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d04c      	beq.n	800278a <HAL_GPIO_Init+0xfa>
 80026f0:	4a92      	ldr	r2, [pc, #584]	; (800293c <HAL_GPIO_Init+0x2ac>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d863      	bhi.n	80027be <HAL_GPIO_Init+0x12e>
 80026f6:	4a92      	ldr	r2, [pc, #584]	; (8002940 <HAL_GPIO_Init+0x2b0>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d046      	beq.n	800278a <HAL_GPIO_Init+0xfa>
 80026fc:	4a90      	ldr	r2, [pc, #576]	; (8002940 <HAL_GPIO_Init+0x2b0>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d85d      	bhi.n	80027be <HAL_GPIO_Init+0x12e>
 8002702:	2b12      	cmp	r3, #18
 8002704:	d82a      	bhi.n	800275c <HAL_GPIO_Init+0xcc>
 8002706:	2b12      	cmp	r3, #18
 8002708:	d859      	bhi.n	80027be <HAL_GPIO_Init+0x12e>
 800270a:	a201      	add	r2, pc, #4	; (adr r2, 8002710 <HAL_GPIO_Init+0x80>)
 800270c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002710:	0800278b 	.word	0x0800278b
 8002714:	08002765 	.word	0x08002765
 8002718:	08002777 	.word	0x08002777
 800271c:	080027b9 	.word	0x080027b9
 8002720:	080027bf 	.word	0x080027bf
 8002724:	080027bf 	.word	0x080027bf
 8002728:	080027bf 	.word	0x080027bf
 800272c:	080027bf 	.word	0x080027bf
 8002730:	080027bf 	.word	0x080027bf
 8002734:	080027bf 	.word	0x080027bf
 8002738:	080027bf 	.word	0x080027bf
 800273c:	080027bf 	.word	0x080027bf
 8002740:	080027bf 	.word	0x080027bf
 8002744:	080027bf 	.word	0x080027bf
 8002748:	080027bf 	.word	0x080027bf
 800274c:	080027bf 	.word	0x080027bf
 8002750:	080027bf 	.word	0x080027bf
 8002754:	0800276d 	.word	0x0800276d
 8002758:	08002781 	.word	0x08002781
 800275c:	4a79      	ldr	r2, [pc, #484]	; (8002944 <HAL_GPIO_Init+0x2b4>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d013      	beq.n	800278a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002762:	e02c      	b.n	80027be <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	623b      	str	r3, [r7, #32]
          break;
 800276a:	e029      	b.n	80027c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	3304      	adds	r3, #4
 8002772:	623b      	str	r3, [r7, #32]
          break;
 8002774:	e024      	b.n	80027c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	3308      	adds	r3, #8
 800277c:	623b      	str	r3, [r7, #32]
          break;
 800277e:	e01f      	b.n	80027c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	330c      	adds	r3, #12
 8002786:	623b      	str	r3, [r7, #32]
          break;
 8002788:	e01a      	b.n	80027c0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d102      	bne.n	8002798 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002792:	2304      	movs	r3, #4
 8002794:	623b      	str	r3, [r7, #32]
          break;
 8002796:	e013      	b.n	80027c0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	2b01      	cmp	r3, #1
 800279e:	d105      	bne.n	80027ac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80027a0:	2308      	movs	r3, #8
 80027a2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	69fa      	ldr	r2, [r7, #28]
 80027a8:	611a      	str	r2, [r3, #16]
          break;
 80027aa:	e009      	b.n	80027c0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80027ac:	2308      	movs	r3, #8
 80027ae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	69fa      	ldr	r2, [r7, #28]
 80027b4:	615a      	str	r2, [r3, #20]
          break;
 80027b6:	e003      	b.n	80027c0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80027b8:	2300      	movs	r3, #0
 80027ba:	623b      	str	r3, [r7, #32]
          break;
 80027bc:	e000      	b.n	80027c0 <HAL_GPIO_Init+0x130>
          break;
 80027be:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80027c0:	69bb      	ldr	r3, [r7, #24]
 80027c2:	2bff      	cmp	r3, #255	; 0xff
 80027c4:	d801      	bhi.n	80027ca <HAL_GPIO_Init+0x13a>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	e001      	b.n	80027ce <HAL_GPIO_Init+0x13e>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	3304      	adds	r3, #4
 80027ce:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80027d0:	69bb      	ldr	r3, [r7, #24]
 80027d2:	2bff      	cmp	r3, #255	; 0xff
 80027d4:	d802      	bhi.n	80027dc <HAL_GPIO_Init+0x14c>
 80027d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	e002      	b.n	80027e2 <HAL_GPIO_Init+0x152>
 80027dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027de:	3b08      	subs	r3, #8
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	210f      	movs	r1, #15
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	fa01 f303 	lsl.w	r3, r1, r3
 80027f0:	43db      	mvns	r3, r3
 80027f2:	401a      	ands	r2, r3
 80027f4:	6a39      	ldr	r1, [r7, #32]
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	fa01 f303 	lsl.w	r3, r1, r3
 80027fc:	431a      	orrs	r2, r3
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800280a:	2b00      	cmp	r3, #0
 800280c:	f000 80b1 	beq.w	8002972 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002810:	4b4d      	ldr	r3, [pc, #308]	; (8002948 <HAL_GPIO_Init+0x2b8>)
 8002812:	699b      	ldr	r3, [r3, #24]
 8002814:	4a4c      	ldr	r2, [pc, #304]	; (8002948 <HAL_GPIO_Init+0x2b8>)
 8002816:	f043 0301 	orr.w	r3, r3, #1
 800281a:	6193      	str	r3, [r2, #24]
 800281c:	4b4a      	ldr	r3, [pc, #296]	; (8002948 <HAL_GPIO_Init+0x2b8>)
 800281e:	699b      	ldr	r3, [r3, #24]
 8002820:	f003 0301 	and.w	r3, r3, #1
 8002824:	60bb      	str	r3, [r7, #8]
 8002826:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002828:	4a48      	ldr	r2, [pc, #288]	; (800294c <HAL_GPIO_Init+0x2bc>)
 800282a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282c:	089b      	lsrs	r3, r3, #2
 800282e:	3302      	adds	r3, #2
 8002830:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002834:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002838:	f003 0303 	and.w	r3, r3, #3
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	220f      	movs	r2, #15
 8002840:	fa02 f303 	lsl.w	r3, r2, r3
 8002844:	43db      	mvns	r3, r3
 8002846:	68fa      	ldr	r2, [r7, #12]
 8002848:	4013      	ands	r3, r2
 800284a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	4a40      	ldr	r2, [pc, #256]	; (8002950 <HAL_GPIO_Init+0x2c0>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d013      	beq.n	800287c <HAL_GPIO_Init+0x1ec>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	4a3f      	ldr	r2, [pc, #252]	; (8002954 <HAL_GPIO_Init+0x2c4>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d00d      	beq.n	8002878 <HAL_GPIO_Init+0x1e8>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	4a3e      	ldr	r2, [pc, #248]	; (8002958 <HAL_GPIO_Init+0x2c8>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d007      	beq.n	8002874 <HAL_GPIO_Init+0x1e4>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	4a3d      	ldr	r2, [pc, #244]	; (800295c <HAL_GPIO_Init+0x2cc>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d101      	bne.n	8002870 <HAL_GPIO_Init+0x1e0>
 800286c:	2303      	movs	r3, #3
 800286e:	e006      	b.n	800287e <HAL_GPIO_Init+0x1ee>
 8002870:	2304      	movs	r3, #4
 8002872:	e004      	b.n	800287e <HAL_GPIO_Init+0x1ee>
 8002874:	2302      	movs	r3, #2
 8002876:	e002      	b.n	800287e <HAL_GPIO_Init+0x1ee>
 8002878:	2301      	movs	r3, #1
 800287a:	e000      	b.n	800287e <HAL_GPIO_Init+0x1ee>
 800287c:	2300      	movs	r3, #0
 800287e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002880:	f002 0203 	and.w	r2, r2, #3
 8002884:	0092      	lsls	r2, r2, #2
 8002886:	4093      	lsls	r3, r2
 8002888:	68fa      	ldr	r2, [r7, #12]
 800288a:	4313      	orrs	r3, r2
 800288c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800288e:	492f      	ldr	r1, [pc, #188]	; (800294c <HAL_GPIO_Init+0x2bc>)
 8002890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002892:	089b      	lsrs	r3, r3, #2
 8002894:	3302      	adds	r3, #2
 8002896:	68fa      	ldr	r2, [r7, #12]
 8002898:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d006      	beq.n	80028b6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80028a8:	4b2d      	ldr	r3, [pc, #180]	; (8002960 <HAL_GPIO_Init+0x2d0>)
 80028aa:	689a      	ldr	r2, [r3, #8]
 80028ac:	492c      	ldr	r1, [pc, #176]	; (8002960 <HAL_GPIO_Init+0x2d0>)
 80028ae:	69bb      	ldr	r3, [r7, #24]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	608b      	str	r3, [r1, #8]
 80028b4:	e006      	b.n	80028c4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80028b6:	4b2a      	ldr	r3, [pc, #168]	; (8002960 <HAL_GPIO_Init+0x2d0>)
 80028b8:	689a      	ldr	r2, [r3, #8]
 80028ba:	69bb      	ldr	r3, [r7, #24]
 80028bc:	43db      	mvns	r3, r3
 80028be:	4928      	ldr	r1, [pc, #160]	; (8002960 <HAL_GPIO_Init+0x2d0>)
 80028c0:	4013      	ands	r3, r2
 80028c2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d006      	beq.n	80028de <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80028d0:	4b23      	ldr	r3, [pc, #140]	; (8002960 <HAL_GPIO_Init+0x2d0>)
 80028d2:	68da      	ldr	r2, [r3, #12]
 80028d4:	4922      	ldr	r1, [pc, #136]	; (8002960 <HAL_GPIO_Init+0x2d0>)
 80028d6:	69bb      	ldr	r3, [r7, #24]
 80028d8:	4313      	orrs	r3, r2
 80028da:	60cb      	str	r3, [r1, #12]
 80028dc:	e006      	b.n	80028ec <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80028de:	4b20      	ldr	r3, [pc, #128]	; (8002960 <HAL_GPIO_Init+0x2d0>)
 80028e0:	68da      	ldr	r2, [r3, #12]
 80028e2:	69bb      	ldr	r3, [r7, #24]
 80028e4:	43db      	mvns	r3, r3
 80028e6:	491e      	ldr	r1, [pc, #120]	; (8002960 <HAL_GPIO_Init+0x2d0>)
 80028e8:	4013      	ands	r3, r2
 80028ea:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d006      	beq.n	8002906 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80028f8:	4b19      	ldr	r3, [pc, #100]	; (8002960 <HAL_GPIO_Init+0x2d0>)
 80028fa:	685a      	ldr	r2, [r3, #4]
 80028fc:	4918      	ldr	r1, [pc, #96]	; (8002960 <HAL_GPIO_Init+0x2d0>)
 80028fe:	69bb      	ldr	r3, [r7, #24]
 8002900:	4313      	orrs	r3, r2
 8002902:	604b      	str	r3, [r1, #4]
 8002904:	e006      	b.n	8002914 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002906:	4b16      	ldr	r3, [pc, #88]	; (8002960 <HAL_GPIO_Init+0x2d0>)
 8002908:	685a      	ldr	r2, [r3, #4]
 800290a:	69bb      	ldr	r3, [r7, #24]
 800290c:	43db      	mvns	r3, r3
 800290e:	4914      	ldr	r1, [pc, #80]	; (8002960 <HAL_GPIO_Init+0x2d0>)
 8002910:	4013      	ands	r3, r2
 8002912:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800291c:	2b00      	cmp	r3, #0
 800291e:	d021      	beq.n	8002964 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002920:	4b0f      	ldr	r3, [pc, #60]	; (8002960 <HAL_GPIO_Init+0x2d0>)
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	490e      	ldr	r1, [pc, #56]	; (8002960 <HAL_GPIO_Init+0x2d0>)
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	4313      	orrs	r3, r2
 800292a:	600b      	str	r3, [r1, #0]
 800292c:	e021      	b.n	8002972 <HAL_GPIO_Init+0x2e2>
 800292e:	bf00      	nop
 8002930:	10320000 	.word	0x10320000
 8002934:	10310000 	.word	0x10310000
 8002938:	10220000 	.word	0x10220000
 800293c:	10210000 	.word	0x10210000
 8002940:	10120000 	.word	0x10120000
 8002944:	10110000 	.word	0x10110000
 8002948:	40021000 	.word	0x40021000
 800294c:	40010000 	.word	0x40010000
 8002950:	40010800 	.word	0x40010800
 8002954:	40010c00 	.word	0x40010c00
 8002958:	40011000 	.word	0x40011000
 800295c:	40011400 	.word	0x40011400
 8002960:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002964:	4b0b      	ldr	r3, [pc, #44]	; (8002994 <HAL_GPIO_Init+0x304>)
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	69bb      	ldr	r3, [r7, #24]
 800296a:	43db      	mvns	r3, r3
 800296c:	4909      	ldr	r1, [pc, #36]	; (8002994 <HAL_GPIO_Init+0x304>)
 800296e:	4013      	ands	r3, r2
 8002970:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002974:	3301      	adds	r3, #1
 8002976:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297e:	fa22 f303 	lsr.w	r3, r2, r3
 8002982:	2b00      	cmp	r3, #0
 8002984:	f47f ae8e 	bne.w	80026a4 <HAL_GPIO_Init+0x14>
  }
}
 8002988:	bf00      	nop
 800298a:	bf00      	nop
 800298c:	372c      	adds	r7, #44	; 0x2c
 800298e:	46bd      	mov	sp, r7
 8002990:	bc80      	pop	{r7}
 8002992:	4770      	bx	lr
 8002994:	40010400 	.word	0x40010400

08002998 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b086      	sub	sp, #24
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d101      	bne.n	80029aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e272      	b.n	8002e90 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0301 	and.w	r3, r3, #1
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	f000 8087 	beq.w	8002ac6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80029b8:	4b92      	ldr	r3, [pc, #584]	; (8002c04 <HAL_RCC_OscConfig+0x26c>)
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f003 030c 	and.w	r3, r3, #12
 80029c0:	2b04      	cmp	r3, #4
 80029c2:	d00c      	beq.n	80029de <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80029c4:	4b8f      	ldr	r3, [pc, #572]	; (8002c04 <HAL_RCC_OscConfig+0x26c>)
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f003 030c 	and.w	r3, r3, #12
 80029cc:	2b08      	cmp	r3, #8
 80029ce:	d112      	bne.n	80029f6 <HAL_RCC_OscConfig+0x5e>
 80029d0:	4b8c      	ldr	r3, [pc, #560]	; (8002c04 <HAL_RCC_OscConfig+0x26c>)
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029dc:	d10b      	bne.n	80029f6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029de:	4b89      	ldr	r3, [pc, #548]	; (8002c04 <HAL_RCC_OscConfig+0x26c>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d06c      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x12c>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d168      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e24c      	b.n	8002e90 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029fe:	d106      	bne.n	8002a0e <HAL_RCC_OscConfig+0x76>
 8002a00:	4b80      	ldr	r3, [pc, #512]	; (8002c04 <HAL_RCC_OscConfig+0x26c>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a7f      	ldr	r2, [pc, #508]	; (8002c04 <HAL_RCC_OscConfig+0x26c>)
 8002a06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a0a:	6013      	str	r3, [r2, #0]
 8002a0c:	e02e      	b.n	8002a6c <HAL_RCC_OscConfig+0xd4>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d10c      	bne.n	8002a30 <HAL_RCC_OscConfig+0x98>
 8002a16:	4b7b      	ldr	r3, [pc, #492]	; (8002c04 <HAL_RCC_OscConfig+0x26c>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a7a      	ldr	r2, [pc, #488]	; (8002c04 <HAL_RCC_OscConfig+0x26c>)
 8002a1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a20:	6013      	str	r3, [r2, #0]
 8002a22:	4b78      	ldr	r3, [pc, #480]	; (8002c04 <HAL_RCC_OscConfig+0x26c>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a77      	ldr	r2, [pc, #476]	; (8002c04 <HAL_RCC_OscConfig+0x26c>)
 8002a28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a2c:	6013      	str	r3, [r2, #0]
 8002a2e:	e01d      	b.n	8002a6c <HAL_RCC_OscConfig+0xd4>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a38:	d10c      	bne.n	8002a54 <HAL_RCC_OscConfig+0xbc>
 8002a3a:	4b72      	ldr	r3, [pc, #456]	; (8002c04 <HAL_RCC_OscConfig+0x26c>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a71      	ldr	r2, [pc, #452]	; (8002c04 <HAL_RCC_OscConfig+0x26c>)
 8002a40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a44:	6013      	str	r3, [r2, #0]
 8002a46:	4b6f      	ldr	r3, [pc, #444]	; (8002c04 <HAL_RCC_OscConfig+0x26c>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a6e      	ldr	r2, [pc, #440]	; (8002c04 <HAL_RCC_OscConfig+0x26c>)
 8002a4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a50:	6013      	str	r3, [r2, #0]
 8002a52:	e00b      	b.n	8002a6c <HAL_RCC_OscConfig+0xd4>
 8002a54:	4b6b      	ldr	r3, [pc, #428]	; (8002c04 <HAL_RCC_OscConfig+0x26c>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a6a      	ldr	r2, [pc, #424]	; (8002c04 <HAL_RCC_OscConfig+0x26c>)
 8002a5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a5e:	6013      	str	r3, [r2, #0]
 8002a60:	4b68      	ldr	r3, [pc, #416]	; (8002c04 <HAL_RCC_OscConfig+0x26c>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a67      	ldr	r2, [pc, #412]	; (8002c04 <HAL_RCC_OscConfig+0x26c>)
 8002a66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a6a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d013      	beq.n	8002a9c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a74:	f7ff fcfa 	bl	800246c <HAL_GetTick>
 8002a78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a7a:	e008      	b.n	8002a8e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a7c:	f7ff fcf6 	bl	800246c <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	2b64      	cmp	r3, #100	; 0x64
 8002a88:	d901      	bls.n	8002a8e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e200      	b.n	8002e90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a8e:	4b5d      	ldr	r3, [pc, #372]	; (8002c04 <HAL_RCC_OscConfig+0x26c>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d0f0      	beq.n	8002a7c <HAL_RCC_OscConfig+0xe4>
 8002a9a:	e014      	b.n	8002ac6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a9c:	f7ff fce6 	bl	800246c <HAL_GetTick>
 8002aa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aa2:	e008      	b.n	8002ab6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002aa4:	f7ff fce2 	bl	800246c <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	2b64      	cmp	r3, #100	; 0x64
 8002ab0:	d901      	bls.n	8002ab6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e1ec      	b.n	8002e90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ab6:	4b53      	ldr	r3, [pc, #332]	; (8002c04 <HAL_RCC_OscConfig+0x26c>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d1f0      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x10c>
 8002ac2:	e000      	b.n	8002ac6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ac4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0302 	and.w	r3, r3, #2
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d063      	beq.n	8002b9a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ad2:	4b4c      	ldr	r3, [pc, #304]	; (8002c04 <HAL_RCC_OscConfig+0x26c>)
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	f003 030c 	and.w	r3, r3, #12
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d00b      	beq.n	8002af6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002ade:	4b49      	ldr	r3, [pc, #292]	; (8002c04 <HAL_RCC_OscConfig+0x26c>)
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	f003 030c 	and.w	r3, r3, #12
 8002ae6:	2b08      	cmp	r3, #8
 8002ae8:	d11c      	bne.n	8002b24 <HAL_RCC_OscConfig+0x18c>
 8002aea:	4b46      	ldr	r3, [pc, #280]	; (8002c04 <HAL_RCC_OscConfig+0x26c>)
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d116      	bne.n	8002b24 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002af6:	4b43      	ldr	r3, [pc, #268]	; (8002c04 <HAL_RCC_OscConfig+0x26c>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0302 	and.w	r3, r3, #2
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d005      	beq.n	8002b0e <HAL_RCC_OscConfig+0x176>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	691b      	ldr	r3, [r3, #16]
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d001      	beq.n	8002b0e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e1c0      	b.n	8002e90 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b0e:	4b3d      	ldr	r3, [pc, #244]	; (8002c04 <HAL_RCC_OscConfig+0x26c>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	695b      	ldr	r3, [r3, #20]
 8002b1a:	00db      	lsls	r3, r3, #3
 8002b1c:	4939      	ldr	r1, [pc, #228]	; (8002c04 <HAL_RCC_OscConfig+0x26c>)
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b22:	e03a      	b.n	8002b9a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	691b      	ldr	r3, [r3, #16]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d020      	beq.n	8002b6e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b2c:	4b36      	ldr	r3, [pc, #216]	; (8002c08 <HAL_RCC_OscConfig+0x270>)
 8002b2e:	2201      	movs	r2, #1
 8002b30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b32:	f7ff fc9b 	bl	800246c <HAL_GetTick>
 8002b36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b38:	e008      	b.n	8002b4c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b3a:	f7ff fc97 	bl	800246c <HAL_GetTick>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	1ad3      	subs	r3, r2, r3
 8002b44:	2b02      	cmp	r3, #2
 8002b46:	d901      	bls.n	8002b4c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002b48:	2303      	movs	r3, #3
 8002b4a:	e1a1      	b.n	8002e90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b4c:	4b2d      	ldr	r3, [pc, #180]	; (8002c04 <HAL_RCC_OscConfig+0x26c>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 0302 	and.w	r3, r3, #2
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d0f0      	beq.n	8002b3a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b58:	4b2a      	ldr	r3, [pc, #168]	; (8002c04 <HAL_RCC_OscConfig+0x26c>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	695b      	ldr	r3, [r3, #20]
 8002b64:	00db      	lsls	r3, r3, #3
 8002b66:	4927      	ldr	r1, [pc, #156]	; (8002c04 <HAL_RCC_OscConfig+0x26c>)
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	600b      	str	r3, [r1, #0]
 8002b6c:	e015      	b.n	8002b9a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b6e:	4b26      	ldr	r3, [pc, #152]	; (8002c08 <HAL_RCC_OscConfig+0x270>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b74:	f7ff fc7a 	bl	800246c <HAL_GetTick>
 8002b78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b7a:	e008      	b.n	8002b8e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b7c:	f7ff fc76 	bl	800246c <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d901      	bls.n	8002b8e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e180      	b.n	8002e90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b8e:	4b1d      	ldr	r3, [pc, #116]	; (8002c04 <HAL_RCC_OscConfig+0x26c>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0302 	and.w	r3, r3, #2
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d1f0      	bne.n	8002b7c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0308 	and.w	r3, r3, #8
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d03a      	beq.n	8002c1c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	699b      	ldr	r3, [r3, #24]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d019      	beq.n	8002be2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bae:	4b17      	ldr	r3, [pc, #92]	; (8002c0c <HAL_RCC_OscConfig+0x274>)
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bb4:	f7ff fc5a 	bl	800246c <HAL_GetTick>
 8002bb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bba:	e008      	b.n	8002bce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bbc:	f7ff fc56 	bl	800246c <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d901      	bls.n	8002bce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e160      	b.n	8002e90 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bce:	4b0d      	ldr	r3, [pc, #52]	; (8002c04 <HAL_RCC_OscConfig+0x26c>)
 8002bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd2:	f003 0302 	and.w	r3, r3, #2
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d0f0      	beq.n	8002bbc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002bda:	2001      	movs	r0, #1
 8002bdc:	f000 face 	bl	800317c <RCC_Delay>
 8002be0:	e01c      	b.n	8002c1c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002be2:	4b0a      	ldr	r3, [pc, #40]	; (8002c0c <HAL_RCC_OscConfig+0x274>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002be8:	f7ff fc40 	bl	800246c <HAL_GetTick>
 8002bec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bee:	e00f      	b.n	8002c10 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bf0:	f7ff fc3c 	bl	800246c <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d908      	bls.n	8002c10 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e146      	b.n	8002e90 <HAL_RCC_OscConfig+0x4f8>
 8002c02:	bf00      	nop
 8002c04:	40021000 	.word	0x40021000
 8002c08:	42420000 	.word	0x42420000
 8002c0c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c10:	4b92      	ldr	r3, [pc, #584]	; (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c14:	f003 0302 	and.w	r3, r3, #2
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d1e9      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0304 	and.w	r3, r3, #4
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	f000 80a6 	beq.w	8002d76 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c2e:	4b8b      	ldr	r3, [pc, #556]	; (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002c30:	69db      	ldr	r3, [r3, #28]
 8002c32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d10d      	bne.n	8002c56 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c3a:	4b88      	ldr	r3, [pc, #544]	; (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002c3c:	69db      	ldr	r3, [r3, #28]
 8002c3e:	4a87      	ldr	r2, [pc, #540]	; (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002c40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c44:	61d3      	str	r3, [r2, #28]
 8002c46:	4b85      	ldr	r3, [pc, #532]	; (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002c48:	69db      	ldr	r3, [r3, #28]
 8002c4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c4e:	60bb      	str	r3, [r7, #8]
 8002c50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c52:	2301      	movs	r3, #1
 8002c54:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c56:	4b82      	ldr	r3, [pc, #520]	; (8002e60 <HAL_RCC_OscConfig+0x4c8>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d118      	bne.n	8002c94 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c62:	4b7f      	ldr	r3, [pc, #508]	; (8002e60 <HAL_RCC_OscConfig+0x4c8>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a7e      	ldr	r2, [pc, #504]	; (8002e60 <HAL_RCC_OscConfig+0x4c8>)
 8002c68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c6e:	f7ff fbfd 	bl	800246c <HAL_GetTick>
 8002c72:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c74:	e008      	b.n	8002c88 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c76:	f7ff fbf9 	bl	800246c <HAL_GetTick>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	2b64      	cmp	r3, #100	; 0x64
 8002c82:	d901      	bls.n	8002c88 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002c84:	2303      	movs	r3, #3
 8002c86:	e103      	b.n	8002e90 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c88:	4b75      	ldr	r3, [pc, #468]	; (8002e60 <HAL_RCC_OscConfig+0x4c8>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d0f0      	beq.n	8002c76 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d106      	bne.n	8002caa <HAL_RCC_OscConfig+0x312>
 8002c9c:	4b6f      	ldr	r3, [pc, #444]	; (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002c9e:	6a1b      	ldr	r3, [r3, #32]
 8002ca0:	4a6e      	ldr	r2, [pc, #440]	; (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002ca2:	f043 0301 	orr.w	r3, r3, #1
 8002ca6:	6213      	str	r3, [r2, #32]
 8002ca8:	e02d      	b.n	8002d06 <HAL_RCC_OscConfig+0x36e>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d10c      	bne.n	8002ccc <HAL_RCC_OscConfig+0x334>
 8002cb2:	4b6a      	ldr	r3, [pc, #424]	; (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002cb4:	6a1b      	ldr	r3, [r3, #32]
 8002cb6:	4a69      	ldr	r2, [pc, #420]	; (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002cb8:	f023 0301 	bic.w	r3, r3, #1
 8002cbc:	6213      	str	r3, [r2, #32]
 8002cbe:	4b67      	ldr	r3, [pc, #412]	; (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002cc0:	6a1b      	ldr	r3, [r3, #32]
 8002cc2:	4a66      	ldr	r2, [pc, #408]	; (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002cc4:	f023 0304 	bic.w	r3, r3, #4
 8002cc8:	6213      	str	r3, [r2, #32]
 8002cca:	e01c      	b.n	8002d06 <HAL_RCC_OscConfig+0x36e>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	2b05      	cmp	r3, #5
 8002cd2:	d10c      	bne.n	8002cee <HAL_RCC_OscConfig+0x356>
 8002cd4:	4b61      	ldr	r3, [pc, #388]	; (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002cd6:	6a1b      	ldr	r3, [r3, #32]
 8002cd8:	4a60      	ldr	r2, [pc, #384]	; (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002cda:	f043 0304 	orr.w	r3, r3, #4
 8002cde:	6213      	str	r3, [r2, #32]
 8002ce0:	4b5e      	ldr	r3, [pc, #376]	; (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002ce2:	6a1b      	ldr	r3, [r3, #32]
 8002ce4:	4a5d      	ldr	r2, [pc, #372]	; (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002ce6:	f043 0301 	orr.w	r3, r3, #1
 8002cea:	6213      	str	r3, [r2, #32]
 8002cec:	e00b      	b.n	8002d06 <HAL_RCC_OscConfig+0x36e>
 8002cee:	4b5b      	ldr	r3, [pc, #364]	; (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002cf0:	6a1b      	ldr	r3, [r3, #32]
 8002cf2:	4a5a      	ldr	r2, [pc, #360]	; (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002cf4:	f023 0301 	bic.w	r3, r3, #1
 8002cf8:	6213      	str	r3, [r2, #32]
 8002cfa:	4b58      	ldr	r3, [pc, #352]	; (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002cfc:	6a1b      	ldr	r3, [r3, #32]
 8002cfe:	4a57      	ldr	r2, [pc, #348]	; (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002d00:	f023 0304 	bic.w	r3, r3, #4
 8002d04:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d015      	beq.n	8002d3a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d0e:	f7ff fbad 	bl	800246c <HAL_GetTick>
 8002d12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d14:	e00a      	b.n	8002d2c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d16:	f7ff fba9 	bl	800246c <HAL_GetTick>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	1ad3      	subs	r3, r2, r3
 8002d20:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d901      	bls.n	8002d2c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002d28:	2303      	movs	r3, #3
 8002d2a:	e0b1      	b.n	8002e90 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d2c:	4b4b      	ldr	r3, [pc, #300]	; (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002d2e:	6a1b      	ldr	r3, [r3, #32]
 8002d30:	f003 0302 	and.w	r3, r3, #2
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d0ee      	beq.n	8002d16 <HAL_RCC_OscConfig+0x37e>
 8002d38:	e014      	b.n	8002d64 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d3a:	f7ff fb97 	bl	800246c <HAL_GetTick>
 8002d3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d40:	e00a      	b.n	8002d58 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d42:	f7ff fb93 	bl	800246c <HAL_GetTick>
 8002d46:	4602      	mov	r2, r0
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d901      	bls.n	8002d58 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002d54:	2303      	movs	r3, #3
 8002d56:	e09b      	b.n	8002e90 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d58:	4b40      	ldr	r3, [pc, #256]	; (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002d5a:	6a1b      	ldr	r3, [r3, #32]
 8002d5c:	f003 0302 	and.w	r3, r3, #2
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d1ee      	bne.n	8002d42 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002d64:	7dfb      	ldrb	r3, [r7, #23]
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d105      	bne.n	8002d76 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d6a:	4b3c      	ldr	r3, [pc, #240]	; (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002d6c:	69db      	ldr	r3, [r3, #28]
 8002d6e:	4a3b      	ldr	r2, [pc, #236]	; (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002d70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d74:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	69db      	ldr	r3, [r3, #28]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	f000 8087 	beq.w	8002e8e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d80:	4b36      	ldr	r3, [pc, #216]	; (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f003 030c 	and.w	r3, r3, #12
 8002d88:	2b08      	cmp	r3, #8
 8002d8a:	d061      	beq.n	8002e50 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	69db      	ldr	r3, [r3, #28]
 8002d90:	2b02      	cmp	r3, #2
 8002d92:	d146      	bne.n	8002e22 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d94:	4b33      	ldr	r3, [pc, #204]	; (8002e64 <HAL_RCC_OscConfig+0x4cc>)
 8002d96:	2200      	movs	r2, #0
 8002d98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d9a:	f7ff fb67 	bl	800246c <HAL_GetTick>
 8002d9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002da0:	e008      	b.n	8002db4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002da2:	f7ff fb63 	bl	800246c <HAL_GetTick>
 8002da6:	4602      	mov	r2, r0
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	1ad3      	subs	r3, r2, r3
 8002dac:	2b02      	cmp	r3, #2
 8002dae:	d901      	bls.n	8002db4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002db0:	2303      	movs	r3, #3
 8002db2:	e06d      	b.n	8002e90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002db4:	4b29      	ldr	r3, [pc, #164]	; (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d1f0      	bne.n	8002da2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6a1b      	ldr	r3, [r3, #32]
 8002dc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dc8:	d108      	bne.n	8002ddc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002dca:	4b24      	ldr	r3, [pc, #144]	; (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	4921      	ldr	r1, [pc, #132]	; (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ddc:	4b1f      	ldr	r3, [pc, #124]	; (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6a19      	ldr	r1, [r3, #32]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dec:	430b      	orrs	r3, r1
 8002dee:	491b      	ldr	r1, [pc, #108]	; (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002df0:	4313      	orrs	r3, r2
 8002df2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002df4:	4b1b      	ldr	r3, [pc, #108]	; (8002e64 <HAL_RCC_OscConfig+0x4cc>)
 8002df6:	2201      	movs	r2, #1
 8002df8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dfa:	f7ff fb37 	bl	800246c <HAL_GetTick>
 8002dfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e00:	e008      	b.n	8002e14 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e02:	f7ff fb33 	bl	800246c <HAL_GetTick>
 8002e06:	4602      	mov	r2, r0
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	2b02      	cmp	r3, #2
 8002e0e:	d901      	bls.n	8002e14 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002e10:	2303      	movs	r3, #3
 8002e12:	e03d      	b.n	8002e90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e14:	4b11      	ldr	r3, [pc, #68]	; (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d0f0      	beq.n	8002e02 <HAL_RCC_OscConfig+0x46a>
 8002e20:	e035      	b.n	8002e8e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e22:	4b10      	ldr	r3, [pc, #64]	; (8002e64 <HAL_RCC_OscConfig+0x4cc>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e28:	f7ff fb20 	bl	800246c <HAL_GetTick>
 8002e2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e2e:	e008      	b.n	8002e42 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e30:	f7ff fb1c 	bl	800246c <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d901      	bls.n	8002e42 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e026      	b.n	8002e90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e42:	4b06      	ldr	r3, [pc, #24]	; (8002e5c <HAL_RCC_OscConfig+0x4c4>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d1f0      	bne.n	8002e30 <HAL_RCC_OscConfig+0x498>
 8002e4e:	e01e      	b.n	8002e8e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	69db      	ldr	r3, [r3, #28]
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d107      	bne.n	8002e68 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e019      	b.n	8002e90 <HAL_RCC_OscConfig+0x4f8>
 8002e5c:	40021000 	.word	0x40021000
 8002e60:	40007000 	.word	0x40007000
 8002e64:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e68:	4b0b      	ldr	r3, [pc, #44]	; (8002e98 <HAL_RCC_OscConfig+0x500>)
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6a1b      	ldr	r3, [r3, #32]
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d106      	bne.n	8002e8a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d001      	beq.n	8002e8e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e000      	b.n	8002e90 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002e8e:	2300      	movs	r3, #0
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3718      	adds	r7, #24
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	40021000 	.word	0x40021000

08002e9c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b084      	sub	sp, #16
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d101      	bne.n	8002eb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e0d0      	b.n	8003052 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002eb0:	4b6a      	ldr	r3, [pc, #424]	; (800305c <HAL_RCC_ClockConfig+0x1c0>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0307 	and.w	r3, r3, #7
 8002eb8:	683a      	ldr	r2, [r7, #0]
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d910      	bls.n	8002ee0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ebe:	4b67      	ldr	r3, [pc, #412]	; (800305c <HAL_RCC_ClockConfig+0x1c0>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f023 0207 	bic.w	r2, r3, #7
 8002ec6:	4965      	ldr	r1, [pc, #404]	; (800305c <HAL_RCC_ClockConfig+0x1c0>)
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ece:	4b63      	ldr	r3, [pc, #396]	; (800305c <HAL_RCC_ClockConfig+0x1c0>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0307 	and.w	r3, r3, #7
 8002ed6:	683a      	ldr	r2, [r7, #0]
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d001      	beq.n	8002ee0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e0b8      	b.n	8003052 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0302 	and.w	r3, r3, #2
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d020      	beq.n	8002f2e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0304 	and.w	r3, r3, #4
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d005      	beq.n	8002f04 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ef8:	4b59      	ldr	r3, [pc, #356]	; (8003060 <HAL_RCC_ClockConfig+0x1c4>)
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	4a58      	ldr	r2, [pc, #352]	; (8003060 <HAL_RCC_ClockConfig+0x1c4>)
 8002efe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002f02:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 0308 	and.w	r3, r3, #8
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d005      	beq.n	8002f1c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f10:	4b53      	ldr	r3, [pc, #332]	; (8003060 <HAL_RCC_ClockConfig+0x1c4>)
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	4a52      	ldr	r2, [pc, #328]	; (8003060 <HAL_RCC_ClockConfig+0x1c4>)
 8002f16:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002f1a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f1c:	4b50      	ldr	r3, [pc, #320]	; (8003060 <HAL_RCC_ClockConfig+0x1c4>)
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	494d      	ldr	r1, [pc, #308]	; (8003060 <HAL_RCC_ClockConfig+0x1c4>)
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0301 	and.w	r3, r3, #1
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d040      	beq.n	8002fbc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d107      	bne.n	8002f52 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f42:	4b47      	ldr	r3, [pc, #284]	; (8003060 <HAL_RCC_ClockConfig+0x1c4>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d115      	bne.n	8002f7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e07f      	b.n	8003052 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	2b02      	cmp	r3, #2
 8002f58:	d107      	bne.n	8002f6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f5a:	4b41      	ldr	r3, [pc, #260]	; (8003060 <HAL_RCC_ClockConfig+0x1c4>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d109      	bne.n	8002f7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e073      	b.n	8003052 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f6a:	4b3d      	ldr	r3, [pc, #244]	; (8003060 <HAL_RCC_ClockConfig+0x1c4>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0302 	and.w	r3, r3, #2
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d101      	bne.n	8002f7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e06b      	b.n	8003052 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f7a:	4b39      	ldr	r3, [pc, #228]	; (8003060 <HAL_RCC_ClockConfig+0x1c4>)
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	f023 0203 	bic.w	r2, r3, #3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	4936      	ldr	r1, [pc, #216]	; (8003060 <HAL_RCC_ClockConfig+0x1c4>)
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f8c:	f7ff fa6e 	bl	800246c <HAL_GetTick>
 8002f90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f92:	e00a      	b.n	8002faa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f94:	f7ff fa6a 	bl	800246c <HAL_GetTick>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d901      	bls.n	8002faa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	e053      	b.n	8003052 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002faa:	4b2d      	ldr	r3, [pc, #180]	; (8003060 <HAL_RCC_ClockConfig+0x1c4>)
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f003 020c 	and.w	r2, r3, #12
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d1eb      	bne.n	8002f94 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002fbc:	4b27      	ldr	r3, [pc, #156]	; (800305c <HAL_RCC_ClockConfig+0x1c0>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 0307 	and.w	r3, r3, #7
 8002fc4:	683a      	ldr	r2, [r7, #0]
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d210      	bcs.n	8002fec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fca:	4b24      	ldr	r3, [pc, #144]	; (800305c <HAL_RCC_ClockConfig+0x1c0>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f023 0207 	bic.w	r2, r3, #7
 8002fd2:	4922      	ldr	r1, [pc, #136]	; (800305c <HAL_RCC_ClockConfig+0x1c0>)
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fda:	4b20      	ldr	r3, [pc, #128]	; (800305c <HAL_RCC_ClockConfig+0x1c0>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0307 	and.w	r3, r3, #7
 8002fe2:	683a      	ldr	r2, [r7, #0]
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d001      	beq.n	8002fec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e032      	b.n	8003052 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 0304 	and.w	r3, r3, #4
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d008      	beq.n	800300a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ff8:	4b19      	ldr	r3, [pc, #100]	; (8003060 <HAL_RCC_ClockConfig+0x1c4>)
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	4916      	ldr	r1, [pc, #88]	; (8003060 <HAL_RCC_ClockConfig+0x1c4>)
 8003006:	4313      	orrs	r3, r2
 8003008:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0308 	and.w	r3, r3, #8
 8003012:	2b00      	cmp	r3, #0
 8003014:	d009      	beq.n	800302a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003016:	4b12      	ldr	r3, [pc, #72]	; (8003060 <HAL_RCC_ClockConfig+0x1c4>)
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	691b      	ldr	r3, [r3, #16]
 8003022:	00db      	lsls	r3, r3, #3
 8003024:	490e      	ldr	r1, [pc, #56]	; (8003060 <HAL_RCC_ClockConfig+0x1c4>)
 8003026:	4313      	orrs	r3, r2
 8003028:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800302a:	f000 f821 	bl	8003070 <HAL_RCC_GetSysClockFreq>
 800302e:	4602      	mov	r2, r0
 8003030:	4b0b      	ldr	r3, [pc, #44]	; (8003060 <HAL_RCC_ClockConfig+0x1c4>)
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	091b      	lsrs	r3, r3, #4
 8003036:	f003 030f 	and.w	r3, r3, #15
 800303a:	490a      	ldr	r1, [pc, #40]	; (8003064 <HAL_RCC_ClockConfig+0x1c8>)
 800303c:	5ccb      	ldrb	r3, [r1, r3]
 800303e:	fa22 f303 	lsr.w	r3, r2, r3
 8003042:	4a09      	ldr	r2, [pc, #36]	; (8003068 <HAL_RCC_ClockConfig+0x1cc>)
 8003044:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003046:	4b09      	ldr	r3, [pc, #36]	; (800306c <HAL_RCC_ClockConfig+0x1d0>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4618      	mov	r0, r3
 800304c:	f7ff f9cc 	bl	80023e8 <HAL_InitTick>

  return HAL_OK;
 8003050:	2300      	movs	r3, #0
}
 8003052:	4618      	mov	r0, r3
 8003054:	3710      	adds	r7, #16
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	40022000 	.word	0x40022000
 8003060:	40021000 	.word	0x40021000
 8003064:	08007288 	.word	0x08007288
 8003068:	20000004 	.word	0x20000004
 800306c:	20000008 	.word	0x20000008

08003070 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003070:	b480      	push	{r7}
 8003072:	b087      	sub	sp, #28
 8003074:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003076:	2300      	movs	r3, #0
 8003078:	60fb      	str	r3, [r7, #12]
 800307a:	2300      	movs	r3, #0
 800307c:	60bb      	str	r3, [r7, #8]
 800307e:	2300      	movs	r3, #0
 8003080:	617b      	str	r3, [r7, #20]
 8003082:	2300      	movs	r3, #0
 8003084:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003086:	2300      	movs	r3, #0
 8003088:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800308a:	4b1e      	ldr	r3, [pc, #120]	; (8003104 <HAL_RCC_GetSysClockFreq+0x94>)
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f003 030c 	and.w	r3, r3, #12
 8003096:	2b04      	cmp	r3, #4
 8003098:	d002      	beq.n	80030a0 <HAL_RCC_GetSysClockFreq+0x30>
 800309a:	2b08      	cmp	r3, #8
 800309c:	d003      	beq.n	80030a6 <HAL_RCC_GetSysClockFreq+0x36>
 800309e:	e027      	b.n	80030f0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80030a0:	4b19      	ldr	r3, [pc, #100]	; (8003108 <HAL_RCC_GetSysClockFreq+0x98>)
 80030a2:	613b      	str	r3, [r7, #16]
      break;
 80030a4:	e027      	b.n	80030f6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	0c9b      	lsrs	r3, r3, #18
 80030aa:	f003 030f 	and.w	r3, r3, #15
 80030ae:	4a17      	ldr	r2, [pc, #92]	; (800310c <HAL_RCC_GetSysClockFreq+0x9c>)
 80030b0:	5cd3      	ldrb	r3, [r2, r3]
 80030b2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d010      	beq.n	80030e0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80030be:	4b11      	ldr	r3, [pc, #68]	; (8003104 <HAL_RCC_GetSysClockFreq+0x94>)
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	0c5b      	lsrs	r3, r3, #17
 80030c4:	f003 0301 	and.w	r3, r3, #1
 80030c8:	4a11      	ldr	r2, [pc, #68]	; (8003110 <HAL_RCC_GetSysClockFreq+0xa0>)
 80030ca:	5cd3      	ldrb	r3, [r2, r3]
 80030cc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a0d      	ldr	r2, [pc, #52]	; (8003108 <HAL_RCC_GetSysClockFreq+0x98>)
 80030d2:	fb03 f202 	mul.w	r2, r3, r2
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80030dc:	617b      	str	r3, [r7, #20]
 80030de:	e004      	b.n	80030ea <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	4a0c      	ldr	r2, [pc, #48]	; (8003114 <HAL_RCC_GetSysClockFreq+0xa4>)
 80030e4:	fb02 f303 	mul.w	r3, r2, r3
 80030e8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	613b      	str	r3, [r7, #16]
      break;
 80030ee:	e002      	b.n	80030f6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80030f0:	4b05      	ldr	r3, [pc, #20]	; (8003108 <HAL_RCC_GetSysClockFreq+0x98>)
 80030f2:	613b      	str	r3, [r7, #16]
      break;
 80030f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030f6:	693b      	ldr	r3, [r7, #16]
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	371c      	adds	r7, #28
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bc80      	pop	{r7}
 8003100:	4770      	bx	lr
 8003102:	bf00      	nop
 8003104:	40021000 	.word	0x40021000
 8003108:	007a1200 	.word	0x007a1200
 800310c:	080072a0 	.word	0x080072a0
 8003110:	080072b0 	.word	0x080072b0
 8003114:	003d0900 	.word	0x003d0900

08003118 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003118:	b480      	push	{r7}
 800311a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800311c:	4b02      	ldr	r3, [pc, #8]	; (8003128 <HAL_RCC_GetHCLKFreq+0x10>)
 800311e:	681b      	ldr	r3, [r3, #0]
}
 8003120:	4618      	mov	r0, r3
 8003122:	46bd      	mov	sp, r7
 8003124:	bc80      	pop	{r7}
 8003126:	4770      	bx	lr
 8003128:	20000004 	.word	0x20000004

0800312c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003130:	f7ff fff2 	bl	8003118 <HAL_RCC_GetHCLKFreq>
 8003134:	4602      	mov	r2, r0
 8003136:	4b05      	ldr	r3, [pc, #20]	; (800314c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	0a1b      	lsrs	r3, r3, #8
 800313c:	f003 0307 	and.w	r3, r3, #7
 8003140:	4903      	ldr	r1, [pc, #12]	; (8003150 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003142:	5ccb      	ldrb	r3, [r1, r3]
 8003144:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003148:	4618      	mov	r0, r3
 800314a:	bd80      	pop	{r7, pc}
 800314c:	40021000 	.word	0x40021000
 8003150:	08007298 	.word	0x08007298

08003154 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003158:	f7ff ffde 	bl	8003118 <HAL_RCC_GetHCLKFreq>
 800315c:	4602      	mov	r2, r0
 800315e:	4b05      	ldr	r3, [pc, #20]	; (8003174 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	0adb      	lsrs	r3, r3, #11
 8003164:	f003 0307 	and.w	r3, r3, #7
 8003168:	4903      	ldr	r1, [pc, #12]	; (8003178 <HAL_RCC_GetPCLK2Freq+0x24>)
 800316a:	5ccb      	ldrb	r3, [r1, r3]
 800316c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003170:	4618      	mov	r0, r3
 8003172:	bd80      	pop	{r7, pc}
 8003174:	40021000 	.word	0x40021000
 8003178:	08007298 	.word	0x08007298

0800317c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800317c:	b480      	push	{r7}
 800317e:	b085      	sub	sp, #20
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003184:	4b0a      	ldr	r3, [pc, #40]	; (80031b0 <RCC_Delay+0x34>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a0a      	ldr	r2, [pc, #40]	; (80031b4 <RCC_Delay+0x38>)
 800318a:	fba2 2303 	umull	r2, r3, r2, r3
 800318e:	0a5b      	lsrs	r3, r3, #9
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	fb02 f303 	mul.w	r3, r2, r3
 8003196:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003198:	bf00      	nop
  }
  while (Delay --);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	1e5a      	subs	r2, r3, #1
 800319e:	60fa      	str	r2, [r7, #12]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d1f9      	bne.n	8003198 <RCC_Delay+0x1c>
}
 80031a4:	bf00      	nop
 80031a6:	bf00      	nop
 80031a8:	3714      	adds	r7, #20
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bc80      	pop	{r7}
 80031ae:	4770      	bx	lr
 80031b0:	20000004 	.word	0x20000004
 80031b4:	10624dd3 	.word	0x10624dd3

080031b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d101      	bne.n	80031ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e042      	b.n	8003250 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d106      	bne.n	80031e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2200      	movs	r2, #0
 80031da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f7fe ff8e 	bl	8002100 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2224      	movs	r2, #36	; 0x24
 80031e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	68da      	ldr	r2, [r3, #12]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80031fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f000 f91d 	bl	800343c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	691a      	ldr	r2, [r3, #16]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003210:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	695a      	ldr	r2, [r3, #20]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003220:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	68da      	ldr	r2, [r3, #12]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003230:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2200      	movs	r2, #0
 8003236:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2220      	movs	r2, #32
 800323c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2220      	movs	r2, #32
 8003244:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800324e:	2300      	movs	r3, #0
}
 8003250:	4618      	mov	r0, r3
 8003252:	3708      	adds	r7, #8
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}

08003258 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b08a      	sub	sp, #40	; 0x28
 800325c:	af02      	add	r7, sp, #8
 800325e:	60f8      	str	r0, [r7, #12]
 8003260:	60b9      	str	r1, [r7, #8]
 8003262:	603b      	str	r3, [r7, #0]
 8003264:	4613      	mov	r3, r2
 8003266:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003268:	2300      	movs	r3, #0
 800326a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003272:	b2db      	uxtb	r3, r3
 8003274:	2b20      	cmp	r3, #32
 8003276:	d16d      	bne.n	8003354 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d002      	beq.n	8003284 <HAL_UART_Transmit+0x2c>
 800327e:	88fb      	ldrh	r3, [r7, #6]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d101      	bne.n	8003288 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e066      	b.n	8003356 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2200      	movs	r2, #0
 800328c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2221      	movs	r2, #33	; 0x21
 8003292:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003296:	f7ff f8e9 	bl	800246c <HAL_GetTick>
 800329a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	88fa      	ldrh	r2, [r7, #6]
 80032a0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	88fa      	ldrh	r2, [r7, #6]
 80032a6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032b0:	d108      	bne.n	80032c4 <HAL_UART_Transmit+0x6c>
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	691b      	ldr	r3, [r3, #16]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d104      	bne.n	80032c4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80032ba:	2300      	movs	r3, #0
 80032bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	61bb      	str	r3, [r7, #24]
 80032c2:	e003      	b.n	80032cc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80032c8:	2300      	movs	r3, #0
 80032ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80032cc:	e02a      	b.n	8003324 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	9300      	str	r3, [sp, #0]
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	2200      	movs	r2, #0
 80032d6:	2180      	movs	r1, #128	; 0x80
 80032d8:	68f8      	ldr	r0, [r7, #12]
 80032da:	f000 f840 	bl	800335e <UART_WaitOnFlagUntilTimeout>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d001      	beq.n	80032e8 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80032e4:	2303      	movs	r3, #3
 80032e6:	e036      	b.n	8003356 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80032e8:	69fb      	ldr	r3, [r7, #28]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d10b      	bne.n	8003306 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80032ee:	69bb      	ldr	r3, [r7, #24]
 80032f0:	881b      	ldrh	r3, [r3, #0]
 80032f2:	461a      	mov	r2, r3
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032fc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80032fe:	69bb      	ldr	r3, [r7, #24]
 8003300:	3302      	adds	r3, #2
 8003302:	61bb      	str	r3, [r7, #24]
 8003304:	e007      	b.n	8003316 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	781a      	ldrb	r2, [r3, #0]
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003310:	69fb      	ldr	r3, [r7, #28]
 8003312:	3301      	adds	r3, #1
 8003314:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800331a:	b29b      	uxth	r3, r3
 800331c:	3b01      	subs	r3, #1
 800331e:	b29a      	uxth	r2, r3
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003328:	b29b      	uxth	r3, r3
 800332a:	2b00      	cmp	r3, #0
 800332c:	d1cf      	bne.n	80032ce <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	9300      	str	r3, [sp, #0]
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	2200      	movs	r2, #0
 8003336:	2140      	movs	r1, #64	; 0x40
 8003338:	68f8      	ldr	r0, [r7, #12]
 800333a:	f000 f810 	bl	800335e <UART_WaitOnFlagUntilTimeout>
 800333e:	4603      	mov	r3, r0
 8003340:	2b00      	cmp	r3, #0
 8003342:	d001      	beq.n	8003348 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003344:	2303      	movs	r3, #3
 8003346:	e006      	b.n	8003356 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2220      	movs	r2, #32
 800334c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003350:	2300      	movs	r3, #0
 8003352:	e000      	b.n	8003356 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003354:	2302      	movs	r3, #2
  }
}
 8003356:	4618      	mov	r0, r3
 8003358:	3720      	adds	r7, #32
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}

0800335e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800335e:	b580      	push	{r7, lr}
 8003360:	b090      	sub	sp, #64	; 0x40
 8003362:	af00      	add	r7, sp, #0
 8003364:	60f8      	str	r0, [r7, #12]
 8003366:	60b9      	str	r1, [r7, #8]
 8003368:	603b      	str	r3, [r7, #0]
 800336a:	4613      	mov	r3, r2
 800336c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800336e:	e050      	b.n	8003412 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003370:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003372:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003376:	d04c      	beq.n	8003412 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003378:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800337a:	2b00      	cmp	r3, #0
 800337c:	d007      	beq.n	800338e <UART_WaitOnFlagUntilTimeout+0x30>
 800337e:	f7ff f875 	bl	800246c <HAL_GetTick>
 8003382:	4602      	mov	r2, r0
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800338a:	429a      	cmp	r2, r3
 800338c:	d241      	bcs.n	8003412 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	330c      	adds	r3, #12
 8003394:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003398:	e853 3f00 	ldrex	r3, [r3]
 800339c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800339e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80033a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	330c      	adds	r3, #12
 80033ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80033ae:	637a      	str	r2, [r7, #52]	; 0x34
 80033b0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80033b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80033b6:	e841 2300 	strex	r3, r2, [r1]
 80033ba:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80033bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d1e5      	bne.n	800338e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	3314      	adds	r3, #20
 80033c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	e853 3f00 	ldrex	r3, [r3]
 80033d0:	613b      	str	r3, [r7, #16]
   return(result);
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	f023 0301 	bic.w	r3, r3, #1
 80033d8:	63bb      	str	r3, [r7, #56]	; 0x38
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	3314      	adds	r3, #20
 80033e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80033e2:	623a      	str	r2, [r7, #32]
 80033e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033e6:	69f9      	ldr	r1, [r7, #28]
 80033e8:	6a3a      	ldr	r2, [r7, #32]
 80033ea:	e841 2300 	strex	r3, r2, [r1]
 80033ee:	61bb      	str	r3, [r7, #24]
   return(result);
 80033f0:	69bb      	ldr	r3, [r7, #24]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d1e5      	bne.n	80033c2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2220      	movs	r2, #32
 80033fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2220      	movs	r2, #32
 8003402:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2200      	movs	r2, #0
 800340a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e00f      	b.n	8003432 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	4013      	ands	r3, r2
 800341c:	68ba      	ldr	r2, [r7, #8]
 800341e:	429a      	cmp	r2, r3
 8003420:	bf0c      	ite	eq
 8003422:	2301      	moveq	r3, #1
 8003424:	2300      	movne	r3, #0
 8003426:	b2db      	uxtb	r3, r3
 8003428:	461a      	mov	r2, r3
 800342a:	79fb      	ldrb	r3, [r7, #7]
 800342c:	429a      	cmp	r2, r3
 800342e:	d09f      	beq.n	8003370 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003430:	2300      	movs	r3, #0
}
 8003432:	4618      	mov	r0, r3
 8003434:	3740      	adds	r7, #64	; 0x40
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
	...

0800343c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b084      	sub	sp, #16
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	691b      	ldr	r3, [r3, #16]
 800344a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	68da      	ldr	r2, [r3, #12]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	430a      	orrs	r2, r1
 8003458:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	689a      	ldr	r2, [r3, #8]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	691b      	ldr	r3, [r3, #16]
 8003462:	431a      	orrs	r2, r3
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	695b      	ldr	r3, [r3, #20]
 8003468:	4313      	orrs	r3, r2
 800346a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003476:	f023 030c 	bic.w	r3, r3, #12
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	6812      	ldr	r2, [r2, #0]
 800347e:	68b9      	ldr	r1, [r7, #8]
 8003480:	430b      	orrs	r3, r1
 8003482:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	695b      	ldr	r3, [r3, #20]
 800348a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	699a      	ldr	r2, [r3, #24]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	430a      	orrs	r2, r1
 8003498:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a2c      	ldr	r2, [pc, #176]	; (8003550 <UART_SetConfig+0x114>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d103      	bne.n	80034ac <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80034a4:	f7ff fe56 	bl	8003154 <HAL_RCC_GetPCLK2Freq>
 80034a8:	60f8      	str	r0, [r7, #12]
 80034aa:	e002      	b.n	80034b2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80034ac:	f7ff fe3e 	bl	800312c <HAL_RCC_GetPCLK1Freq>
 80034b0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80034b2:	68fa      	ldr	r2, [r7, #12]
 80034b4:	4613      	mov	r3, r2
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	4413      	add	r3, r2
 80034ba:	009a      	lsls	r2, r3, #2
 80034bc:	441a      	add	r2, r3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80034c8:	4a22      	ldr	r2, [pc, #136]	; (8003554 <UART_SetConfig+0x118>)
 80034ca:	fba2 2303 	umull	r2, r3, r2, r3
 80034ce:	095b      	lsrs	r3, r3, #5
 80034d0:	0119      	lsls	r1, r3, #4
 80034d2:	68fa      	ldr	r2, [r7, #12]
 80034d4:	4613      	mov	r3, r2
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	4413      	add	r3, r2
 80034da:	009a      	lsls	r2, r3, #2
 80034dc:	441a      	add	r2, r3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80034e8:	4b1a      	ldr	r3, [pc, #104]	; (8003554 <UART_SetConfig+0x118>)
 80034ea:	fba3 0302 	umull	r0, r3, r3, r2
 80034ee:	095b      	lsrs	r3, r3, #5
 80034f0:	2064      	movs	r0, #100	; 0x64
 80034f2:	fb00 f303 	mul.w	r3, r0, r3
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	011b      	lsls	r3, r3, #4
 80034fa:	3332      	adds	r3, #50	; 0x32
 80034fc:	4a15      	ldr	r2, [pc, #84]	; (8003554 <UART_SetConfig+0x118>)
 80034fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003502:	095b      	lsrs	r3, r3, #5
 8003504:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003508:	4419      	add	r1, r3
 800350a:	68fa      	ldr	r2, [r7, #12]
 800350c:	4613      	mov	r3, r2
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	4413      	add	r3, r2
 8003512:	009a      	lsls	r2, r3, #2
 8003514:	441a      	add	r2, r3
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003520:	4b0c      	ldr	r3, [pc, #48]	; (8003554 <UART_SetConfig+0x118>)
 8003522:	fba3 0302 	umull	r0, r3, r3, r2
 8003526:	095b      	lsrs	r3, r3, #5
 8003528:	2064      	movs	r0, #100	; 0x64
 800352a:	fb00 f303 	mul.w	r3, r0, r3
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	011b      	lsls	r3, r3, #4
 8003532:	3332      	adds	r3, #50	; 0x32
 8003534:	4a07      	ldr	r2, [pc, #28]	; (8003554 <UART_SetConfig+0x118>)
 8003536:	fba2 2303 	umull	r2, r3, r2, r3
 800353a:	095b      	lsrs	r3, r3, #5
 800353c:	f003 020f 	and.w	r2, r3, #15
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	440a      	add	r2, r1
 8003546:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003548:	bf00      	nop
 800354a:	3710      	adds	r7, #16
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}
 8003550:	40013800 	.word	0x40013800
 8003554:	51eb851f 	.word	0x51eb851f

08003558 <LL_GPIO_SetPinMode>:
{
 8003558:	b490      	push	{r4, r7}
 800355a:	b088      	sub	sp, #32
 800355c:	af00      	add	r7, sp, #0
 800355e:	60f8      	str	r0, [r7, #12]
 8003560:	60b9      	str	r1, [r7, #8]
 8003562:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	461a      	mov	r2, r3
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	0e1b      	lsrs	r3, r3, #24
 800356c:	4413      	add	r3, r2
 800356e:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8003570:	6822      	ldr	r2, [r4, #0]
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	fa93 f3a3 	rbit	r3, r3
 800357c:	613b      	str	r3, [r7, #16]
  return result;
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	fab3 f383 	clz	r3, r3
 8003584:	b2db      	uxtb	r3, r3
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	210f      	movs	r1, #15
 800358a:	fa01 f303 	lsl.w	r3, r1, r3
 800358e:	43db      	mvns	r3, r3
 8003590:	401a      	ands	r2, r3
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	fa93 f3a3 	rbit	r3, r3
 800359c:	61bb      	str	r3, [r7, #24]
  return result;
 800359e:	69bb      	ldr	r3, [r7, #24]
 80035a0:	fab3 f383 	clz	r3, r3
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	6879      	ldr	r1, [r7, #4]
 80035aa:	fa01 f303 	lsl.w	r3, r1, r3
 80035ae:	4313      	orrs	r3, r2
 80035b0:	6023      	str	r3, [r4, #0]
}
 80035b2:	bf00      	nop
 80035b4:	3720      	adds	r7, #32
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bc90      	pop	{r4, r7}
 80035ba:	4770      	bx	lr

080035bc <LL_GPIO_SetPinSpeed>:
{
 80035bc:	b490      	push	{r4, r7}
 80035be:	b088      	sub	sp, #32
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	60f8      	str	r0, [r7, #12]
 80035c4:	60b9      	str	r1, [r7, #8]
 80035c6:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	461a      	mov	r2, r3
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	0e1b      	lsrs	r3, r3, #24
 80035d0:	4413      	add	r3, r2
 80035d2:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 80035d4:	6822      	ldr	r2, [r4, #0]
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	fa93 f3a3 	rbit	r3, r3
 80035e0:	613b      	str	r3, [r7, #16]
  return result;
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	fab3 f383 	clz	r3, r3
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	2103      	movs	r1, #3
 80035ee:	fa01 f303 	lsl.w	r3, r1, r3
 80035f2:	43db      	mvns	r3, r3
 80035f4:	401a      	ands	r2, r3
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	fa93 f3a3 	rbit	r3, r3
 8003600:	61bb      	str	r3, [r7, #24]
  return result;
 8003602:	69bb      	ldr	r3, [r7, #24]
 8003604:	fab3 f383 	clz	r3, r3
 8003608:	b2db      	uxtb	r3, r3
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	6879      	ldr	r1, [r7, #4]
 800360e:	fa01 f303 	lsl.w	r3, r1, r3
 8003612:	4313      	orrs	r3, r2
 8003614:	6023      	str	r3, [r4, #0]
}
 8003616:	bf00      	nop
 8003618:	3720      	adds	r7, #32
 800361a:	46bd      	mov	sp, r7
 800361c:	bc90      	pop	{r4, r7}
 800361e:	4770      	bx	lr

08003620 <LL_GPIO_SetPinOutputType>:
{
 8003620:	b490      	push	{r4, r7}
 8003622:	b088      	sub	sp, #32
 8003624:	af00      	add	r7, sp, #0
 8003626:	60f8      	str	r0, [r7, #12]
 8003628:	60b9      	str	r1, [r7, #8]
 800362a:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	461a      	mov	r2, r3
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	0e1b      	lsrs	r3, r3, #24
 8003634:	4413      	add	r3, r2
 8003636:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 8003638:	6822      	ldr	r2, [r4, #0]
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	fa93 f3a3 	rbit	r3, r3
 8003644:	613b      	str	r3, [r7, #16]
  return result;
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	fab3 f383 	clz	r3, r3
 800364c:	b2db      	uxtb	r3, r3
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	2104      	movs	r1, #4
 8003652:	fa01 f303 	lsl.w	r3, r1, r3
 8003656:	43db      	mvns	r3, r3
 8003658:	401a      	ands	r2, r3
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	fa93 f3a3 	rbit	r3, r3
 8003664:	61bb      	str	r3, [r7, #24]
  return result;
 8003666:	69bb      	ldr	r3, [r7, #24]
 8003668:	fab3 f383 	clz	r3, r3
 800366c:	b2db      	uxtb	r3, r3
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	6879      	ldr	r1, [r7, #4]
 8003672:	fa01 f303 	lsl.w	r3, r1, r3
 8003676:	4313      	orrs	r3, r2
 8003678:	6023      	str	r3, [r4, #0]
}
 800367a:	bf00      	nop
 800367c:	3720      	adds	r7, #32
 800367e:	46bd      	mov	sp, r7
 8003680:	bc90      	pop	{r4, r7}
 8003682:	4770      	bx	lr

08003684 <LL_GPIO_SetPinPull>:
{
 8003684:	b480      	push	{r7}
 8003686:	b087      	sub	sp, #28
 8003688:	af00      	add	r7, sp, #0
 800368a:	60f8      	str	r0, [r7, #12]
 800368c:	60b9      	str	r1, [r7, #8]
 800368e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	68da      	ldr	r2, [r3, #12]
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	0a1b      	lsrs	r3, r3, #8
 8003698:	43db      	mvns	r3, r3
 800369a:	401a      	ands	r2, r3
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	0a1b      	lsrs	r3, r3, #8
 80036a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	fa93 f3a3 	rbit	r3, r3
 80036a8:	613b      	str	r3, [r7, #16]
  return result;
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	fab3 f383 	clz	r3, r3
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	4619      	mov	r1, r3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	408b      	lsls	r3, r1
 80036b8:	431a      	orrs	r2, r3
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	60da      	str	r2, [r3, #12]
}
 80036be:	bf00      	nop
 80036c0:	371c      	adds	r7, #28
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bc80      	pop	{r7}
 80036c6:	4770      	bx	lr

080036c8 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b088      	sub	sp, #32
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	021b      	lsls	r3, r3, #8
 80036d8:	0c1b      	lsrs	r3, r3, #16
 80036da:	617b      	str	r3, [r7, #20]
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	fa93 f3a3 	rbit	r3, r3
 80036e6:	60fb      	str	r3, [r7, #12]
  return result;
 80036e8:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 80036ea:	fab3 f383 	clz	r3, r3
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 80036f2:	e044      	b.n	800377e <LL_GPIO_Init+0xb6>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 80036f4:	2201      	movs	r2, #1
 80036f6:	69fb      	ldr	r3, [r7, #28]
 80036f8:	409a      	lsls	r2, r3
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	4013      	ands	r3, r2
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d03a      	beq.n	8003778 <LL_GPIO_Init+0xb0>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	2b07      	cmp	r3, #7
 8003706:	d806      	bhi.n	8003716 <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 8003708:	f240 1201 	movw	r2, #257	; 0x101
 800370c:	69fb      	ldr	r3, [r7, #28]
 800370e:	fa02 f303 	lsl.w	r3, r2, r3
 8003712:	61bb      	str	r3, [r7, #24]
 8003714:	e008      	b.n	8003728 <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	3b08      	subs	r3, #8
 800371a:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 800371e:	fa02 f303 	lsl.w	r3, r2, r3
 8003722:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003726:	61bb      	str	r3, [r7, #24]
      }

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_INPUT)
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	2b08      	cmp	r3, #8
 800372e:	d106      	bne.n	800373e <LL_GPIO_Init+0x76>
      {
        /* Check The Pull parameter */
        assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

        /* Pull-up Pull-down resistor configuration*/
        LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	691b      	ldr	r3, [r3, #16]
 8003734:	461a      	mov	r2, r3
 8003736:	69b9      	ldr	r1, [r7, #24]
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	f7ff ffa3 	bl	8003684 <LL_GPIO_SetPinPull>
      
      /* Check Pin Mode parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	461a      	mov	r2, r3
 8003744:	69b9      	ldr	r1, [r7, #24]
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f7ff ff06 	bl	8003558 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	2b01      	cmp	r3, #1
 8003752:	d003      	beq.n	800375c <LL_GPIO_Init+0x94>
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	2b09      	cmp	r3, #9
 800375a:	d10d      	bne.n	8003778 <LL_GPIO_Init+0xb0>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	461a      	mov	r2, r3
 8003762:	69b9      	ldr	r1, [r7, #24]
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	f7ff ff29 	bl	80035bc <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	461a      	mov	r2, r3
 8003770:	69b9      	ldr	r1, [r7, #24]
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f7ff ff54 	bl	8003620 <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 8003778:	69fb      	ldr	r3, [r7, #28]
 800377a:	3301      	adds	r3, #1
 800377c:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 800377e:	697a      	ldr	r2, [r7, #20]
 8003780:	69fb      	ldr	r3, [r7, #28]
 8003782:	fa22 f303 	lsr.w	r3, r2, r3
 8003786:	2b00      	cmp	r3, #0
 8003788:	d1b4      	bne.n	80036f4 <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 800378a:	2300      	movs	r3, #0
}
 800378c:	4618      	mov	r0, r3
 800378e:	3720      	adds	r7, #32
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}

08003794 <LL_SPI_IsEnabled>:
{
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037a4:	2b40      	cmp	r3, #64	; 0x40
 80037a6:	d101      	bne.n	80037ac <LL_SPI_IsEnabled+0x18>
 80037a8:	2301      	movs	r3, #1
 80037aa:	e000      	b.n	80037ae <LL_SPI_IsEnabled+0x1a>
 80037ac:	2300      	movs	r3, #0
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	370c      	adds	r7, #12
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bc80      	pop	{r7}
 80037b6:	4770      	bx	lr

080037b8 <LL_SPI_SetCRCPolynomial>:
{
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
 80037c0:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	461a      	mov	r2, r3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	611a      	str	r2, [r3, #16]
}
 80037cc:	bf00      	nop
 80037ce:	370c      	adds	r7, #12
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bc80      	pop	{r7}
 80037d4:	4770      	bx	lr

080037d6 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 80037d6:	b580      	push	{r7, lr}
 80037d8:	b084      	sub	sp, #16
 80037da:	af00      	add	r7, sp, #0
 80037dc:	6078      	str	r0, [r7, #4]
 80037de:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f7ff ffd5 	bl	8003794 <LL_SPI_IsEnabled>
 80037ea:	4603      	mov	r3, r0
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d139      	bne.n	8003864 <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80037f8:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 80037fc:	683a      	ldr	r2, [r7, #0]
 80037fe:	6811      	ldr	r1, [r2, #0]
 8003800:	683a      	ldr	r2, [r7, #0]
 8003802:	6852      	ldr	r2, [r2, #4]
 8003804:	4311      	orrs	r1, r2
 8003806:	683a      	ldr	r2, [r7, #0]
 8003808:	6892      	ldr	r2, [r2, #8]
 800380a:	4311      	orrs	r1, r2
 800380c:	683a      	ldr	r2, [r7, #0]
 800380e:	68d2      	ldr	r2, [r2, #12]
 8003810:	4311      	orrs	r1, r2
 8003812:	683a      	ldr	r2, [r7, #0]
 8003814:	6912      	ldr	r2, [r2, #16]
 8003816:	4311      	orrs	r1, r2
 8003818:	683a      	ldr	r2, [r7, #0]
 800381a:	6952      	ldr	r2, [r2, #20]
 800381c:	4311      	orrs	r1, r2
 800381e:	683a      	ldr	r2, [r7, #0]
 8003820:	6992      	ldr	r2, [r2, #24]
 8003822:	4311      	orrs	r1, r2
 8003824:	683a      	ldr	r2, [r7, #0]
 8003826:	69d2      	ldr	r2, [r2, #28]
 8003828:	4311      	orrs	r1, r2
 800382a:	683a      	ldr	r2, [r7, #0]
 800382c:	6a12      	ldr	r2, [r2, #32]
 800382e:	430a      	orrs	r2, r1
 8003830:	431a      	orrs	r2, r3
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	f023 0204 	bic.w	r2, r3, #4
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	695b      	ldr	r3, [r3, #20]
 8003842:	0c1b      	lsrs	r3, r3, #16
 8003844:	431a      	orrs	r2, r3
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	6a1b      	ldr	r3, [r3, #32]
 800384e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003852:	d105      	bne.n	8003860 <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003858:	4619      	mov	r1, r3
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f7ff ffac 	bl	80037b8 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8003860:	2300      	movs	r3, #0
 8003862:	73fb      	strb	r3, [r7, #15]

#if defined (SPI_I2S_SUPPORT)
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2S_SUPPORT */
  return status;
 8003864:	7bfb      	ldrb	r3, [r7, #15]
}
 8003866:	4618      	mov	r0, r3
 8003868:	3710      	adds	r7, #16
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}

0800386e <__cvt>:
 800386e:	2b00      	cmp	r3, #0
 8003870:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003874:	461f      	mov	r7, r3
 8003876:	bfbb      	ittet	lt
 8003878:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800387c:	461f      	movlt	r7, r3
 800387e:	2300      	movge	r3, #0
 8003880:	232d      	movlt	r3, #45	; 0x2d
 8003882:	b088      	sub	sp, #32
 8003884:	4614      	mov	r4, r2
 8003886:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003888:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800388a:	7013      	strb	r3, [r2, #0]
 800388c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800388e:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8003892:	f023 0820 	bic.w	r8, r3, #32
 8003896:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800389a:	d005      	beq.n	80038a8 <__cvt+0x3a>
 800389c:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80038a0:	d100      	bne.n	80038a4 <__cvt+0x36>
 80038a2:	3501      	adds	r5, #1
 80038a4:	2302      	movs	r3, #2
 80038a6:	e000      	b.n	80038aa <__cvt+0x3c>
 80038a8:	2303      	movs	r3, #3
 80038aa:	aa07      	add	r2, sp, #28
 80038ac:	9204      	str	r2, [sp, #16]
 80038ae:	aa06      	add	r2, sp, #24
 80038b0:	e9cd a202 	strd	sl, r2, [sp, #8]
 80038b4:	e9cd 3500 	strd	r3, r5, [sp]
 80038b8:	4622      	mov	r2, r4
 80038ba:	463b      	mov	r3, r7
 80038bc:	f000 ff54 	bl	8004768 <_dtoa_r>
 80038c0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80038c4:	4606      	mov	r6, r0
 80038c6:	d102      	bne.n	80038ce <__cvt+0x60>
 80038c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80038ca:	07db      	lsls	r3, r3, #31
 80038cc:	d522      	bpl.n	8003914 <__cvt+0xa6>
 80038ce:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80038d2:	eb06 0905 	add.w	r9, r6, r5
 80038d6:	d110      	bne.n	80038fa <__cvt+0x8c>
 80038d8:	7833      	ldrb	r3, [r6, #0]
 80038da:	2b30      	cmp	r3, #48	; 0x30
 80038dc:	d10a      	bne.n	80038f4 <__cvt+0x86>
 80038de:	2200      	movs	r2, #0
 80038e0:	2300      	movs	r3, #0
 80038e2:	4620      	mov	r0, r4
 80038e4:	4639      	mov	r1, r7
 80038e6:	f7fd f85f 	bl	80009a8 <__aeabi_dcmpeq>
 80038ea:	b918      	cbnz	r0, 80038f4 <__cvt+0x86>
 80038ec:	f1c5 0501 	rsb	r5, r5, #1
 80038f0:	f8ca 5000 	str.w	r5, [sl]
 80038f4:	f8da 3000 	ldr.w	r3, [sl]
 80038f8:	4499      	add	r9, r3
 80038fa:	2200      	movs	r2, #0
 80038fc:	2300      	movs	r3, #0
 80038fe:	4620      	mov	r0, r4
 8003900:	4639      	mov	r1, r7
 8003902:	f7fd f851 	bl	80009a8 <__aeabi_dcmpeq>
 8003906:	b108      	cbz	r0, 800390c <__cvt+0x9e>
 8003908:	f8cd 901c 	str.w	r9, [sp, #28]
 800390c:	2230      	movs	r2, #48	; 0x30
 800390e:	9b07      	ldr	r3, [sp, #28]
 8003910:	454b      	cmp	r3, r9
 8003912:	d307      	bcc.n	8003924 <__cvt+0xb6>
 8003914:	4630      	mov	r0, r6
 8003916:	9b07      	ldr	r3, [sp, #28]
 8003918:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800391a:	1b9b      	subs	r3, r3, r6
 800391c:	6013      	str	r3, [r2, #0]
 800391e:	b008      	add	sp, #32
 8003920:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003924:	1c59      	adds	r1, r3, #1
 8003926:	9107      	str	r1, [sp, #28]
 8003928:	701a      	strb	r2, [r3, #0]
 800392a:	e7f0      	b.n	800390e <__cvt+0xa0>

0800392c <__exponent>:
 800392c:	4603      	mov	r3, r0
 800392e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003930:	2900      	cmp	r1, #0
 8003932:	f803 2b02 	strb.w	r2, [r3], #2
 8003936:	bfb6      	itet	lt
 8003938:	222d      	movlt	r2, #45	; 0x2d
 800393a:	222b      	movge	r2, #43	; 0x2b
 800393c:	4249      	neglt	r1, r1
 800393e:	2909      	cmp	r1, #9
 8003940:	7042      	strb	r2, [r0, #1]
 8003942:	dd2a      	ble.n	800399a <__exponent+0x6e>
 8003944:	f10d 0207 	add.w	r2, sp, #7
 8003948:	4617      	mov	r7, r2
 800394a:	260a      	movs	r6, #10
 800394c:	fb91 f5f6 	sdiv	r5, r1, r6
 8003950:	4694      	mov	ip, r2
 8003952:	fb06 1415 	mls	r4, r6, r5, r1
 8003956:	3430      	adds	r4, #48	; 0x30
 8003958:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800395c:	460c      	mov	r4, r1
 800395e:	2c63      	cmp	r4, #99	; 0x63
 8003960:	4629      	mov	r1, r5
 8003962:	f102 32ff 	add.w	r2, r2, #4294967295
 8003966:	dcf1      	bgt.n	800394c <__exponent+0x20>
 8003968:	3130      	adds	r1, #48	; 0x30
 800396a:	f1ac 0402 	sub.w	r4, ip, #2
 800396e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003972:	4622      	mov	r2, r4
 8003974:	1c41      	adds	r1, r0, #1
 8003976:	42ba      	cmp	r2, r7
 8003978:	d30a      	bcc.n	8003990 <__exponent+0x64>
 800397a:	f10d 0209 	add.w	r2, sp, #9
 800397e:	eba2 020c 	sub.w	r2, r2, ip
 8003982:	42bc      	cmp	r4, r7
 8003984:	bf88      	it	hi
 8003986:	2200      	movhi	r2, #0
 8003988:	4413      	add	r3, r2
 800398a:	1a18      	subs	r0, r3, r0
 800398c:	b003      	add	sp, #12
 800398e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003990:	f812 5b01 	ldrb.w	r5, [r2], #1
 8003994:	f801 5f01 	strb.w	r5, [r1, #1]!
 8003998:	e7ed      	b.n	8003976 <__exponent+0x4a>
 800399a:	2330      	movs	r3, #48	; 0x30
 800399c:	3130      	adds	r1, #48	; 0x30
 800399e:	7083      	strb	r3, [r0, #2]
 80039a0:	70c1      	strb	r1, [r0, #3]
 80039a2:	1d03      	adds	r3, r0, #4
 80039a4:	e7f1      	b.n	800398a <__exponent+0x5e>
	...

080039a8 <_printf_float>:
 80039a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039ac:	b091      	sub	sp, #68	; 0x44
 80039ae:	460c      	mov	r4, r1
 80039b0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80039b4:	4616      	mov	r6, r2
 80039b6:	461f      	mov	r7, r3
 80039b8:	4605      	mov	r5, r0
 80039ba:	f000 fdc7 	bl	800454c <_localeconv_r>
 80039be:	6803      	ldr	r3, [r0, #0]
 80039c0:	4618      	mov	r0, r3
 80039c2:	9309      	str	r3, [sp, #36]	; 0x24
 80039c4:	f7fc fbc4 	bl	8000150 <strlen>
 80039c8:	2300      	movs	r3, #0
 80039ca:	930e      	str	r3, [sp, #56]	; 0x38
 80039cc:	f8d8 3000 	ldr.w	r3, [r8]
 80039d0:	900a      	str	r0, [sp, #40]	; 0x28
 80039d2:	3307      	adds	r3, #7
 80039d4:	f023 0307 	bic.w	r3, r3, #7
 80039d8:	f103 0208 	add.w	r2, r3, #8
 80039dc:	f894 9018 	ldrb.w	r9, [r4, #24]
 80039e0:	f8d4 b000 	ldr.w	fp, [r4]
 80039e4:	f8c8 2000 	str.w	r2, [r8]
 80039e8:	e9d3 a800 	ldrd	sl, r8, [r3]
 80039ec:	4652      	mov	r2, sl
 80039ee:	4643      	mov	r3, r8
 80039f0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80039f4:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 80039f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80039fa:	f04f 32ff 	mov.w	r2, #4294967295
 80039fe:	4650      	mov	r0, sl
 8003a00:	4b9c      	ldr	r3, [pc, #624]	; (8003c74 <_printf_float+0x2cc>)
 8003a02:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003a04:	f7fd f802 	bl	8000a0c <__aeabi_dcmpun>
 8003a08:	bb70      	cbnz	r0, 8003a68 <_printf_float+0xc0>
 8003a0a:	f04f 32ff 	mov.w	r2, #4294967295
 8003a0e:	4650      	mov	r0, sl
 8003a10:	4b98      	ldr	r3, [pc, #608]	; (8003c74 <_printf_float+0x2cc>)
 8003a12:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003a14:	f7fc ffdc 	bl	80009d0 <__aeabi_dcmple>
 8003a18:	bb30      	cbnz	r0, 8003a68 <_printf_float+0xc0>
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	4650      	mov	r0, sl
 8003a20:	4641      	mov	r1, r8
 8003a22:	f7fc ffcb 	bl	80009bc <__aeabi_dcmplt>
 8003a26:	b110      	cbz	r0, 8003a2e <_printf_float+0x86>
 8003a28:	232d      	movs	r3, #45	; 0x2d
 8003a2a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a2e:	4a92      	ldr	r2, [pc, #584]	; (8003c78 <_printf_float+0x2d0>)
 8003a30:	4b92      	ldr	r3, [pc, #584]	; (8003c7c <_printf_float+0x2d4>)
 8003a32:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8003a36:	bf94      	ite	ls
 8003a38:	4690      	movls	r8, r2
 8003a3a:	4698      	movhi	r8, r3
 8003a3c:	2303      	movs	r3, #3
 8003a3e:	f04f 0a00 	mov.w	sl, #0
 8003a42:	6123      	str	r3, [r4, #16]
 8003a44:	f02b 0304 	bic.w	r3, fp, #4
 8003a48:	6023      	str	r3, [r4, #0]
 8003a4a:	4633      	mov	r3, r6
 8003a4c:	4621      	mov	r1, r4
 8003a4e:	4628      	mov	r0, r5
 8003a50:	9700      	str	r7, [sp, #0]
 8003a52:	aa0f      	add	r2, sp, #60	; 0x3c
 8003a54:	f000 f9d6 	bl	8003e04 <_printf_common>
 8003a58:	3001      	adds	r0, #1
 8003a5a:	f040 8090 	bne.w	8003b7e <_printf_float+0x1d6>
 8003a5e:	f04f 30ff 	mov.w	r0, #4294967295
 8003a62:	b011      	add	sp, #68	; 0x44
 8003a64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a68:	4652      	mov	r2, sl
 8003a6a:	4643      	mov	r3, r8
 8003a6c:	4650      	mov	r0, sl
 8003a6e:	4641      	mov	r1, r8
 8003a70:	f7fc ffcc 	bl	8000a0c <__aeabi_dcmpun>
 8003a74:	b148      	cbz	r0, 8003a8a <_printf_float+0xe2>
 8003a76:	f1b8 0f00 	cmp.w	r8, #0
 8003a7a:	bfb8      	it	lt
 8003a7c:	232d      	movlt	r3, #45	; 0x2d
 8003a7e:	4a80      	ldr	r2, [pc, #512]	; (8003c80 <_printf_float+0x2d8>)
 8003a80:	bfb8      	it	lt
 8003a82:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003a86:	4b7f      	ldr	r3, [pc, #508]	; (8003c84 <_printf_float+0x2dc>)
 8003a88:	e7d3      	b.n	8003a32 <_printf_float+0x8a>
 8003a8a:	6863      	ldr	r3, [r4, #4]
 8003a8c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8003a90:	1c5a      	adds	r2, r3, #1
 8003a92:	d142      	bne.n	8003b1a <_printf_float+0x172>
 8003a94:	2306      	movs	r3, #6
 8003a96:	6063      	str	r3, [r4, #4]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	9206      	str	r2, [sp, #24]
 8003a9c:	aa0e      	add	r2, sp, #56	; 0x38
 8003a9e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8003aa2:	aa0d      	add	r2, sp, #52	; 0x34
 8003aa4:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8003aa8:	9203      	str	r2, [sp, #12]
 8003aaa:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8003aae:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003ab2:	6023      	str	r3, [r4, #0]
 8003ab4:	6863      	ldr	r3, [r4, #4]
 8003ab6:	4652      	mov	r2, sl
 8003ab8:	9300      	str	r3, [sp, #0]
 8003aba:	4628      	mov	r0, r5
 8003abc:	4643      	mov	r3, r8
 8003abe:	910b      	str	r1, [sp, #44]	; 0x2c
 8003ac0:	f7ff fed5 	bl	800386e <__cvt>
 8003ac4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003ac6:	4680      	mov	r8, r0
 8003ac8:	2947      	cmp	r1, #71	; 0x47
 8003aca:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003acc:	d108      	bne.n	8003ae0 <_printf_float+0x138>
 8003ace:	1cc8      	adds	r0, r1, #3
 8003ad0:	db02      	blt.n	8003ad8 <_printf_float+0x130>
 8003ad2:	6863      	ldr	r3, [r4, #4]
 8003ad4:	4299      	cmp	r1, r3
 8003ad6:	dd40      	ble.n	8003b5a <_printf_float+0x1b2>
 8003ad8:	f1a9 0902 	sub.w	r9, r9, #2
 8003adc:	fa5f f989 	uxtb.w	r9, r9
 8003ae0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003ae4:	d81f      	bhi.n	8003b26 <_printf_float+0x17e>
 8003ae6:	464a      	mov	r2, r9
 8003ae8:	3901      	subs	r1, #1
 8003aea:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003aee:	910d      	str	r1, [sp, #52]	; 0x34
 8003af0:	f7ff ff1c 	bl	800392c <__exponent>
 8003af4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003af6:	4682      	mov	sl, r0
 8003af8:	1813      	adds	r3, r2, r0
 8003afa:	2a01      	cmp	r2, #1
 8003afc:	6123      	str	r3, [r4, #16]
 8003afe:	dc02      	bgt.n	8003b06 <_printf_float+0x15e>
 8003b00:	6822      	ldr	r2, [r4, #0]
 8003b02:	07d2      	lsls	r2, r2, #31
 8003b04:	d501      	bpl.n	8003b0a <_printf_float+0x162>
 8003b06:	3301      	adds	r3, #1
 8003b08:	6123      	str	r3, [r4, #16]
 8003b0a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d09b      	beq.n	8003a4a <_printf_float+0xa2>
 8003b12:	232d      	movs	r3, #45	; 0x2d
 8003b14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b18:	e797      	b.n	8003a4a <_printf_float+0xa2>
 8003b1a:	2947      	cmp	r1, #71	; 0x47
 8003b1c:	d1bc      	bne.n	8003a98 <_printf_float+0xf0>
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d1ba      	bne.n	8003a98 <_printf_float+0xf0>
 8003b22:	2301      	movs	r3, #1
 8003b24:	e7b7      	b.n	8003a96 <_printf_float+0xee>
 8003b26:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8003b2a:	d118      	bne.n	8003b5e <_printf_float+0x1b6>
 8003b2c:	2900      	cmp	r1, #0
 8003b2e:	6863      	ldr	r3, [r4, #4]
 8003b30:	dd0b      	ble.n	8003b4a <_printf_float+0x1a2>
 8003b32:	6121      	str	r1, [r4, #16]
 8003b34:	b913      	cbnz	r3, 8003b3c <_printf_float+0x194>
 8003b36:	6822      	ldr	r2, [r4, #0]
 8003b38:	07d0      	lsls	r0, r2, #31
 8003b3a:	d502      	bpl.n	8003b42 <_printf_float+0x19a>
 8003b3c:	3301      	adds	r3, #1
 8003b3e:	440b      	add	r3, r1
 8003b40:	6123      	str	r3, [r4, #16]
 8003b42:	f04f 0a00 	mov.w	sl, #0
 8003b46:	65a1      	str	r1, [r4, #88]	; 0x58
 8003b48:	e7df      	b.n	8003b0a <_printf_float+0x162>
 8003b4a:	b913      	cbnz	r3, 8003b52 <_printf_float+0x1aa>
 8003b4c:	6822      	ldr	r2, [r4, #0]
 8003b4e:	07d2      	lsls	r2, r2, #31
 8003b50:	d501      	bpl.n	8003b56 <_printf_float+0x1ae>
 8003b52:	3302      	adds	r3, #2
 8003b54:	e7f4      	b.n	8003b40 <_printf_float+0x198>
 8003b56:	2301      	movs	r3, #1
 8003b58:	e7f2      	b.n	8003b40 <_printf_float+0x198>
 8003b5a:	f04f 0967 	mov.w	r9, #103	; 0x67
 8003b5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003b60:	4299      	cmp	r1, r3
 8003b62:	db05      	blt.n	8003b70 <_printf_float+0x1c8>
 8003b64:	6823      	ldr	r3, [r4, #0]
 8003b66:	6121      	str	r1, [r4, #16]
 8003b68:	07d8      	lsls	r0, r3, #31
 8003b6a:	d5ea      	bpl.n	8003b42 <_printf_float+0x19a>
 8003b6c:	1c4b      	adds	r3, r1, #1
 8003b6e:	e7e7      	b.n	8003b40 <_printf_float+0x198>
 8003b70:	2900      	cmp	r1, #0
 8003b72:	bfcc      	ite	gt
 8003b74:	2201      	movgt	r2, #1
 8003b76:	f1c1 0202 	rsble	r2, r1, #2
 8003b7a:	4413      	add	r3, r2
 8003b7c:	e7e0      	b.n	8003b40 <_printf_float+0x198>
 8003b7e:	6823      	ldr	r3, [r4, #0]
 8003b80:	055a      	lsls	r2, r3, #21
 8003b82:	d407      	bmi.n	8003b94 <_printf_float+0x1ec>
 8003b84:	6923      	ldr	r3, [r4, #16]
 8003b86:	4642      	mov	r2, r8
 8003b88:	4631      	mov	r1, r6
 8003b8a:	4628      	mov	r0, r5
 8003b8c:	47b8      	blx	r7
 8003b8e:	3001      	adds	r0, #1
 8003b90:	d12b      	bne.n	8003bea <_printf_float+0x242>
 8003b92:	e764      	b.n	8003a5e <_printf_float+0xb6>
 8003b94:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003b98:	f240 80dd 	bls.w	8003d56 <_printf_float+0x3ae>
 8003b9c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	f7fc ff00 	bl	80009a8 <__aeabi_dcmpeq>
 8003ba8:	2800      	cmp	r0, #0
 8003baa:	d033      	beq.n	8003c14 <_printf_float+0x26c>
 8003bac:	2301      	movs	r3, #1
 8003bae:	4631      	mov	r1, r6
 8003bb0:	4628      	mov	r0, r5
 8003bb2:	4a35      	ldr	r2, [pc, #212]	; (8003c88 <_printf_float+0x2e0>)
 8003bb4:	47b8      	blx	r7
 8003bb6:	3001      	adds	r0, #1
 8003bb8:	f43f af51 	beq.w	8003a5e <_printf_float+0xb6>
 8003bbc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	db02      	blt.n	8003bca <_printf_float+0x222>
 8003bc4:	6823      	ldr	r3, [r4, #0]
 8003bc6:	07d8      	lsls	r0, r3, #31
 8003bc8:	d50f      	bpl.n	8003bea <_printf_float+0x242>
 8003bca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003bce:	4631      	mov	r1, r6
 8003bd0:	4628      	mov	r0, r5
 8003bd2:	47b8      	blx	r7
 8003bd4:	3001      	adds	r0, #1
 8003bd6:	f43f af42 	beq.w	8003a5e <_printf_float+0xb6>
 8003bda:	f04f 0800 	mov.w	r8, #0
 8003bde:	f104 091a 	add.w	r9, r4, #26
 8003be2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003be4:	3b01      	subs	r3, #1
 8003be6:	4543      	cmp	r3, r8
 8003be8:	dc09      	bgt.n	8003bfe <_printf_float+0x256>
 8003bea:	6823      	ldr	r3, [r4, #0]
 8003bec:	079b      	lsls	r3, r3, #30
 8003bee:	f100 8104 	bmi.w	8003dfa <_printf_float+0x452>
 8003bf2:	68e0      	ldr	r0, [r4, #12]
 8003bf4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003bf6:	4298      	cmp	r0, r3
 8003bf8:	bfb8      	it	lt
 8003bfa:	4618      	movlt	r0, r3
 8003bfc:	e731      	b.n	8003a62 <_printf_float+0xba>
 8003bfe:	2301      	movs	r3, #1
 8003c00:	464a      	mov	r2, r9
 8003c02:	4631      	mov	r1, r6
 8003c04:	4628      	mov	r0, r5
 8003c06:	47b8      	blx	r7
 8003c08:	3001      	adds	r0, #1
 8003c0a:	f43f af28 	beq.w	8003a5e <_printf_float+0xb6>
 8003c0e:	f108 0801 	add.w	r8, r8, #1
 8003c12:	e7e6      	b.n	8003be2 <_printf_float+0x23a>
 8003c14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	dc38      	bgt.n	8003c8c <_printf_float+0x2e4>
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	4631      	mov	r1, r6
 8003c1e:	4628      	mov	r0, r5
 8003c20:	4a19      	ldr	r2, [pc, #100]	; (8003c88 <_printf_float+0x2e0>)
 8003c22:	47b8      	blx	r7
 8003c24:	3001      	adds	r0, #1
 8003c26:	f43f af1a 	beq.w	8003a5e <_printf_float+0xb6>
 8003c2a:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	d102      	bne.n	8003c38 <_printf_float+0x290>
 8003c32:	6823      	ldr	r3, [r4, #0]
 8003c34:	07d9      	lsls	r1, r3, #31
 8003c36:	d5d8      	bpl.n	8003bea <_printf_float+0x242>
 8003c38:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003c3c:	4631      	mov	r1, r6
 8003c3e:	4628      	mov	r0, r5
 8003c40:	47b8      	blx	r7
 8003c42:	3001      	adds	r0, #1
 8003c44:	f43f af0b 	beq.w	8003a5e <_printf_float+0xb6>
 8003c48:	f04f 0900 	mov.w	r9, #0
 8003c4c:	f104 0a1a 	add.w	sl, r4, #26
 8003c50:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003c52:	425b      	negs	r3, r3
 8003c54:	454b      	cmp	r3, r9
 8003c56:	dc01      	bgt.n	8003c5c <_printf_float+0x2b4>
 8003c58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003c5a:	e794      	b.n	8003b86 <_printf_float+0x1de>
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	4652      	mov	r2, sl
 8003c60:	4631      	mov	r1, r6
 8003c62:	4628      	mov	r0, r5
 8003c64:	47b8      	blx	r7
 8003c66:	3001      	adds	r0, #1
 8003c68:	f43f aef9 	beq.w	8003a5e <_printf_float+0xb6>
 8003c6c:	f109 0901 	add.w	r9, r9, #1
 8003c70:	e7ee      	b.n	8003c50 <_printf_float+0x2a8>
 8003c72:	bf00      	nop
 8003c74:	7fefffff 	.word	0x7fefffff
 8003c78:	080072b2 	.word	0x080072b2
 8003c7c:	080072b6 	.word	0x080072b6
 8003c80:	080072ba 	.word	0x080072ba
 8003c84:	080072be 	.word	0x080072be
 8003c88:	080072c2 	.word	0x080072c2
 8003c8c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003c8e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003c90:	429a      	cmp	r2, r3
 8003c92:	bfa8      	it	ge
 8003c94:	461a      	movge	r2, r3
 8003c96:	2a00      	cmp	r2, #0
 8003c98:	4691      	mov	r9, r2
 8003c9a:	dc37      	bgt.n	8003d0c <_printf_float+0x364>
 8003c9c:	f04f 0b00 	mov.w	fp, #0
 8003ca0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003ca4:	f104 021a 	add.w	r2, r4, #26
 8003ca8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8003cac:	ebaa 0309 	sub.w	r3, sl, r9
 8003cb0:	455b      	cmp	r3, fp
 8003cb2:	dc33      	bgt.n	8003d1c <_printf_float+0x374>
 8003cb4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	db3b      	blt.n	8003d34 <_printf_float+0x38c>
 8003cbc:	6823      	ldr	r3, [r4, #0]
 8003cbe:	07da      	lsls	r2, r3, #31
 8003cc0:	d438      	bmi.n	8003d34 <_printf_float+0x38c>
 8003cc2:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8003cc6:	eba2 0903 	sub.w	r9, r2, r3
 8003cca:	eba2 020a 	sub.w	r2, r2, sl
 8003cce:	4591      	cmp	r9, r2
 8003cd0:	bfa8      	it	ge
 8003cd2:	4691      	movge	r9, r2
 8003cd4:	f1b9 0f00 	cmp.w	r9, #0
 8003cd8:	dc34      	bgt.n	8003d44 <_printf_float+0x39c>
 8003cda:	f04f 0800 	mov.w	r8, #0
 8003cde:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003ce2:	f104 0a1a 	add.w	sl, r4, #26
 8003ce6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003cea:	1a9b      	subs	r3, r3, r2
 8003cec:	eba3 0309 	sub.w	r3, r3, r9
 8003cf0:	4543      	cmp	r3, r8
 8003cf2:	f77f af7a 	ble.w	8003bea <_printf_float+0x242>
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	4652      	mov	r2, sl
 8003cfa:	4631      	mov	r1, r6
 8003cfc:	4628      	mov	r0, r5
 8003cfe:	47b8      	blx	r7
 8003d00:	3001      	adds	r0, #1
 8003d02:	f43f aeac 	beq.w	8003a5e <_printf_float+0xb6>
 8003d06:	f108 0801 	add.w	r8, r8, #1
 8003d0a:	e7ec      	b.n	8003ce6 <_printf_float+0x33e>
 8003d0c:	4613      	mov	r3, r2
 8003d0e:	4631      	mov	r1, r6
 8003d10:	4642      	mov	r2, r8
 8003d12:	4628      	mov	r0, r5
 8003d14:	47b8      	blx	r7
 8003d16:	3001      	adds	r0, #1
 8003d18:	d1c0      	bne.n	8003c9c <_printf_float+0x2f4>
 8003d1a:	e6a0      	b.n	8003a5e <_printf_float+0xb6>
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	4631      	mov	r1, r6
 8003d20:	4628      	mov	r0, r5
 8003d22:	920b      	str	r2, [sp, #44]	; 0x2c
 8003d24:	47b8      	blx	r7
 8003d26:	3001      	adds	r0, #1
 8003d28:	f43f ae99 	beq.w	8003a5e <_printf_float+0xb6>
 8003d2c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003d2e:	f10b 0b01 	add.w	fp, fp, #1
 8003d32:	e7b9      	b.n	8003ca8 <_printf_float+0x300>
 8003d34:	4631      	mov	r1, r6
 8003d36:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003d3a:	4628      	mov	r0, r5
 8003d3c:	47b8      	blx	r7
 8003d3e:	3001      	adds	r0, #1
 8003d40:	d1bf      	bne.n	8003cc2 <_printf_float+0x31a>
 8003d42:	e68c      	b.n	8003a5e <_printf_float+0xb6>
 8003d44:	464b      	mov	r3, r9
 8003d46:	4631      	mov	r1, r6
 8003d48:	4628      	mov	r0, r5
 8003d4a:	eb08 020a 	add.w	r2, r8, sl
 8003d4e:	47b8      	blx	r7
 8003d50:	3001      	adds	r0, #1
 8003d52:	d1c2      	bne.n	8003cda <_printf_float+0x332>
 8003d54:	e683      	b.n	8003a5e <_printf_float+0xb6>
 8003d56:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003d58:	2a01      	cmp	r2, #1
 8003d5a:	dc01      	bgt.n	8003d60 <_printf_float+0x3b8>
 8003d5c:	07db      	lsls	r3, r3, #31
 8003d5e:	d539      	bpl.n	8003dd4 <_printf_float+0x42c>
 8003d60:	2301      	movs	r3, #1
 8003d62:	4642      	mov	r2, r8
 8003d64:	4631      	mov	r1, r6
 8003d66:	4628      	mov	r0, r5
 8003d68:	47b8      	blx	r7
 8003d6a:	3001      	adds	r0, #1
 8003d6c:	f43f ae77 	beq.w	8003a5e <_printf_float+0xb6>
 8003d70:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003d74:	4631      	mov	r1, r6
 8003d76:	4628      	mov	r0, r5
 8003d78:	47b8      	blx	r7
 8003d7a:	3001      	adds	r0, #1
 8003d7c:	f43f ae6f 	beq.w	8003a5e <_printf_float+0xb6>
 8003d80:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003d84:	2200      	movs	r2, #0
 8003d86:	2300      	movs	r3, #0
 8003d88:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8003d8c:	f7fc fe0c 	bl	80009a8 <__aeabi_dcmpeq>
 8003d90:	b9d8      	cbnz	r0, 8003dca <_printf_float+0x422>
 8003d92:	f109 33ff 	add.w	r3, r9, #4294967295
 8003d96:	f108 0201 	add.w	r2, r8, #1
 8003d9a:	4631      	mov	r1, r6
 8003d9c:	4628      	mov	r0, r5
 8003d9e:	47b8      	blx	r7
 8003da0:	3001      	adds	r0, #1
 8003da2:	d10e      	bne.n	8003dc2 <_printf_float+0x41a>
 8003da4:	e65b      	b.n	8003a5e <_printf_float+0xb6>
 8003da6:	2301      	movs	r3, #1
 8003da8:	464a      	mov	r2, r9
 8003daa:	4631      	mov	r1, r6
 8003dac:	4628      	mov	r0, r5
 8003dae:	47b8      	blx	r7
 8003db0:	3001      	adds	r0, #1
 8003db2:	f43f ae54 	beq.w	8003a5e <_printf_float+0xb6>
 8003db6:	f108 0801 	add.w	r8, r8, #1
 8003dba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003dbc:	3b01      	subs	r3, #1
 8003dbe:	4543      	cmp	r3, r8
 8003dc0:	dcf1      	bgt.n	8003da6 <_printf_float+0x3fe>
 8003dc2:	4653      	mov	r3, sl
 8003dc4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003dc8:	e6de      	b.n	8003b88 <_printf_float+0x1e0>
 8003dca:	f04f 0800 	mov.w	r8, #0
 8003dce:	f104 091a 	add.w	r9, r4, #26
 8003dd2:	e7f2      	b.n	8003dba <_printf_float+0x412>
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	4642      	mov	r2, r8
 8003dd8:	e7df      	b.n	8003d9a <_printf_float+0x3f2>
 8003dda:	2301      	movs	r3, #1
 8003ddc:	464a      	mov	r2, r9
 8003dde:	4631      	mov	r1, r6
 8003de0:	4628      	mov	r0, r5
 8003de2:	47b8      	blx	r7
 8003de4:	3001      	adds	r0, #1
 8003de6:	f43f ae3a 	beq.w	8003a5e <_printf_float+0xb6>
 8003dea:	f108 0801 	add.w	r8, r8, #1
 8003dee:	68e3      	ldr	r3, [r4, #12]
 8003df0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8003df2:	1a5b      	subs	r3, r3, r1
 8003df4:	4543      	cmp	r3, r8
 8003df6:	dcf0      	bgt.n	8003dda <_printf_float+0x432>
 8003df8:	e6fb      	b.n	8003bf2 <_printf_float+0x24a>
 8003dfa:	f04f 0800 	mov.w	r8, #0
 8003dfe:	f104 0919 	add.w	r9, r4, #25
 8003e02:	e7f4      	b.n	8003dee <_printf_float+0x446>

08003e04 <_printf_common>:
 8003e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e08:	4616      	mov	r6, r2
 8003e0a:	4699      	mov	r9, r3
 8003e0c:	688a      	ldr	r2, [r1, #8]
 8003e0e:	690b      	ldr	r3, [r1, #16]
 8003e10:	4607      	mov	r7, r0
 8003e12:	4293      	cmp	r3, r2
 8003e14:	bfb8      	it	lt
 8003e16:	4613      	movlt	r3, r2
 8003e18:	6033      	str	r3, [r6, #0]
 8003e1a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003e1e:	460c      	mov	r4, r1
 8003e20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003e24:	b10a      	cbz	r2, 8003e2a <_printf_common+0x26>
 8003e26:	3301      	adds	r3, #1
 8003e28:	6033      	str	r3, [r6, #0]
 8003e2a:	6823      	ldr	r3, [r4, #0]
 8003e2c:	0699      	lsls	r1, r3, #26
 8003e2e:	bf42      	ittt	mi
 8003e30:	6833      	ldrmi	r3, [r6, #0]
 8003e32:	3302      	addmi	r3, #2
 8003e34:	6033      	strmi	r3, [r6, #0]
 8003e36:	6825      	ldr	r5, [r4, #0]
 8003e38:	f015 0506 	ands.w	r5, r5, #6
 8003e3c:	d106      	bne.n	8003e4c <_printf_common+0x48>
 8003e3e:	f104 0a19 	add.w	sl, r4, #25
 8003e42:	68e3      	ldr	r3, [r4, #12]
 8003e44:	6832      	ldr	r2, [r6, #0]
 8003e46:	1a9b      	subs	r3, r3, r2
 8003e48:	42ab      	cmp	r3, r5
 8003e4a:	dc2b      	bgt.n	8003ea4 <_printf_common+0xa0>
 8003e4c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003e50:	1e13      	subs	r3, r2, #0
 8003e52:	6822      	ldr	r2, [r4, #0]
 8003e54:	bf18      	it	ne
 8003e56:	2301      	movne	r3, #1
 8003e58:	0692      	lsls	r2, r2, #26
 8003e5a:	d430      	bmi.n	8003ebe <_printf_common+0xba>
 8003e5c:	4649      	mov	r1, r9
 8003e5e:	4638      	mov	r0, r7
 8003e60:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003e64:	47c0      	blx	r8
 8003e66:	3001      	adds	r0, #1
 8003e68:	d023      	beq.n	8003eb2 <_printf_common+0xae>
 8003e6a:	6823      	ldr	r3, [r4, #0]
 8003e6c:	6922      	ldr	r2, [r4, #16]
 8003e6e:	f003 0306 	and.w	r3, r3, #6
 8003e72:	2b04      	cmp	r3, #4
 8003e74:	bf14      	ite	ne
 8003e76:	2500      	movne	r5, #0
 8003e78:	6833      	ldreq	r3, [r6, #0]
 8003e7a:	f04f 0600 	mov.w	r6, #0
 8003e7e:	bf08      	it	eq
 8003e80:	68e5      	ldreq	r5, [r4, #12]
 8003e82:	f104 041a 	add.w	r4, r4, #26
 8003e86:	bf08      	it	eq
 8003e88:	1aed      	subeq	r5, r5, r3
 8003e8a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003e8e:	bf08      	it	eq
 8003e90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e94:	4293      	cmp	r3, r2
 8003e96:	bfc4      	itt	gt
 8003e98:	1a9b      	subgt	r3, r3, r2
 8003e9a:	18ed      	addgt	r5, r5, r3
 8003e9c:	42b5      	cmp	r5, r6
 8003e9e:	d11a      	bne.n	8003ed6 <_printf_common+0xd2>
 8003ea0:	2000      	movs	r0, #0
 8003ea2:	e008      	b.n	8003eb6 <_printf_common+0xb2>
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	4652      	mov	r2, sl
 8003ea8:	4649      	mov	r1, r9
 8003eaa:	4638      	mov	r0, r7
 8003eac:	47c0      	blx	r8
 8003eae:	3001      	adds	r0, #1
 8003eb0:	d103      	bne.n	8003eba <_printf_common+0xb6>
 8003eb2:	f04f 30ff 	mov.w	r0, #4294967295
 8003eb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003eba:	3501      	adds	r5, #1
 8003ebc:	e7c1      	b.n	8003e42 <_printf_common+0x3e>
 8003ebe:	2030      	movs	r0, #48	; 0x30
 8003ec0:	18e1      	adds	r1, r4, r3
 8003ec2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003ec6:	1c5a      	adds	r2, r3, #1
 8003ec8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003ecc:	4422      	add	r2, r4
 8003ece:	3302      	adds	r3, #2
 8003ed0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003ed4:	e7c2      	b.n	8003e5c <_printf_common+0x58>
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	4622      	mov	r2, r4
 8003eda:	4649      	mov	r1, r9
 8003edc:	4638      	mov	r0, r7
 8003ede:	47c0      	blx	r8
 8003ee0:	3001      	adds	r0, #1
 8003ee2:	d0e6      	beq.n	8003eb2 <_printf_common+0xae>
 8003ee4:	3601      	adds	r6, #1
 8003ee6:	e7d9      	b.n	8003e9c <_printf_common+0x98>

08003ee8 <_printf_i>:
 8003ee8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003eec:	7e0f      	ldrb	r7, [r1, #24]
 8003eee:	4691      	mov	r9, r2
 8003ef0:	2f78      	cmp	r7, #120	; 0x78
 8003ef2:	4680      	mov	r8, r0
 8003ef4:	460c      	mov	r4, r1
 8003ef6:	469a      	mov	sl, r3
 8003ef8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003efa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003efe:	d807      	bhi.n	8003f10 <_printf_i+0x28>
 8003f00:	2f62      	cmp	r7, #98	; 0x62
 8003f02:	d80a      	bhi.n	8003f1a <_printf_i+0x32>
 8003f04:	2f00      	cmp	r7, #0
 8003f06:	f000 80d5 	beq.w	80040b4 <_printf_i+0x1cc>
 8003f0a:	2f58      	cmp	r7, #88	; 0x58
 8003f0c:	f000 80c1 	beq.w	8004092 <_printf_i+0x1aa>
 8003f10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f14:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003f18:	e03a      	b.n	8003f90 <_printf_i+0xa8>
 8003f1a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003f1e:	2b15      	cmp	r3, #21
 8003f20:	d8f6      	bhi.n	8003f10 <_printf_i+0x28>
 8003f22:	a101      	add	r1, pc, #4	; (adr r1, 8003f28 <_printf_i+0x40>)
 8003f24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003f28:	08003f81 	.word	0x08003f81
 8003f2c:	08003f95 	.word	0x08003f95
 8003f30:	08003f11 	.word	0x08003f11
 8003f34:	08003f11 	.word	0x08003f11
 8003f38:	08003f11 	.word	0x08003f11
 8003f3c:	08003f11 	.word	0x08003f11
 8003f40:	08003f95 	.word	0x08003f95
 8003f44:	08003f11 	.word	0x08003f11
 8003f48:	08003f11 	.word	0x08003f11
 8003f4c:	08003f11 	.word	0x08003f11
 8003f50:	08003f11 	.word	0x08003f11
 8003f54:	0800409b 	.word	0x0800409b
 8003f58:	08003fc1 	.word	0x08003fc1
 8003f5c:	08004055 	.word	0x08004055
 8003f60:	08003f11 	.word	0x08003f11
 8003f64:	08003f11 	.word	0x08003f11
 8003f68:	080040bd 	.word	0x080040bd
 8003f6c:	08003f11 	.word	0x08003f11
 8003f70:	08003fc1 	.word	0x08003fc1
 8003f74:	08003f11 	.word	0x08003f11
 8003f78:	08003f11 	.word	0x08003f11
 8003f7c:	0800405d 	.word	0x0800405d
 8003f80:	682b      	ldr	r3, [r5, #0]
 8003f82:	1d1a      	adds	r2, r3, #4
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	602a      	str	r2, [r5, #0]
 8003f88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003f90:	2301      	movs	r3, #1
 8003f92:	e0a0      	b.n	80040d6 <_printf_i+0x1ee>
 8003f94:	6820      	ldr	r0, [r4, #0]
 8003f96:	682b      	ldr	r3, [r5, #0]
 8003f98:	0607      	lsls	r7, r0, #24
 8003f9a:	f103 0104 	add.w	r1, r3, #4
 8003f9e:	6029      	str	r1, [r5, #0]
 8003fa0:	d501      	bpl.n	8003fa6 <_printf_i+0xbe>
 8003fa2:	681e      	ldr	r6, [r3, #0]
 8003fa4:	e003      	b.n	8003fae <_printf_i+0xc6>
 8003fa6:	0646      	lsls	r6, r0, #25
 8003fa8:	d5fb      	bpl.n	8003fa2 <_printf_i+0xba>
 8003faa:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003fae:	2e00      	cmp	r6, #0
 8003fb0:	da03      	bge.n	8003fba <_printf_i+0xd2>
 8003fb2:	232d      	movs	r3, #45	; 0x2d
 8003fb4:	4276      	negs	r6, r6
 8003fb6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003fba:	230a      	movs	r3, #10
 8003fbc:	4859      	ldr	r0, [pc, #356]	; (8004124 <_printf_i+0x23c>)
 8003fbe:	e012      	b.n	8003fe6 <_printf_i+0xfe>
 8003fc0:	682b      	ldr	r3, [r5, #0]
 8003fc2:	6820      	ldr	r0, [r4, #0]
 8003fc4:	1d19      	adds	r1, r3, #4
 8003fc6:	6029      	str	r1, [r5, #0]
 8003fc8:	0605      	lsls	r5, r0, #24
 8003fca:	d501      	bpl.n	8003fd0 <_printf_i+0xe8>
 8003fcc:	681e      	ldr	r6, [r3, #0]
 8003fce:	e002      	b.n	8003fd6 <_printf_i+0xee>
 8003fd0:	0641      	lsls	r1, r0, #25
 8003fd2:	d5fb      	bpl.n	8003fcc <_printf_i+0xe4>
 8003fd4:	881e      	ldrh	r6, [r3, #0]
 8003fd6:	2f6f      	cmp	r7, #111	; 0x6f
 8003fd8:	bf0c      	ite	eq
 8003fda:	2308      	moveq	r3, #8
 8003fdc:	230a      	movne	r3, #10
 8003fde:	4851      	ldr	r0, [pc, #324]	; (8004124 <_printf_i+0x23c>)
 8003fe0:	2100      	movs	r1, #0
 8003fe2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003fe6:	6865      	ldr	r5, [r4, #4]
 8003fe8:	2d00      	cmp	r5, #0
 8003fea:	bfa8      	it	ge
 8003fec:	6821      	ldrge	r1, [r4, #0]
 8003fee:	60a5      	str	r5, [r4, #8]
 8003ff0:	bfa4      	itt	ge
 8003ff2:	f021 0104 	bicge.w	r1, r1, #4
 8003ff6:	6021      	strge	r1, [r4, #0]
 8003ff8:	b90e      	cbnz	r6, 8003ffe <_printf_i+0x116>
 8003ffa:	2d00      	cmp	r5, #0
 8003ffc:	d04b      	beq.n	8004096 <_printf_i+0x1ae>
 8003ffe:	4615      	mov	r5, r2
 8004000:	fbb6 f1f3 	udiv	r1, r6, r3
 8004004:	fb03 6711 	mls	r7, r3, r1, r6
 8004008:	5dc7      	ldrb	r7, [r0, r7]
 800400a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800400e:	4637      	mov	r7, r6
 8004010:	42bb      	cmp	r3, r7
 8004012:	460e      	mov	r6, r1
 8004014:	d9f4      	bls.n	8004000 <_printf_i+0x118>
 8004016:	2b08      	cmp	r3, #8
 8004018:	d10b      	bne.n	8004032 <_printf_i+0x14a>
 800401a:	6823      	ldr	r3, [r4, #0]
 800401c:	07de      	lsls	r6, r3, #31
 800401e:	d508      	bpl.n	8004032 <_printf_i+0x14a>
 8004020:	6923      	ldr	r3, [r4, #16]
 8004022:	6861      	ldr	r1, [r4, #4]
 8004024:	4299      	cmp	r1, r3
 8004026:	bfde      	ittt	le
 8004028:	2330      	movle	r3, #48	; 0x30
 800402a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800402e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004032:	1b52      	subs	r2, r2, r5
 8004034:	6122      	str	r2, [r4, #16]
 8004036:	464b      	mov	r3, r9
 8004038:	4621      	mov	r1, r4
 800403a:	4640      	mov	r0, r8
 800403c:	f8cd a000 	str.w	sl, [sp]
 8004040:	aa03      	add	r2, sp, #12
 8004042:	f7ff fedf 	bl	8003e04 <_printf_common>
 8004046:	3001      	adds	r0, #1
 8004048:	d14a      	bne.n	80040e0 <_printf_i+0x1f8>
 800404a:	f04f 30ff 	mov.w	r0, #4294967295
 800404e:	b004      	add	sp, #16
 8004050:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004054:	6823      	ldr	r3, [r4, #0]
 8004056:	f043 0320 	orr.w	r3, r3, #32
 800405a:	6023      	str	r3, [r4, #0]
 800405c:	2778      	movs	r7, #120	; 0x78
 800405e:	4832      	ldr	r0, [pc, #200]	; (8004128 <_printf_i+0x240>)
 8004060:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004064:	6823      	ldr	r3, [r4, #0]
 8004066:	6829      	ldr	r1, [r5, #0]
 8004068:	061f      	lsls	r7, r3, #24
 800406a:	f851 6b04 	ldr.w	r6, [r1], #4
 800406e:	d402      	bmi.n	8004076 <_printf_i+0x18e>
 8004070:	065f      	lsls	r7, r3, #25
 8004072:	bf48      	it	mi
 8004074:	b2b6      	uxthmi	r6, r6
 8004076:	07df      	lsls	r7, r3, #31
 8004078:	bf48      	it	mi
 800407a:	f043 0320 	orrmi.w	r3, r3, #32
 800407e:	6029      	str	r1, [r5, #0]
 8004080:	bf48      	it	mi
 8004082:	6023      	strmi	r3, [r4, #0]
 8004084:	b91e      	cbnz	r6, 800408e <_printf_i+0x1a6>
 8004086:	6823      	ldr	r3, [r4, #0]
 8004088:	f023 0320 	bic.w	r3, r3, #32
 800408c:	6023      	str	r3, [r4, #0]
 800408e:	2310      	movs	r3, #16
 8004090:	e7a6      	b.n	8003fe0 <_printf_i+0xf8>
 8004092:	4824      	ldr	r0, [pc, #144]	; (8004124 <_printf_i+0x23c>)
 8004094:	e7e4      	b.n	8004060 <_printf_i+0x178>
 8004096:	4615      	mov	r5, r2
 8004098:	e7bd      	b.n	8004016 <_printf_i+0x12e>
 800409a:	682b      	ldr	r3, [r5, #0]
 800409c:	6826      	ldr	r6, [r4, #0]
 800409e:	1d18      	adds	r0, r3, #4
 80040a0:	6961      	ldr	r1, [r4, #20]
 80040a2:	6028      	str	r0, [r5, #0]
 80040a4:	0635      	lsls	r5, r6, #24
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	d501      	bpl.n	80040ae <_printf_i+0x1c6>
 80040aa:	6019      	str	r1, [r3, #0]
 80040ac:	e002      	b.n	80040b4 <_printf_i+0x1cc>
 80040ae:	0670      	lsls	r0, r6, #25
 80040b0:	d5fb      	bpl.n	80040aa <_printf_i+0x1c2>
 80040b2:	8019      	strh	r1, [r3, #0]
 80040b4:	2300      	movs	r3, #0
 80040b6:	4615      	mov	r5, r2
 80040b8:	6123      	str	r3, [r4, #16]
 80040ba:	e7bc      	b.n	8004036 <_printf_i+0x14e>
 80040bc:	682b      	ldr	r3, [r5, #0]
 80040be:	2100      	movs	r1, #0
 80040c0:	1d1a      	adds	r2, r3, #4
 80040c2:	602a      	str	r2, [r5, #0]
 80040c4:	681d      	ldr	r5, [r3, #0]
 80040c6:	6862      	ldr	r2, [r4, #4]
 80040c8:	4628      	mov	r0, r5
 80040ca:	f000 fab6 	bl	800463a <memchr>
 80040ce:	b108      	cbz	r0, 80040d4 <_printf_i+0x1ec>
 80040d0:	1b40      	subs	r0, r0, r5
 80040d2:	6060      	str	r0, [r4, #4]
 80040d4:	6863      	ldr	r3, [r4, #4]
 80040d6:	6123      	str	r3, [r4, #16]
 80040d8:	2300      	movs	r3, #0
 80040da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80040de:	e7aa      	b.n	8004036 <_printf_i+0x14e>
 80040e0:	462a      	mov	r2, r5
 80040e2:	4649      	mov	r1, r9
 80040e4:	4640      	mov	r0, r8
 80040e6:	6923      	ldr	r3, [r4, #16]
 80040e8:	47d0      	blx	sl
 80040ea:	3001      	adds	r0, #1
 80040ec:	d0ad      	beq.n	800404a <_printf_i+0x162>
 80040ee:	6823      	ldr	r3, [r4, #0]
 80040f0:	079b      	lsls	r3, r3, #30
 80040f2:	d413      	bmi.n	800411c <_printf_i+0x234>
 80040f4:	68e0      	ldr	r0, [r4, #12]
 80040f6:	9b03      	ldr	r3, [sp, #12]
 80040f8:	4298      	cmp	r0, r3
 80040fa:	bfb8      	it	lt
 80040fc:	4618      	movlt	r0, r3
 80040fe:	e7a6      	b.n	800404e <_printf_i+0x166>
 8004100:	2301      	movs	r3, #1
 8004102:	4632      	mov	r2, r6
 8004104:	4649      	mov	r1, r9
 8004106:	4640      	mov	r0, r8
 8004108:	47d0      	blx	sl
 800410a:	3001      	adds	r0, #1
 800410c:	d09d      	beq.n	800404a <_printf_i+0x162>
 800410e:	3501      	adds	r5, #1
 8004110:	68e3      	ldr	r3, [r4, #12]
 8004112:	9903      	ldr	r1, [sp, #12]
 8004114:	1a5b      	subs	r3, r3, r1
 8004116:	42ab      	cmp	r3, r5
 8004118:	dcf2      	bgt.n	8004100 <_printf_i+0x218>
 800411a:	e7eb      	b.n	80040f4 <_printf_i+0x20c>
 800411c:	2500      	movs	r5, #0
 800411e:	f104 0619 	add.w	r6, r4, #25
 8004122:	e7f5      	b.n	8004110 <_printf_i+0x228>
 8004124:	080072c4 	.word	0x080072c4
 8004128:	080072d5 	.word	0x080072d5

0800412c <std>:
 800412c:	2300      	movs	r3, #0
 800412e:	b510      	push	{r4, lr}
 8004130:	4604      	mov	r4, r0
 8004132:	e9c0 3300 	strd	r3, r3, [r0]
 8004136:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800413a:	6083      	str	r3, [r0, #8]
 800413c:	8181      	strh	r1, [r0, #12]
 800413e:	6643      	str	r3, [r0, #100]	; 0x64
 8004140:	81c2      	strh	r2, [r0, #14]
 8004142:	6183      	str	r3, [r0, #24]
 8004144:	4619      	mov	r1, r3
 8004146:	2208      	movs	r2, #8
 8004148:	305c      	adds	r0, #92	; 0x5c
 800414a:	f000 f9f7 	bl	800453c <memset>
 800414e:	4b0d      	ldr	r3, [pc, #52]	; (8004184 <std+0x58>)
 8004150:	6224      	str	r4, [r4, #32]
 8004152:	6263      	str	r3, [r4, #36]	; 0x24
 8004154:	4b0c      	ldr	r3, [pc, #48]	; (8004188 <std+0x5c>)
 8004156:	62a3      	str	r3, [r4, #40]	; 0x28
 8004158:	4b0c      	ldr	r3, [pc, #48]	; (800418c <std+0x60>)
 800415a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800415c:	4b0c      	ldr	r3, [pc, #48]	; (8004190 <std+0x64>)
 800415e:	6323      	str	r3, [r4, #48]	; 0x30
 8004160:	4b0c      	ldr	r3, [pc, #48]	; (8004194 <std+0x68>)
 8004162:	429c      	cmp	r4, r3
 8004164:	d006      	beq.n	8004174 <std+0x48>
 8004166:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800416a:	4294      	cmp	r4, r2
 800416c:	d002      	beq.n	8004174 <std+0x48>
 800416e:	33d0      	adds	r3, #208	; 0xd0
 8004170:	429c      	cmp	r4, r3
 8004172:	d105      	bne.n	8004180 <std+0x54>
 8004174:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004178:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800417c:	f000 ba5a 	b.w	8004634 <__retarget_lock_init_recursive>
 8004180:	bd10      	pop	{r4, pc}
 8004182:	bf00      	nop
 8004184:	0800438d 	.word	0x0800438d
 8004188:	080043af 	.word	0x080043af
 800418c:	080043e7 	.word	0x080043e7
 8004190:	0800440b 	.word	0x0800440b
 8004194:	20000320 	.word	0x20000320

08004198 <stdio_exit_handler>:
 8004198:	4a02      	ldr	r2, [pc, #8]	; (80041a4 <stdio_exit_handler+0xc>)
 800419a:	4903      	ldr	r1, [pc, #12]	; (80041a8 <stdio_exit_handler+0x10>)
 800419c:	4803      	ldr	r0, [pc, #12]	; (80041ac <stdio_exit_handler+0x14>)
 800419e:	f000 b869 	b.w	8004274 <_fwalk_sglue>
 80041a2:	bf00      	nop
 80041a4:	20000010 	.word	0x20000010
 80041a8:	08005fa1 	.word	0x08005fa1
 80041ac:	2000001c 	.word	0x2000001c

080041b0 <cleanup_stdio>:
 80041b0:	6841      	ldr	r1, [r0, #4]
 80041b2:	4b0c      	ldr	r3, [pc, #48]	; (80041e4 <cleanup_stdio+0x34>)
 80041b4:	b510      	push	{r4, lr}
 80041b6:	4299      	cmp	r1, r3
 80041b8:	4604      	mov	r4, r0
 80041ba:	d001      	beq.n	80041c0 <cleanup_stdio+0x10>
 80041bc:	f001 fef0 	bl	8005fa0 <_fflush_r>
 80041c0:	68a1      	ldr	r1, [r4, #8]
 80041c2:	4b09      	ldr	r3, [pc, #36]	; (80041e8 <cleanup_stdio+0x38>)
 80041c4:	4299      	cmp	r1, r3
 80041c6:	d002      	beq.n	80041ce <cleanup_stdio+0x1e>
 80041c8:	4620      	mov	r0, r4
 80041ca:	f001 fee9 	bl	8005fa0 <_fflush_r>
 80041ce:	68e1      	ldr	r1, [r4, #12]
 80041d0:	4b06      	ldr	r3, [pc, #24]	; (80041ec <cleanup_stdio+0x3c>)
 80041d2:	4299      	cmp	r1, r3
 80041d4:	d004      	beq.n	80041e0 <cleanup_stdio+0x30>
 80041d6:	4620      	mov	r0, r4
 80041d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80041dc:	f001 bee0 	b.w	8005fa0 <_fflush_r>
 80041e0:	bd10      	pop	{r4, pc}
 80041e2:	bf00      	nop
 80041e4:	20000320 	.word	0x20000320
 80041e8:	20000388 	.word	0x20000388
 80041ec:	200003f0 	.word	0x200003f0

080041f0 <global_stdio_init.part.0>:
 80041f0:	b510      	push	{r4, lr}
 80041f2:	4b0b      	ldr	r3, [pc, #44]	; (8004220 <global_stdio_init.part.0+0x30>)
 80041f4:	4c0b      	ldr	r4, [pc, #44]	; (8004224 <global_stdio_init.part.0+0x34>)
 80041f6:	4a0c      	ldr	r2, [pc, #48]	; (8004228 <global_stdio_init.part.0+0x38>)
 80041f8:	4620      	mov	r0, r4
 80041fa:	601a      	str	r2, [r3, #0]
 80041fc:	2104      	movs	r1, #4
 80041fe:	2200      	movs	r2, #0
 8004200:	f7ff ff94 	bl	800412c <std>
 8004204:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004208:	2201      	movs	r2, #1
 800420a:	2109      	movs	r1, #9
 800420c:	f7ff ff8e 	bl	800412c <std>
 8004210:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004214:	2202      	movs	r2, #2
 8004216:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800421a:	2112      	movs	r1, #18
 800421c:	f7ff bf86 	b.w	800412c <std>
 8004220:	20000458 	.word	0x20000458
 8004224:	20000320 	.word	0x20000320
 8004228:	08004199 	.word	0x08004199

0800422c <__sfp_lock_acquire>:
 800422c:	4801      	ldr	r0, [pc, #4]	; (8004234 <__sfp_lock_acquire+0x8>)
 800422e:	f000 ba02 	b.w	8004636 <__retarget_lock_acquire_recursive>
 8004232:	bf00      	nop
 8004234:	20000461 	.word	0x20000461

08004238 <__sfp_lock_release>:
 8004238:	4801      	ldr	r0, [pc, #4]	; (8004240 <__sfp_lock_release+0x8>)
 800423a:	f000 b9fd 	b.w	8004638 <__retarget_lock_release_recursive>
 800423e:	bf00      	nop
 8004240:	20000461 	.word	0x20000461

08004244 <__sinit>:
 8004244:	b510      	push	{r4, lr}
 8004246:	4604      	mov	r4, r0
 8004248:	f7ff fff0 	bl	800422c <__sfp_lock_acquire>
 800424c:	6a23      	ldr	r3, [r4, #32]
 800424e:	b11b      	cbz	r3, 8004258 <__sinit+0x14>
 8004250:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004254:	f7ff bff0 	b.w	8004238 <__sfp_lock_release>
 8004258:	4b04      	ldr	r3, [pc, #16]	; (800426c <__sinit+0x28>)
 800425a:	6223      	str	r3, [r4, #32]
 800425c:	4b04      	ldr	r3, [pc, #16]	; (8004270 <__sinit+0x2c>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d1f5      	bne.n	8004250 <__sinit+0xc>
 8004264:	f7ff ffc4 	bl	80041f0 <global_stdio_init.part.0>
 8004268:	e7f2      	b.n	8004250 <__sinit+0xc>
 800426a:	bf00      	nop
 800426c:	080041b1 	.word	0x080041b1
 8004270:	20000458 	.word	0x20000458

08004274 <_fwalk_sglue>:
 8004274:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004278:	4607      	mov	r7, r0
 800427a:	4688      	mov	r8, r1
 800427c:	4614      	mov	r4, r2
 800427e:	2600      	movs	r6, #0
 8004280:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004284:	f1b9 0901 	subs.w	r9, r9, #1
 8004288:	d505      	bpl.n	8004296 <_fwalk_sglue+0x22>
 800428a:	6824      	ldr	r4, [r4, #0]
 800428c:	2c00      	cmp	r4, #0
 800428e:	d1f7      	bne.n	8004280 <_fwalk_sglue+0xc>
 8004290:	4630      	mov	r0, r6
 8004292:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004296:	89ab      	ldrh	r3, [r5, #12]
 8004298:	2b01      	cmp	r3, #1
 800429a:	d907      	bls.n	80042ac <_fwalk_sglue+0x38>
 800429c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80042a0:	3301      	adds	r3, #1
 80042a2:	d003      	beq.n	80042ac <_fwalk_sglue+0x38>
 80042a4:	4629      	mov	r1, r5
 80042a6:	4638      	mov	r0, r7
 80042a8:	47c0      	blx	r8
 80042aa:	4306      	orrs	r6, r0
 80042ac:	3568      	adds	r5, #104	; 0x68
 80042ae:	e7e9      	b.n	8004284 <_fwalk_sglue+0x10>

080042b0 <iprintf>:
 80042b0:	b40f      	push	{r0, r1, r2, r3}
 80042b2:	b507      	push	{r0, r1, r2, lr}
 80042b4:	4906      	ldr	r1, [pc, #24]	; (80042d0 <iprintf+0x20>)
 80042b6:	ab04      	add	r3, sp, #16
 80042b8:	6808      	ldr	r0, [r1, #0]
 80042ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80042be:	6881      	ldr	r1, [r0, #8]
 80042c0:	9301      	str	r3, [sp, #4]
 80042c2:	f001 fcd1 	bl	8005c68 <_vfiprintf_r>
 80042c6:	b003      	add	sp, #12
 80042c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80042cc:	b004      	add	sp, #16
 80042ce:	4770      	bx	lr
 80042d0:	20000068 	.word	0x20000068

080042d4 <_puts_r>:
 80042d4:	6a03      	ldr	r3, [r0, #32]
 80042d6:	b570      	push	{r4, r5, r6, lr}
 80042d8:	4605      	mov	r5, r0
 80042da:	460e      	mov	r6, r1
 80042dc:	6884      	ldr	r4, [r0, #8]
 80042de:	b90b      	cbnz	r3, 80042e4 <_puts_r+0x10>
 80042e0:	f7ff ffb0 	bl	8004244 <__sinit>
 80042e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80042e6:	07db      	lsls	r3, r3, #31
 80042e8:	d405      	bmi.n	80042f6 <_puts_r+0x22>
 80042ea:	89a3      	ldrh	r3, [r4, #12]
 80042ec:	0598      	lsls	r0, r3, #22
 80042ee:	d402      	bmi.n	80042f6 <_puts_r+0x22>
 80042f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80042f2:	f000 f9a0 	bl	8004636 <__retarget_lock_acquire_recursive>
 80042f6:	89a3      	ldrh	r3, [r4, #12]
 80042f8:	0719      	lsls	r1, r3, #28
 80042fa:	d513      	bpl.n	8004324 <_puts_r+0x50>
 80042fc:	6923      	ldr	r3, [r4, #16]
 80042fe:	b18b      	cbz	r3, 8004324 <_puts_r+0x50>
 8004300:	3e01      	subs	r6, #1
 8004302:	68a3      	ldr	r3, [r4, #8]
 8004304:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004308:	3b01      	subs	r3, #1
 800430a:	60a3      	str	r3, [r4, #8]
 800430c:	b9e9      	cbnz	r1, 800434a <_puts_r+0x76>
 800430e:	2b00      	cmp	r3, #0
 8004310:	da2e      	bge.n	8004370 <_puts_r+0x9c>
 8004312:	4622      	mov	r2, r4
 8004314:	210a      	movs	r1, #10
 8004316:	4628      	mov	r0, r5
 8004318:	f000 f87b 	bl	8004412 <__swbuf_r>
 800431c:	3001      	adds	r0, #1
 800431e:	d007      	beq.n	8004330 <_puts_r+0x5c>
 8004320:	250a      	movs	r5, #10
 8004322:	e007      	b.n	8004334 <_puts_r+0x60>
 8004324:	4621      	mov	r1, r4
 8004326:	4628      	mov	r0, r5
 8004328:	f000 f8b0 	bl	800448c <__swsetup_r>
 800432c:	2800      	cmp	r0, #0
 800432e:	d0e7      	beq.n	8004300 <_puts_r+0x2c>
 8004330:	f04f 35ff 	mov.w	r5, #4294967295
 8004334:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004336:	07da      	lsls	r2, r3, #31
 8004338:	d405      	bmi.n	8004346 <_puts_r+0x72>
 800433a:	89a3      	ldrh	r3, [r4, #12]
 800433c:	059b      	lsls	r3, r3, #22
 800433e:	d402      	bmi.n	8004346 <_puts_r+0x72>
 8004340:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004342:	f000 f979 	bl	8004638 <__retarget_lock_release_recursive>
 8004346:	4628      	mov	r0, r5
 8004348:	bd70      	pop	{r4, r5, r6, pc}
 800434a:	2b00      	cmp	r3, #0
 800434c:	da04      	bge.n	8004358 <_puts_r+0x84>
 800434e:	69a2      	ldr	r2, [r4, #24]
 8004350:	429a      	cmp	r2, r3
 8004352:	dc06      	bgt.n	8004362 <_puts_r+0x8e>
 8004354:	290a      	cmp	r1, #10
 8004356:	d004      	beq.n	8004362 <_puts_r+0x8e>
 8004358:	6823      	ldr	r3, [r4, #0]
 800435a:	1c5a      	adds	r2, r3, #1
 800435c:	6022      	str	r2, [r4, #0]
 800435e:	7019      	strb	r1, [r3, #0]
 8004360:	e7cf      	b.n	8004302 <_puts_r+0x2e>
 8004362:	4622      	mov	r2, r4
 8004364:	4628      	mov	r0, r5
 8004366:	f000 f854 	bl	8004412 <__swbuf_r>
 800436a:	3001      	adds	r0, #1
 800436c:	d1c9      	bne.n	8004302 <_puts_r+0x2e>
 800436e:	e7df      	b.n	8004330 <_puts_r+0x5c>
 8004370:	250a      	movs	r5, #10
 8004372:	6823      	ldr	r3, [r4, #0]
 8004374:	1c5a      	adds	r2, r3, #1
 8004376:	6022      	str	r2, [r4, #0]
 8004378:	701d      	strb	r5, [r3, #0]
 800437a:	e7db      	b.n	8004334 <_puts_r+0x60>

0800437c <puts>:
 800437c:	4b02      	ldr	r3, [pc, #8]	; (8004388 <puts+0xc>)
 800437e:	4601      	mov	r1, r0
 8004380:	6818      	ldr	r0, [r3, #0]
 8004382:	f7ff bfa7 	b.w	80042d4 <_puts_r>
 8004386:	bf00      	nop
 8004388:	20000068 	.word	0x20000068

0800438c <__sread>:
 800438c:	b510      	push	{r4, lr}
 800438e:	460c      	mov	r4, r1
 8004390:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004394:	f000 f900 	bl	8004598 <_read_r>
 8004398:	2800      	cmp	r0, #0
 800439a:	bfab      	itete	ge
 800439c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800439e:	89a3      	ldrhlt	r3, [r4, #12]
 80043a0:	181b      	addge	r3, r3, r0
 80043a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80043a6:	bfac      	ite	ge
 80043a8:	6563      	strge	r3, [r4, #84]	; 0x54
 80043aa:	81a3      	strhlt	r3, [r4, #12]
 80043ac:	bd10      	pop	{r4, pc}

080043ae <__swrite>:
 80043ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043b2:	461f      	mov	r7, r3
 80043b4:	898b      	ldrh	r3, [r1, #12]
 80043b6:	4605      	mov	r5, r0
 80043b8:	05db      	lsls	r3, r3, #23
 80043ba:	460c      	mov	r4, r1
 80043bc:	4616      	mov	r6, r2
 80043be:	d505      	bpl.n	80043cc <__swrite+0x1e>
 80043c0:	2302      	movs	r3, #2
 80043c2:	2200      	movs	r2, #0
 80043c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043c8:	f000 f8d4 	bl	8004574 <_lseek_r>
 80043cc:	89a3      	ldrh	r3, [r4, #12]
 80043ce:	4632      	mov	r2, r6
 80043d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80043d4:	81a3      	strh	r3, [r4, #12]
 80043d6:	4628      	mov	r0, r5
 80043d8:	463b      	mov	r3, r7
 80043da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80043de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80043e2:	f000 b8eb 	b.w	80045bc <_write_r>

080043e6 <__sseek>:
 80043e6:	b510      	push	{r4, lr}
 80043e8:	460c      	mov	r4, r1
 80043ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043ee:	f000 f8c1 	bl	8004574 <_lseek_r>
 80043f2:	1c43      	adds	r3, r0, #1
 80043f4:	89a3      	ldrh	r3, [r4, #12]
 80043f6:	bf15      	itete	ne
 80043f8:	6560      	strne	r0, [r4, #84]	; 0x54
 80043fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80043fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004402:	81a3      	strheq	r3, [r4, #12]
 8004404:	bf18      	it	ne
 8004406:	81a3      	strhne	r3, [r4, #12]
 8004408:	bd10      	pop	{r4, pc}

0800440a <__sclose>:
 800440a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800440e:	f000 b8a1 	b.w	8004554 <_close_r>

08004412 <__swbuf_r>:
 8004412:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004414:	460e      	mov	r6, r1
 8004416:	4614      	mov	r4, r2
 8004418:	4605      	mov	r5, r0
 800441a:	b118      	cbz	r0, 8004424 <__swbuf_r+0x12>
 800441c:	6a03      	ldr	r3, [r0, #32]
 800441e:	b90b      	cbnz	r3, 8004424 <__swbuf_r+0x12>
 8004420:	f7ff ff10 	bl	8004244 <__sinit>
 8004424:	69a3      	ldr	r3, [r4, #24]
 8004426:	60a3      	str	r3, [r4, #8]
 8004428:	89a3      	ldrh	r3, [r4, #12]
 800442a:	071a      	lsls	r2, r3, #28
 800442c:	d525      	bpl.n	800447a <__swbuf_r+0x68>
 800442e:	6923      	ldr	r3, [r4, #16]
 8004430:	b31b      	cbz	r3, 800447a <__swbuf_r+0x68>
 8004432:	6823      	ldr	r3, [r4, #0]
 8004434:	6922      	ldr	r2, [r4, #16]
 8004436:	b2f6      	uxtb	r6, r6
 8004438:	1a98      	subs	r0, r3, r2
 800443a:	6963      	ldr	r3, [r4, #20]
 800443c:	4637      	mov	r7, r6
 800443e:	4283      	cmp	r3, r0
 8004440:	dc04      	bgt.n	800444c <__swbuf_r+0x3a>
 8004442:	4621      	mov	r1, r4
 8004444:	4628      	mov	r0, r5
 8004446:	f001 fdab 	bl	8005fa0 <_fflush_r>
 800444a:	b9e0      	cbnz	r0, 8004486 <__swbuf_r+0x74>
 800444c:	68a3      	ldr	r3, [r4, #8]
 800444e:	3b01      	subs	r3, #1
 8004450:	60a3      	str	r3, [r4, #8]
 8004452:	6823      	ldr	r3, [r4, #0]
 8004454:	1c5a      	adds	r2, r3, #1
 8004456:	6022      	str	r2, [r4, #0]
 8004458:	701e      	strb	r6, [r3, #0]
 800445a:	6962      	ldr	r2, [r4, #20]
 800445c:	1c43      	adds	r3, r0, #1
 800445e:	429a      	cmp	r2, r3
 8004460:	d004      	beq.n	800446c <__swbuf_r+0x5a>
 8004462:	89a3      	ldrh	r3, [r4, #12]
 8004464:	07db      	lsls	r3, r3, #31
 8004466:	d506      	bpl.n	8004476 <__swbuf_r+0x64>
 8004468:	2e0a      	cmp	r6, #10
 800446a:	d104      	bne.n	8004476 <__swbuf_r+0x64>
 800446c:	4621      	mov	r1, r4
 800446e:	4628      	mov	r0, r5
 8004470:	f001 fd96 	bl	8005fa0 <_fflush_r>
 8004474:	b938      	cbnz	r0, 8004486 <__swbuf_r+0x74>
 8004476:	4638      	mov	r0, r7
 8004478:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800447a:	4621      	mov	r1, r4
 800447c:	4628      	mov	r0, r5
 800447e:	f000 f805 	bl	800448c <__swsetup_r>
 8004482:	2800      	cmp	r0, #0
 8004484:	d0d5      	beq.n	8004432 <__swbuf_r+0x20>
 8004486:	f04f 37ff 	mov.w	r7, #4294967295
 800448a:	e7f4      	b.n	8004476 <__swbuf_r+0x64>

0800448c <__swsetup_r>:
 800448c:	b538      	push	{r3, r4, r5, lr}
 800448e:	4b2a      	ldr	r3, [pc, #168]	; (8004538 <__swsetup_r+0xac>)
 8004490:	4605      	mov	r5, r0
 8004492:	6818      	ldr	r0, [r3, #0]
 8004494:	460c      	mov	r4, r1
 8004496:	b118      	cbz	r0, 80044a0 <__swsetup_r+0x14>
 8004498:	6a03      	ldr	r3, [r0, #32]
 800449a:	b90b      	cbnz	r3, 80044a0 <__swsetup_r+0x14>
 800449c:	f7ff fed2 	bl	8004244 <__sinit>
 80044a0:	89a3      	ldrh	r3, [r4, #12]
 80044a2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80044a6:	0718      	lsls	r0, r3, #28
 80044a8:	d422      	bmi.n	80044f0 <__swsetup_r+0x64>
 80044aa:	06d9      	lsls	r1, r3, #27
 80044ac:	d407      	bmi.n	80044be <__swsetup_r+0x32>
 80044ae:	2309      	movs	r3, #9
 80044b0:	602b      	str	r3, [r5, #0]
 80044b2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80044b6:	f04f 30ff 	mov.w	r0, #4294967295
 80044ba:	81a3      	strh	r3, [r4, #12]
 80044bc:	e034      	b.n	8004528 <__swsetup_r+0x9c>
 80044be:	0758      	lsls	r0, r3, #29
 80044c0:	d512      	bpl.n	80044e8 <__swsetup_r+0x5c>
 80044c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80044c4:	b141      	cbz	r1, 80044d8 <__swsetup_r+0x4c>
 80044c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80044ca:	4299      	cmp	r1, r3
 80044cc:	d002      	beq.n	80044d4 <__swsetup_r+0x48>
 80044ce:	4628      	mov	r0, r5
 80044d0:	f000 ff2e 	bl	8005330 <_free_r>
 80044d4:	2300      	movs	r3, #0
 80044d6:	6363      	str	r3, [r4, #52]	; 0x34
 80044d8:	89a3      	ldrh	r3, [r4, #12]
 80044da:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80044de:	81a3      	strh	r3, [r4, #12]
 80044e0:	2300      	movs	r3, #0
 80044e2:	6063      	str	r3, [r4, #4]
 80044e4:	6923      	ldr	r3, [r4, #16]
 80044e6:	6023      	str	r3, [r4, #0]
 80044e8:	89a3      	ldrh	r3, [r4, #12]
 80044ea:	f043 0308 	orr.w	r3, r3, #8
 80044ee:	81a3      	strh	r3, [r4, #12]
 80044f0:	6923      	ldr	r3, [r4, #16]
 80044f2:	b94b      	cbnz	r3, 8004508 <__swsetup_r+0x7c>
 80044f4:	89a3      	ldrh	r3, [r4, #12]
 80044f6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80044fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044fe:	d003      	beq.n	8004508 <__swsetup_r+0x7c>
 8004500:	4621      	mov	r1, r4
 8004502:	4628      	mov	r0, r5
 8004504:	f001 fd99 	bl	800603a <__smakebuf_r>
 8004508:	89a0      	ldrh	r0, [r4, #12]
 800450a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800450e:	f010 0301 	ands.w	r3, r0, #1
 8004512:	d00a      	beq.n	800452a <__swsetup_r+0x9e>
 8004514:	2300      	movs	r3, #0
 8004516:	60a3      	str	r3, [r4, #8]
 8004518:	6963      	ldr	r3, [r4, #20]
 800451a:	425b      	negs	r3, r3
 800451c:	61a3      	str	r3, [r4, #24]
 800451e:	6923      	ldr	r3, [r4, #16]
 8004520:	b943      	cbnz	r3, 8004534 <__swsetup_r+0xa8>
 8004522:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004526:	d1c4      	bne.n	80044b2 <__swsetup_r+0x26>
 8004528:	bd38      	pop	{r3, r4, r5, pc}
 800452a:	0781      	lsls	r1, r0, #30
 800452c:	bf58      	it	pl
 800452e:	6963      	ldrpl	r3, [r4, #20]
 8004530:	60a3      	str	r3, [r4, #8]
 8004532:	e7f4      	b.n	800451e <__swsetup_r+0x92>
 8004534:	2000      	movs	r0, #0
 8004536:	e7f7      	b.n	8004528 <__swsetup_r+0x9c>
 8004538:	20000068 	.word	0x20000068

0800453c <memset>:
 800453c:	4603      	mov	r3, r0
 800453e:	4402      	add	r2, r0
 8004540:	4293      	cmp	r3, r2
 8004542:	d100      	bne.n	8004546 <memset+0xa>
 8004544:	4770      	bx	lr
 8004546:	f803 1b01 	strb.w	r1, [r3], #1
 800454a:	e7f9      	b.n	8004540 <memset+0x4>

0800454c <_localeconv_r>:
 800454c:	4800      	ldr	r0, [pc, #0]	; (8004550 <_localeconv_r+0x4>)
 800454e:	4770      	bx	lr
 8004550:	2000015c 	.word	0x2000015c

08004554 <_close_r>:
 8004554:	b538      	push	{r3, r4, r5, lr}
 8004556:	2300      	movs	r3, #0
 8004558:	4d05      	ldr	r5, [pc, #20]	; (8004570 <_close_r+0x1c>)
 800455a:	4604      	mov	r4, r0
 800455c:	4608      	mov	r0, r1
 800455e:	602b      	str	r3, [r5, #0]
 8004560:	f7fd fe99 	bl	8002296 <_close>
 8004564:	1c43      	adds	r3, r0, #1
 8004566:	d102      	bne.n	800456e <_close_r+0x1a>
 8004568:	682b      	ldr	r3, [r5, #0]
 800456a:	b103      	cbz	r3, 800456e <_close_r+0x1a>
 800456c:	6023      	str	r3, [r4, #0]
 800456e:	bd38      	pop	{r3, r4, r5, pc}
 8004570:	2000045c 	.word	0x2000045c

08004574 <_lseek_r>:
 8004574:	b538      	push	{r3, r4, r5, lr}
 8004576:	4604      	mov	r4, r0
 8004578:	4608      	mov	r0, r1
 800457a:	4611      	mov	r1, r2
 800457c:	2200      	movs	r2, #0
 800457e:	4d05      	ldr	r5, [pc, #20]	; (8004594 <_lseek_r+0x20>)
 8004580:	602a      	str	r2, [r5, #0]
 8004582:	461a      	mov	r2, r3
 8004584:	f7fd feab 	bl	80022de <_lseek>
 8004588:	1c43      	adds	r3, r0, #1
 800458a:	d102      	bne.n	8004592 <_lseek_r+0x1e>
 800458c:	682b      	ldr	r3, [r5, #0]
 800458e:	b103      	cbz	r3, 8004592 <_lseek_r+0x1e>
 8004590:	6023      	str	r3, [r4, #0]
 8004592:	bd38      	pop	{r3, r4, r5, pc}
 8004594:	2000045c 	.word	0x2000045c

08004598 <_read_r>:
 8004598:	b538      	push	{r3, r4, r5, lr}
 800459a:	4604      	mov	r4, r0
 800459c:	4608      	mov	r0, r1
 800459e:	4611      	mov	r1, r2
 80045a0:	2200      	movs	r2, #0
 80045a2:	4d05      	ldr	r5, [pc, #20]	; (80045b8 <_read_r+0x20>)
 80045a4:	602a      	str	r2, [r5, #0]
 80045a6:	461a      	mov	r2, r3
 80045a8:	f7fd fe3c 	bl	8002224 <_read>
 80045ac:	1c43      	adds	r3, r0, #1
 80045ae:	d102      	bne.n	80045b6 <_read_r+0x1e>
 80045b0:	682b      	ldr	r3, [r5, #0]
 80045b2:	b103      	cbz	r3, 80045b6 <_read_r+0x1e>
 80045b4:	6023      	str	r3, [r4, #0]
 80045b6:	bd38      	pop	{r3, r4, r5, pc}
 80045b8:	2000045c 	.word	0x2000045c

080045bc <_write_r>:
 80045bc:	b538      	push	{r3, r4, r5, lr}
 80045be:	4604      	mov	r4, r0
 80045c0:	4608      	mov	r0, r1
 80045c2:	4611      	mov	r1, r2
 80045c4:	2200      	movs	r2, #0
 80045c6:	4d05      	ldr	r5, [pc, #20]	; (80045dc <_write_r+0x20>)
 80045c8:	602a      	str	r2, [r5, #0]
 80045ca:	461a      	mov	r2, r3
 80045cc:	f7fd fe47 	bl	800225e <_write>
 80045d0:	1c43      	adds	r3, r0, #1
 80045d2:	d102      	bne.n	80045da <_write_r+0x1e>
 80045d4:	682b      	ldr	r3, [r5, #0]
 80045d6:	b103      	cbz	r3, 80045da <_write_r+0x1e>
 80045d8:	6023      	str	r3, [r4, #0]
 80045da:	bd38      	pop	{r3, r4, r5, pc}
 80045dc:	2000045c 	.word	0x2000045c

080045e0 <__errno>:
 80045e0:	4b01      	ldr	r3, [pc, #4]	; (80045e8 <__errno+0x8>)
 80045e2:	6818      	ldr	r0, [r3, #0]
 80045e4:	4770      	bx	lr
 80045e6:	bf00      	nop
 80045e8:	20000068 	.word	0x20000068

080045ec <__libc_init_array>:
 80045ec:	b570      	push	{r4, r5, r6, lr}
 80045ee:	2600      	movs	r6, #0
 80045f0:	4d0c      	ldr	r5, [pc, #48]	; (8004624 <__libc_init_array+0x38>)
 80045f2:	4c0d      	ldr	r4, [pc, #52]	; (8004628 <__libc_init_array+0x3c>)
 80045f4:	1b64      	subs	r4, r4, r5
 80045f6:	10a4      	asrs	r4, r4, #2
 80045f8:	42a6      	cmp	r6, r4
 80045fa:	d109      	bne.n	8004610 <__libc_init_array+0x24>
 80045fc:	f002 fddc 	bl	80071b8 <_init>
 8004600:	2600      	movs	r6, #0
 8004602:	4d0a      	ldr	r5, [pc, #40]	; (800462c <__libc_init_array+0x40>)
 8004604:	4c0a      	ldr	r4, [pc, #40]	; (8004630 <__libc_init_array+0x44>)
 8004606:	1b64      	subs	r4, r4, r5
 8004608:	10a4      	asrs	r4, r4, #2
 800460a:	42a6      	cmp	r6, r4
 800460c:	d105      	bne.n	800461a <__libc_init_array+0x2e>
 800460e:	bd70      	pop	{r4, r5, r6, pc}
 8004610:	f855 3b04 	ldr.w	r3, [r5], #4
 8004614:	4798      	blx	r3
 8004616:	3601      	adds	r6, #1
 8004618:	e7ee      	b.n	80045f8 <__libc_init_array+0xc>
 800461a:	f855 3b04 	ldr.w	r3, [r5], #4
 800461e:	4798      	blx	r3
 8004620:	3601      	adds	r6, #1
 8004622:	e7f2      	b.n	800460a <__libc_init_array+0x1e>
 8004624:	08007674 	.word	0x08007674
 8004628:	08007674 	.word	0x08007674
 800462c:	08007674 	.word	0x08007674
 8004630:	08007678 	.word	0x08007678

08004634 <__retarget_lock_init_recursive>:
 8004634:	4770      	bx	lr

08004636 <__retarget_lock_acquire_recursive>:
 8004636:	4770      	bx	lr

08004638 <__retarget_lock_release_recursive>:
 8004638:	4770      	bx	lr

0800463a <memchr>:
 800463a:	4603      	mov	r3, r0
 800463c:	b510      	push	{r4, lr}
 800463e:	b2c9      	uxtb	r1, r1
 8004640:	4402      	add	r2, r0
 8004642:	4293      	cmp	r3, r2
 8004644:	4618      	mov	r0, r3
 8004646:	d101      	bne.n	800464c <memchr+0x12>
 8004648:	2000      	movs	r0, #0
 800464a:	e003      	b.n	8004654 <memchr+0x1a>
 800464c:	7804      	ldrb	r4, [r0, #0]
 800464e:	3301      	adds	r3, #1
 8004650:	428c      	cmp	r4, r1
 8004652:	d1f6      	bne.n	8004642 <memchr+0x8>
 8004654:	bd10      	pop	{r4, pc}

08004656 <quorem>:
 8004656:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800465a:	6903      	ldr	r3, [r0, #16]
 800465c:	690c      	ldr	r4, [r1, #16]
 800465e:	4607      	mov	r7, r0
 8004660:	42a3      	cmp	r3, r4
 8004662:	db7f      	blt.n	8004764 <quorem+0x10e>
 8004664:	3c01      	subs	r4, #1
 8004666:	f100 0514 	add.w	r5, r0, #20
 800466a:	f101 0814 	add.w	r8, r1, #20
 800466e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004672:	9301      	str	r3, [sp, #4]
 8004674:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004678:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800467c:	3301      	adds	r3, #1
 800467e:	429a      	cmp	r2, r3
 8004680:	fbb2 f6f3 	udiv	r6, r2, r3
 8004684:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004688:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800468c:	d331      	bcc.n	80046f2 <quorem+0x9c>
 800468e:	f04f 0e00 	mov.w	lr, #0
 8004692:	4640      	mov	r0, r8
 8004694:	46ac      	mov	ip, r5
 8004696:	46f2      	mov	sl, lr
 8004698:	f850 2b04 	ldr.w	r2, [r0], #4
 800469c:	b293      	uxth	r3, r2
 800469e:	fb06 e303 	mla	r3, r6, r3, lr
 80046a2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80046a6:	0c1a      	lsrs	r2, r3, #16
 80046a8:	b29b      	uxth	r3, r3
 80046aa:	fb06 220e 	mla	r2, r6, lr, r2
 80046ae:	ebaa 0303 	sub.w	r3, sl, r3
 80046b2:	f8dc a000 	ldr.w	sl, [ip]
 80046b6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80046ba:	fa1f fa8a 	uxth.w	sl, sl
 80046be:	4453      	add	r3, sl
 80046c0:	f8dc a000 	ldr.w	sl, [ip]
 80046c4:	b292      	uxth	r2, r2
 80046c6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80046ca:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80046ce:	b29b      	uxth	r3, r3
 80046d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80046d4:	4581      	cmp	r9, r0
 80046d6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80046da:	f84c 3b04 	str.w	r3, [ip], #4
 80046de:	d2db      	bcs.n	8004698 <quorem+0x42>
 80046e0:	f855 300b 	ldr.w	r3, [r5, fp]
 80046e4:	b92b      	cbnz	r3, 80046f2 <quorem+0x9c>
 80046e6:	9b01      	ldr	r3, [sp, #4]
 80046e8:	3b04      	subs	r3, #4
 80046ea:	429d      	cmp	r5, r3
 80046ec:	461a      	mov	r2, r3
 80046ee:	d32d      	bcc.n	800474c <quorem+0xf6>
 80046f0:	613c      	str	r4, [r7, #16]
 80046f2:	4638      	mov	r0, r7
 80046f4:	f001 f992 	bl	8005a1c <__mcmp>
 80046f8:	2800      	cmp	r0, #0
 80046fa:	db23      	blt.n	8004744 <quorem+0xee>
 80046fc:	4629      	mov	r1, r5
 80046fe:	2000      	movs	r0, #0
 8004700:	3601      	adds	r6, #1
 8004702:	f858 2b04 	ldr.w	r2, [r8], #4
 8004706:	f8d1 c000 	ldr.w	ip, [r1]
 800470a:	b293      	uxth	r3, r2
 800470c:	1ac3      	subs	r3, r0, r3
 800470e:	0c12      	lsrs	r2, r2, #16
 8004710:	fa1f f08c 	uxth.w	r0, ip
 8004714:	4403      	add	r3, r0
 8004716:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800471a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800471e:	b29b      	uxth	r3, r3
 8004720:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004724:	45c1      	cmp	r9, r8
 8004726:	ea4f 4022 	mov.w	r0, r2, asr #16
 800472a:	f841 3b04 	str.w	r3, [r1], #4
 800472e:	d2e8      	bcs.n	8004702 <quorem+0xac>
 8004730:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004734:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004738:	b922      	cbnz	r2, 8004744 <quorem+0xee>
 800473a:	3b04      	subs	r3, #4
 800473c:	429d      	cmp	r5, r3
 800473e:	461a      	mov	r2, r3
 8004740:	d30a      	bcc.n	8004758 <quorem+0x102>
 8004742:	613c      	str	r4, [r7, #16]
 8004744:	4630      	mov	r0, r6
 8004746:	b003      	add	sp, #12
 8004748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800474c:	6812      	ldr	r2, [r2, #0]
 800474e:	3b04      	subs	r3, #4
 8004750:	2a00      	cmp	r2, #0
 8004752:	d1cd      	bne.n	80046f0 <quorem+0x9a>
 8004754:	3c01      	subs	r4, #1
 8004756:	e7c8      	b.n	80046ea <quorem+0x94>
 8004758:	6812      	ldr	r2, [r2, #0]
 800475a:	3b04      	subs	r3, #4
 800475c:	2a00      	cmp	r2, #0
 800475e:	d1f0      	bne.n	8004742 <quorem+0xec>
 8004760:	3c01      	subs	r4, #1
 8004762:	e7eb      	b.n	800473c <quorem+0xe6>
 8004764:	2000      	movs	r0, #0
 8004766:	e7ee      	b.n	8004746 <quorem+0xf0>

08004768 <_dtoa_r>:
 8004768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800476c:	4616      	mov	r6, r2
 800476e:	461f      	mov	r7, r3
 8004770:	69c4      	ldr	r4, [r0, #28]
 8004772:	b099      	sub	sp, #100	; 0x64
 8004774:	4605      	mov	r5, r0
 8004776:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800477a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800477e:	b974      	cbnz	r4, 800479e <_dtoa_r+0x36>
 8004780:	2010      	movs	r0, #16
 8004782:	f000 fe1d 	bl	80053c0 <malloc>
 8004786:	4602      	mov	r2, r0
 8004788:	61e8      	str	r0, [r5, #28]
 800478a:	b920      	cbnz	r0, 8004796 <_dtoa_r+0x2e>
 800478c:	21ef      	movs	r1, #239	; 0xef
 800478e:	4bac      	ldr	r3, [pc, #688]	; (8004a40 <_dtoa_r+0x2d8>)
 8004790:	48ac      	ldr	r0, [pc, #688]	; (8004a44 <_dtoa_r+0x2dc>)
 8004792:	f001 fccf 	bl	8006134 <__assert_func>
 8004796:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800479a:	6004      	str	r4, [r0, #0]
 800479c:	60c4      	str	r4, [r0, #12]
 800479e:	69eb      	ldr	r3, [r5, #28]
 80047a0:	6819      	ldr	r1, [r3, #0]
 80047a2:	b151      	cbz	r1, 80047ba <_dtoa_r+0x52>
 80047a4:	685a      	ldr	r2, [r3, #4]
 80047a6:	2301      	movs	r3, #1
 80047a8:	4093      	lsls	r3, r2
 80047aa:	604a      	str	r2, [r1, #4]
 80047ac:	608b      	str	r3, [r1, #8]
 80047ae:	4628      	mov	r0, r5
 80047b0:	f000 fefa 	bl	80055a8 <_Bfree>
 80047b4:	2200      	movs	r2, #0
 80047b6:	69eb      	ldr	r3, [r5, #28]
 80047b8:	601a      	str	r2, [r3, #0]
 80047ba:	1e3b      	subs	r3, r7, #0
 80047bc:	bfaf      	iteee	ge
 80047be:	2300      	movge	r3, #0
 80047c0:	2201      	movlt	r2, #1
 80047c2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80047c6:	9305      	strlt	r3, [sp, #20]
 80047c8:	bfa8      	it	ge
 80047ca:	f8c8 3000 	strge.w	r3, [r8]
 80047ce:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80047d2:	4b9d      	ldr	r3, [pc, #628]	; (8004a48 <_dtoa_r+0x2e0>)
 80047d4:	bfb8      	it	lt
 80047d6:	f8c8 2000 	strlt.w	r2, [r8]
 80047da:	ea33 0309 	bics.w	r3, r3, r9
 80047de:	d119      	bne.n	8004814 <_dtoa_r+0xac>
 80047e0:	f242 730f 	movw	r3, #9999	; 0x270f
 80047e4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80047e6:	6013      	str	r3, [r2, #0]
 80047e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80047ec:	4333      	orrs	r3, r6
 80047ee:	f000 8589 	beq.w	8005304 <_dtoa_r+0xb9c>
 80047f2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80047f4:	b953      	cbnz	r3, 800480c <_dtoa_r+0xa4>
 80047f6:	4b95      	ldr	r3, [pc, #596]	; (8004a4c <_dtoa_r+0x2e4>)
 80047f8:	e023      	b.n	8004842 <_dtoa_r+0xda>
 80047fa:	4b95      	ldr	r3, [pc, #596]	; (8004a50 <_dtoa_r+0x2e8>)
 80047fc:	9303      	str	r3, [sp, #12]
 80047fe:	3308      	adds	r3, #8
 8004800:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004802:	6013      	str	r3, [r2, #0]
 8004804:	9803      	ldr	r0, [sp, #12]
 8004806:	b019      	add	sp, #100	; 0x64
 8004808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800480c:	4b8f      	ldr	r3, [pc, #572]	; (8004a4c <_dtoa_r+0x2e4>)
 800480e:	9303      	str	r3, [sp, #12]
 8004810:	3303      	adds	r3, #3
 8004812:	e7f5      	b.n	8004800 <_dtoa_r+0x98>
 8004814:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004818:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800481c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004820:	2200      	movs	r2, #0
 8004822:	2300      	movs	r3, #0
 8004824:	f7fc f8c0 	bl	80009a8 <__aeabi_dcmpeq>
 8004828:	4680      	mov	r8, r0
 800482a:	b160      	cbz	r0, 8004846 <_dtoa_r+0xde>
 800482c:	2301      	movs	r3, #1
 800482e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004830:	6013      	str	r3, [r2, #0]
 8004832:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004834:	2b00      	cmp	r3, #0
 8004836:	f000 8562 	beq.w	80052fe <_dtoa_r+0xb96>
 800483a:	4b86      	ldr	r3, [pc, #536]	; (8004a54 <_dtoa_r+0x2ec>)
 800483c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800483e:	6013      	str	r3, [r2, #0]
 8004840:	3b01      	subs	r3, #1
 8004842:	9303      	str	r3, [sp, #12]
 8004844:	e7de      	b.n	8004804 <_dtoa_r+0x9c>
 8004846:	ab16      	add	r3, sp, #88	; 0x58
 8004848:	9301      	str	r3, [sp, #4]
 800484a:	ab17      	add	r3, sp, #92	; 0x5c
 800484c:	9300      	str	r3, [sp, #0]
 800484e:	4628      	mov	r0, r5
 8004850:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004854:	f001 f98a 	bl	8005b6c <__d2b>
 8004858:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800485c:	4682      	mov	sl, r0
 800485e:	2c00      	cmp	r4, #0
 8004860:	d07e      	beq.n	8004960 <_dtoa_r+0x1f8>
 8004862:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004866:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004868:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800486c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004870:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8004874:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8004878:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800487c:	4619      	mov	r1, r3
 800487e:	2200      	movs	r2, #0
 8004880:	4b75      	ldr	r3, [pc, #468]	; (8004a58 <_dtoa_r+0x2f0>)
 8004882:	f7fb fc71 	bl	8000168 <__aeabi_dsub>
 8004886:	a368      	add	r3, pc, #416	; (adr r3, 8004a28 <_dtoa_r+0x2c0>)
 8004888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800488c:	f7fb fe24 	bl	80004d8 <__aeabi_dmul>
 8004890:	a367      	add	r3, pc, #412	; (adr r3, 8004a30 <_dtoa_r+0x2c8>)
 8004892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004896:	f7fb fc69 	bl	800016c <__adddf3>
 800489a:	4606      	mov	r6, r0
 800489c:	4620      	mov	r0, r4
 800489e:	460f      	mov	r7, r1
 80048a0:	f7fb fdb0 	bl	8000404 <__aeabi_i2d>
 80048a4:	a364      	add	r3, pc, #400	; (adr r3, 8004a38 <_dtoa_r+0x2d0>)
 80048a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048aa:	f7fb fe15 	bl	80004d8 <__aeabi_dmul>
 80048ae:	4602      	mov	r2, r0
 80048b0:	460b      	mov	r3, r1
 80048b2:	4630      	mov	r0, r6
 80048b4:	4639      	mov	r1, r7
 80048b6:	f7fb fc59 	bl	800016c <__adddf3>
 80048ba:	4606      	mov	r6, r0
 80048bc:	460f      	mov	r7, r1
 80048be:	f7fc f8bb 	bl	8000a38 <__aeabi_d2iz>
 80048c2:	2200      	movs	r2, #0
 80048c4:	4683      	mov	fp, r0
 80048c6:	2300      	movs	r3, #0
 80048c8:	4630      	mov	r0, r6
 80048ca:	4639      	mov	r1, r7
 80048cc:	f7fc f876 	bl	80009bc <__aeabi_dcmplt>
 80048d0:	b148      	cbz	r0, 80048e6 <_dtoa_r+0x17e>
 80048d2:	4658      	mov	r0, fp
 80048d4:	f7fb fd96 	bl	8000404 <__aeabi_i2d>
 80048d8:	4632      	mov	r2, r6
 80048da:	463b      	mov	r3, r7
 80048dc:	f7fc f864 	bl	80009a8 <__aeabi_dcmpeq>
 80048e0:	b908      	cbnz	r0, 80048e6 <_dtoa_r+0x17e>
 80048e2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80048e6:	f1bb 0f16 	cmp.w	fp, #22
 80048ea:	d857      	bhi.n	800499c <_dtoa_r+0x234>
 80048ec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80048f0:	4b5a      	ldr	r3, [pc, #360]	; (8004a5c <_dtoa_r+0x2f4>)
 80048f2:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80048f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048fa:	f7fc f85f 	bl	80009bc <__aeabi_dcmplt>
 80048fe:	2800      	cmp	r0, #0
 8004900:	d04e      	beq.n	80049a0 <_dtoa_r+0x238>
 8004902:	2300      	movs	r3, #0
 8004904:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004908:	930f      	str	r3, [sp, #60]	; 0x3c
 800490a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800490c:	1b1b      	subs	r3, r3, r4
 800490e:	1e5a      	subs	r2, r3, #1
 8004910:	bf46      	itte	mi
 8004912:	f1c3 0901 	rsbmi	r9, r3, #1
 8004916:	2300      	movmi	r3, #0
 8004918:	f04f 0900 	movpl.w	r9, #0
 800491c:	9209      	str	r2, [sp, #36]	; 0x24
 800491e:	bf48      	it	mi
 8004920:	9309      	strmi	r3, [sp, #36]	; 0x24
 8004922:	f1bb 0f00 	cmp.w	fp, #0
 8004926:	db3d      	blt.n	80049a4 <_dtoa_r+0x23c>
 8004928:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800492a:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800492e:	445b      	add	r3, fp
 8004930:	9309      	str	r3, [sp, #36]	; 0x24
 8004932:	2300      	movs	r3, #0
 8004934:	930a      	str	r3, [sp, #40]	; 0x28
 8004936:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004938:	2b09      	cmp	r3, #9
 800493a:	d867      	bhi.n	8004a0c <_dtoa_r+0x2a4>
 800493c:	2b05      	cmp	r3, #5
 800493e:	bfc4      	itt	gt
 8004940:	3b04      	subgt	r3, #4
 8004942:	9322      	strgt	r3, [sp, #136]	; 0x88
 8004944:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004946:	bfc8      	it	gt
 8004948:	2400      	movgt	r4, #0
 800494a:	f1a3 0302 	sub.w	r3, r3, #2
 800494e:	bfd8      	it	le
 8004950:	2401      	movle	r4, #1
 8004952:	2b03      	cmp	r3, #3
 8004954:	f200 8086 	bhi.w	8004a64 <_dtoa_r+0x2fc>
 8004958:	e8df f003 	tbb	[pc, r3]
 800495c:	5637392c 	.word	0x5637392c
 8004960:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8004964:	441c      	add	r4, r3
 8004966:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800496a:	2b20      	cmp	r3, #32
 800496c:	bfc1      	itttt	gt
 800496e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004972:	fa09 f903 	lslgt.w	r9, r9, r3
 8004976:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 800497a:	fa26 f303 	lsrgt.w	r3, r6, r3
 800497e:	bfd6      	itet	le
 8004980:	f1c3 0320 	rsble	r3, r3, #32
 8004984:	ea49 0003 	orrgt.w	r0, r9, r3
 8004988:	fa06 f003 	lslle.w	r0, r6, r3
 800498c:	f7fb fd2a 	bl	80003e4 <__aeabi_ui2d>
 8004990:	2201      	movs	r2, #1
 8004992:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8004996:	3c01      	subs	r4, #1
 8004998:	9213      	str	r2, [sp, #76]	; 0x4c
 800499a:	e76f      	b.n	800487c <_dtoa_r+0x114>
 800499c:	2301      	movs	r3, #1
 800499e:	e7b3      	b.n	8004908 <_dtoa_r+0x1a0>
 80049a0:	900f      	str	r0, [sp, #60]	; 0x3c
 80049a2:	e7b2      	b.n	800490a <_dtoa_r+0x1a2>
 80049a4:	f1cb 0300 	rsb	r3, fp, #0
 80049a8:	930a      	str	r3, [sp, #40]	; 0x28
 80049aa:	2300      	movs	r3, #0
 80049ac:	eba9 090b 	sub.w	r9, r9, fp
 80049b0:	930e      	str	r3, [sp, #56]	; 0x38
 80049b2:	e7c0      	b.n	8004936 <_dtoa_r+0x1ce>
 80049b4:	2300      	movs	r3, #0
 80049b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80049b8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	dc55      	bgt.n	8004a6a <_dtoa_r+0x302>
 80049be:	2301      	movs	r3, #1
 80049c0:	461a      	mov	r2, r3
 80049c2:	9306      	str	r3, [sp, #24]
 80049c4:	9308      	str	r3, [sp, #32]
 80049c6:	9223      	str	r2, [sp, #140]	; 0x8c
 80049c8:	e00b      	b.n	80049e2 <_dtoa_r+0x27a>
 80049ca:	2301      	movs	r3, #1
 80049cc:	e7f3      	b.n	80049b6 <_dtoa_r+0x24e>
 80049ce:	2300      	movs	r3, #0
 80049d0:	930b      	str	r3, [sp, #44]	; 0x2c
 80049d2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80049d4:	445b      	add	r3, fp
 80049d6:	9306      	str	r3, [sp, #24]
 80049d8:	3301      	adds	r3, #1
 80049da:	2b01      	cmp	r3, #1
 80049dc:	9308      	str	r3, [sp, #32]
 80049de:	bfb8      	it	lt
 80049e0:	2301      	movlt	r3, #1
 80049e2:	2100      	movs	r1, #0
 80049e4:	2204      	movs	r2, #4
 80049e6:	69e8      	ldr	r0, [r5, #28]
 80049e8:	f102 0614 	add.w	r6, r2, #20
 80049ec:	429e      	cmp	r6, r3
 80049ee:	d940      	bls.n	8004a72 <_dtoa_r+0x30a>
 80049f0:	6041      	str	r1, [r0, #4]
 80049f2:	4628      	mov	r0, r5
 80049f4:	f000 fd98 	bl	8005528 <_Balloc>
 80049f8:	9003      	str	r0, [sp, #12]
 80049fa:	2800      	cmp	r0, #0
 80049fc:	d13c      	bne.n	8004a78 <_dtoa_r+0x310>
 80049fe:	4602      	mov	r2, r0
 8004a00:	f240 11af 	movw	r1, #431	; 0x1af
 8004a04:	4b16      	ldr	r3, [pc, #88]	; (8004a60 <_dtoa_r+0x2f8>)
 8004a06:	e6c3      	b.n	8004790 <_dtoa_r+0x28>
 8004a08:	2301      	movs	r3, #1
 8004a0a:	e7e1      	b.n	80049d0 <_dtoa_r+0x268>
 8004a0c:	2401      	movs	r4, #1
 8004a0e:	2300      	movs	r3, #0
 8004a10:	940b      	str	r4, [sp, #44]	; 0x2c
 8004a12:	9322      	str	r3, [sp, #136]	; 0x88
 8004a14:	f04f 33ff 	mov.w	r3, #4294967295
 8004a18:	2200      	movs	r2, #0
 8004a1a:	9306      	str	r3, [sp, #24]
 8004a1c:	9308      	str	r3, [sp, #32]
 8004a1e:	2312      	movs	r3, #18
 8004a20:	e7d1      	b.n	80049c6 <_dtoa_r+0x25e>
 8004a22:	bf00      	nop
 8004a24:	f3af 8000 	nop.w
 8004a28:	636f4361 	.word	0x636f4361
 8004a2c:	3fd287a7 	.word	0x3fd287a7
 8004a30:	8b60c8b3 	.word	0x8b60c8b3
 8004a34:	3fc68a28 	.word	0x3fc68a28
 8004a38:	509f79fb 	.word	0x509f79fb
 8004a3c:	3fd34413 	.word	0x3fd34413
 8004a40:	080072f3 	.word	0x080072f3
 8004a44:	0800730a 	.word	0x0800730a
 8004a48:	7ff00000 	.word	0x7ff00000
 8004a4c:	080072ef 	.word	0x080072ef
 8004a50:	080072e6 	.word	0x080072e6
 8004a54:	080072c3 	.word	0x080072c3
 8004a58:	3ff80000 	.word	0x3ff80000
 8004a5c:	080073f8 	.word	0x080073f8
 8004a60:	08007362 	.word	0x08007362
 8004a64:	2301      	movs	r3, #1
 8004a66:	930b      	str	r3, [sp, #44]	; 0x2c
 8004a68:	e7d4      	b.n	8004a14 <_dtoa_r+0x2ac>
 8004a6a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004a6c:	9306      	str	r3, [sp, #24]
 8004a6e:	9308      	str	r3, [sp, #32]
 8004a70:	e7b7      	b.n	80049e2 <_dtoa_r+0x27a>
 8004a72:	3101      	adds	r1, #1
 8004a74:	0052      	lsls	r2, r2, #1
 8004a76:	e7b7      	b.n	80049e8 <_dtoa_r+0x280>
 8004a78:	69eb      	ldr	r3, [r5, #28]
 8004a7a:	9a03      	ldr	r2, [sp, #12]
 8004a7c:	601a      	str	r2, [r3, #0]
 8004a7e:	9b08      	ldr	r3, [sp, #32]
 8004a80:	2b0e      	cmp	r3, #14
 8004a82:	f200 80a8 	bhi.w	8004bd6 <_dtoa_r+0x46e>
 8004a86:	2c00      	cmp	r4, #0
 8004a88:	f000 80a5 	beq.w	8004bd6 <_dtoa_r+0x46e>
 8004a8c:	f1bb 0f00 	cmp.w	fp, #0
 8004a90:	dd34      	ble.n	8004afc <_dtoa_r+0x394>
 8004a92:	4b9a      	ldr	r3, [pc, #616]	; (8004cfc <_dtoa_r+0x594>)
 8004a94:	f00b 020f 	and.w	r2, fp, #15
 8004a98:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004a9c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8004aa0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004aa4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004aa8:	ea4f 142b 	mov.w	r4, fp, asr #4
 8004aac:	d016      	beq.n	8004adc <_dtoa_r+0x374>
 8004aae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004ab2:	4b93      	ldr	r3, [pc, #588]	; (8004d00 <_dtoa_r+0x598>)
 8004ab4:	2703      	movs	r7, #3
 8004ab6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004aba:	f7fb fe37 	bl	800072c <__aeabi_ddiv>
 8004abe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004ac2:	f004 040f 	and.w	r4, r4, #15
 8004ac6:	4e8e      	ldr	r6, [pc, #568]	; (8004d00 <_dtoa_r+0x598>)
 8004ac8:	b954      	cbnz	r4, 8004ae0 <_dtoa_r+0x378>
 8004aca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004ace:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004ad2:	f7fb fe2b 	bl	800072c <__aeabi_ddiv>
 8004ad6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004ada:	e029      	b.n	8004b30 <_dtoa_r+0x3c8>
 8004adc:	2702      	movs	r7, #2
 8004ade:	e7f2      	b.n	8004ac6 <_dtoa_r+0x35e>
 8004ae0:	07e1      	lsls	r1, r4, #31
 8004ae2:	d508      	bpl.n	8004af6 <_dtoa_r+0x38e>
 8004ae4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004ae8:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004aec:	f7fb fcf4 	bl	80004d8 <__aeabi_dmul>
 8004af0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004af4:	3701      	adds	r7, #1
 8004af6:	1064      	asrs	r4, r4, #1
 8004af8:	3608      	adds	r6, #8
 8004afa:	e7e5      	b.n	8004ac8 <_dtoa_r+0x360>
 8004afc:	f000 80a5 	beq.w	8004c4a <_dtoa_r+0x4e2>
 8004b00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004b04:	f1cb 0400 	rsb	r4, fp, #0
 8004b08:	4b7c      	ldr	r3, [pc, #496]	; (8004cfc <_dtoa_r+0x594>)
 8004b0a:	f004 020f 	and.w	r2, r4, #15
 8004b0e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b16:	f7fb fcdf 	bl	80004d8 <__aeabi_dmul>
 8004b1a:	2702      	movs	r7, #2
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004b22:	4e77      	ldr	r6, [pc, #476]	; (8004d00 <_dtoa_r+0x598>)
 8004b24:	1124      	asrs	r4, r4, #4
 8004b26:	2c00      	cmp	r4, #0
 8004b28:	f040 8084 	bne.w	8004c34 <_dtoa_r+0x4cc>
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d1d2      	bne.n	8004ad6 <_dtoa_r+0x36e>
 8004b30:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004b34:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004b38:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	f000 8087 	beq.w	8004c4e <_dtoa_r+0x4e6>
 8004b40:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004b44:	2200      	movs	r2, #0
 8004b46:	4b6f      	ldr	r3, [pc, #444]	; (8004d04 <_dtoa_r+0x59c>)
 8004b48:	f7fb ff38 	bl	80009bc <__aeabi_dcmplt>
 8004b4c:	2800      	cmp	r0, #0
 8004b4e:	d07e      	beq.n	8004c4e <_dtoa_r+0x4e6>
 8004b50:	9b08      	ldr	r3, [sp, #32]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d07b      	beq.n	8004c4e <_dtoa_r+0x4e6>
 8004b56:	9b06      	ldr	r3, [sp, #24]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	dd38      	ble.n	8004bce <_dtoa_r+0x466>
 8004b5c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004b60:	2200      	movs	r2, #0
 8004b62:	4b69      	ldr	r3, [pc, #420]	; (8004d08 <_dtoa_r+0x5a0>)
 8004b64:	f7fb fcb8 	bl	80004d8 <__aeabi_dmul>
 8004b68:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004b6c:	9c06      	ldr	r4, [sp, #24]
 8004b6e:	f10b 38ff 	add.w	r8, fp, #4294967295
 8004b72:	3701      	adds	r7, #1
 8004b74:	4638      	mov	r0, r7
 8004b76:	f7fb fc45 	bl	8000404 <__aeabi_i2d>
 8004b7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004b7e:	f7fb fcab 	bl	80004d8 <__aeabi_dmul>
 8004b82:	2200      	movs	r2, #0
 8004b84:	4b61      	ldr	r3, [pc, #388]	; (8004d0c <_dtoa_r+0x5a4>)
 8004b86:	f7fb faf1 	bl	800016c <__adddf3>
 8004b8a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8004b8e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004b92:	9611      	str	r6, [sp, #68]	; 0x44
 8004b94:	2c00      	cmp	r4, #0
 8004b96:	d15d      	bne.n	8004c54 <_dtoa_r+0x4ec>
 8004b98:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	4b5c      	ldr	r3, [pc, #368]	; (8004d10 <_dtoa_r+0x5a8>)
 8004ba0:	f7fb fae2 	bl	8000168 <__aeabi_dsub>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	460b      	mov	r3, r1
 8004ba8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004bac:	4633      	mov	r3, r6
 8004bae:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004bb0:	f7fb ff22 	bl	80009f8 <__aeabi_dcmpgt>
 8004bb4:	2800      	cmp	r0, #0
 8004bb6:	f040 8295 	bne.w	80050e4 <_dtoa_r+0x97c>
 8004bba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004bbe:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004bc0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8004bc4:	f7fb fefa 	bl	80009bc <__aeabi_dcmplt>
 8004bc8:	2800      	cmp	r0, #0
 8004bca:	f040 8289 	bne.w	80050e0 <_dtoa_r+0x978>
 8004bce:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8004bd2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004bd6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	f2c0 8151 	blt.w	8004e80 <_dtoa_r+0x718>
 8004bde:	f1bb 0f0e 	cmp.w	fp, #14
 8004be2:	f300 814d 	bgt.w	8004e80 <_dtoa_r+0x718>
 8004be6:	4b45      	ldr	r3, [pc, #276]	; (8004cfc <_dtoa_r+0x594>)
 8004be8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004bec:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004bf0:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8004bf4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	f280 80da 	bge.w	8004db0 <_dtoa_r+0x648>
 8004bfc:	9b08      	ldr	r3, [sp, #32]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	f300 80d6 	bgt.w	8004db0 <_dtoa_r+0x648>
 8004c04:	f040 826b 	bne.w	80050de <_dtoa_r+0x976>
 8004c08:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	4b40      	ldr	r3, [pc, #256]	; (8004d10 <_dtoa_r+0x5a8>)
 8004c10:	f7fb fc62 	bl	80004d8 <__aeabi_dmul>
 8004c14:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c18:	f7fb fee4 	bl	80009e4 <__aeabi_dcmpge>
 8004c1c:	9c08      	ldr	r4, [sp, #32]
 8004c1e:	4626      	mov	r6, r4
 8004c20:	2800      	cmp	r0, #0
 8004c22:	f040 8241 	bne.w	80050a8 <_dtoa_r+0x940>
 8004c26:	2331      	movs	r3, #49	; 0x31
 8004c28:	9f03      	ldr	r7, [sp, #12]
 8004c2a:	f10b 0b01 	add.w	fp, fp, #1
 8004c2e:	f807 3b01 	strb.w	r3, [r7], #1
 8004c32:	e23d      	b.n	80050b0 <_dtoa_r+0x948>
 8004c34:	07e2      	lsls	r2, r4, #31
 8004c36:	d505      	bpl.n	8004c44 <_dtoa_r+0x4dc>
 8004c38:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004c3c:	f7fb fc4c 	bl	80004d8 <__aeabi_dmul>
 8004c40:	2301      	movs	r3, #1
 8004c42:	3701      	adds	r7, #1
 8004c44:	1064      	asrs	r4, r4, #1
 8004c46:	3608      	adds	r6, #8
 8004c48:	e76d      	b.n	8004b26 <_dtoa_r+0x3be>
 8004c4a:	2702      	movs	r7, #2
 8004c4c:	e770      	b.n	8004b30 <_dtoa_r+0x3c8>
 8004c4e:	46d8      	mov	r8, fp
 8004c50:	9c08      	ldr	r4, [sp, #32]
 8004c52:	e78f      	b.n	8004b74 <_dtoa_r+0x40c>
 8004c54:	9903      	ldr	r1, [sp, #12]
 8004c56:	4b29      	ldr	r3, [pc, #164]	; (8004cfc <_dtoa_r+0x594>)
 8004c58:	4421      	add	r1, r4
 8004c5a:	9112      	str	r1, [sp, #72]	; 0x48
 8004c5c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004c5e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004c62:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8004c66:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004c6a:	2900      	cmp	r1, #0
 8004c6c:	d054      	beq.n	8004d18 <_dtoa_r+0x5b0>
 8004c6e:	2000      	movs	r0, #0
 8004c70:	4928      	ldr	r1, [pc, #160]	; (8004d14 <_dtoa_r+0x5ac>)
 8004c72:	f7fb fd5b 	bl	800072c <__aeabi_ddiv>
 8004c76:	463b      	mov	r3, r7
 8004c78:	4632      	mov	r2, r6
 8004c7a:	f7fb fa75 	bl	8000168 <__aeabi_dsub>
 8004c7e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004c82:	9f03      	ldr	r7, [sp, #12]
 8004c84:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004c88:	f7fb fed6 	bl	8000a38 <__aeabi_d2iz>
 8004c8c:	4604      	mov	r4, r0
 8004c8e:	f7fb fbb9 	bl	8000404 <__aeabi_i2d>
 8004c92:	4602      	mov	r2, r0
 8004c94:	460b      	mov	r3, r1
 8004c96:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004c9a:	f7fb fa65 	bl	8000168 <__aeabi_dsub>
 8004c9e:	4602      	mov	r2, r0
 8004ca0:	460b      	mov	r3, r1
 8004ca2:	3430      	adds	r4, #48	; 0x30
 8004ca4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004ca8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004cac:	f807 4b01 	strb.w	r4, [r7], #1
 8004cb0:	f7fb fe84 	bl	80009bc <__aeabi_dcmplt>
 8004cb4:	2800      	cmp	r0, #0
 8004cb6:	d173      	bne.n	8004da0 <_dtoa_r+0x638>
 8004cb8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004cbc:	2000      	movs	r0, #0
 8004cbe:	4911      	ldr	r1, [pc, #68]	; (8004d04 <_dtoa_r+0x59c>)
 8004cc0:	f7fb fa52 	bl	8000168 <__aeabi_dsub>
 8004cc4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004cc8:	f7fb fe78 	bl	80009bc <__aeabi_dcmplt>
 8004ccc:	2800      	cmp	r0, #0
 8004cce:	f040 80b6 	bne.w	8004e3e <_dtoa_r+0x6d6>
 8004cd2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004cd4:	429f      	cmp	r7, r3
 8004cd6:	f43f af7a 	beq.w	8004bce <_dtoa_r+0x466>
 8004cda:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004cde:	2200      	movs	r2, #0
 8004ce0:	4b09      	ldr	r3, [pc, #36]	; (8004d08 <_dtoa_r+0x5a0>)
 8004ce2:	f7fb fbf9 	bl	80004d8 <__aeabi_dmul>
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004cec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004cf0:	4b05      	ldr	r3, [pc, #20]	; (8004d08 <_dtoa_r+0x5a0>)
 8004cf2:	f7fb fbf1 	bl	80004d8 <__aeabi_dmul>
 8004cf6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004cfa:	e7c3      	b.n	8004c84 <_dtoa_r+0x51c>
 8004cfc:	080073f8 	.word	0x080073f8
 8004d00:	080073d0 	.word	0x080073d0
 8004d04:	3ff00000 	.word	0x3ff00000
 8004d08:	40240000 	.word	0x40240000
 8004d0c:	401c0000 	.word	0x401c0000
 8004d10:	40140000 	.word	0x40140000
 8004d14:	3fe00000 	.word	0x3fe00000
 8004d18:	4630      	mov	r0, r6
 8004d1a:	4639      	mov	r1, r7
 8004d1c:	f7fb fbdc 	bl	80004d8 <__aeabi_dmul>
 8004d20:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004d22:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004d26:	9c03      	ldr	r4, [sp, #12]
 8004d28:	9314      	str	r3, [sp, #80]	; 0x50
 8004d2a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004d2e:	f7fb fe83 	bl	8000a38 <__aeabi_d2iz>
 8004d32:	9015      	str	r0, [sp, #84]	; 0x54
 8004d34:	f7fb fb66 	bl	8000404 <__aeabi_i2d>
 8004d38:	4602      	mov	r2, r0
 8004d3a:	460b      	mov	r3, r1
 8004d3c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004d40:	f7fb fa12 	bl	8000168 <__aeabi_dsub>
 8004d44:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004d46:	4606      	mov	r6, r0
 8004d48:	3330      	adds	r3, #48	; 0x30
 8004d4a:	f804 3b01 	strb.w	r3, [r4], #1
 8004d4e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004d50:	460f      	mov	r7, r1
 8004d52:	429c      	cmp	r4, r3
 8004d54:	f04f 0200 	mov.w	r2, #0
 8004d58:	d124      	bne.n	8004da4 <_dtoa_r+0x63c>
 8004d5a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004d5e:	4baf      	ldr	r3, [pc, #700]	; (800501c <_dtoa_r+0x8b4>)
 8004d60:	f7fb fa04 	bl	800016c <__adddf3>
 8004d64:	4602      	mov	r2, r0
 8004d66:	460b      	mov	r3, r1
 8004d68:	4630      	mov	r0, r6
 8004d6a:	4639      	mov	r1, r7
 8004d6c:	f7fb fe44 	bl	80009f8 <__aeabi_dcmpgt>
 8004d70:	2800      	cmp	r0, #0
 8004d72:	d163      	bne.n	8004e3c <_dtoa_r+0x6d4>
 8004d74:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004d78:	2000      	movs	r0, #0
 8004d7a:	49a8      	ldr	r1, [pc, #672]	; (800501c <_dtoa_r+0x8b4>)
 8004d7c:	f7fb f9f4 	bl	8000168 <__aeabi_dsub>
 8004d80:	4602      	mov	r2, r0
 8004d82:	460b      	mov	r3, r1
 8004d84:	4630      	mov	r0, r6
 8004d86:	4639      	mov	r1, r7
 8004d88:	f7fb fe18 	bl	80009bc <__aeabi_dcmplt>
 8004d8c:	2800      	cmp	r0, #0
 8004d8e:	f43f af1e 	beq.w	8004bce <_dtoa_r+0x466>
 8004d92:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004d94:	1e7b      	subs	r3, r7, #1
 8004d96:	9314      	str	r3, [sp, #80]	; 0x50
 8004d98:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8004d9c:	2b30      	cmp	r3, #48	; 0x30
 8004d9e:	d0f8      	beq.n	8004d92 <_dtoa_r+0x62a>
 8004da0:	46c3      	mov	fp, r8
 8004da2:	e03b      	b.n	8004e1c <_dtoa_r+0x6b4>
 8004da4:	4b9e      	ldr	r3, [pc, #632]	; (8005020 <_dtoa_r+0x8b8>)
 8004da6:	f7fb fb97 	bl	80004d8 <__aeabi_dmul>
 8004daa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004dae:	e7bc      	b.n	8004d2a <_dtoa_r+0x5c2>
 8004db0:	9f03      	ldr	r7, [sp, #12]
 8004db2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8004db6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004dba:	4640      	mov	r0, r8
 8004dbc:	4649      	mov	r1, r9
 8004dbe:	f7fb fcb5 	bl	800072c <__aeabi_ddiv>
 8004dc2:	f7fb fe39 	bl	8000a38 <__aeabi_d2iz>
 8004dc6:	4604      	mov	r4, r0
 8004dc8:	f7fb fb1c 	bl	8000404 <__aeabi_i2d>
 8004dcc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004dd0:	f7fb fb82 	bl	80004d8 <__aeabi_dmul>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	460b      	mov	r3, r1
 8004dd8:	4640      	mov	r0, r8
 8004dda:	4649      	mov	r1, r9
 8004ddc:	f7fb f9c4 	bl	8000168 <__aeabi_dsub>
 8004de0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8004de4:	f807 6b01 	strb.w	r6, [r7], #1
 8004de8:	9e03      	ldr	r6, [sp, #12]
 8004dea:	f8dd c020 	ldr.w	ip, [sp, #32]
 8004dee:	1bbe      	subs	r6, r7, r6
 8004df0:	45b4      	cmp	ip, r6
 8004df2:	4602      	mov	r2, r0
 8004df4:	460b      	mov	r3, r1
 8004df6:	d136      	bne.n	8004e66 <_dtoa_r+0x6fe>
 8004df8:	f7fb f9b8 	bl	800016c <__adddf3>
 8004dfc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004e00:	4680      	mov	r8, r0
 8004e02:	4689      	mov	r9, r1
 8004e04:	f7fb fdf8 	bl	80009f8 <__aeabi_dcmpgt>
 8004e08:	bb58      	cbnz	r0, 8004e62 <_dtoa_r+0x6fa>
 8004e0a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004e0e:	4640      	mov	r0, r8
 8004e10:	4649      	mov	r1, r9
 8004e12:	f7fb fdc9 	bl	80009a8 <__aeabi_dcmpeq>
 8004e16:	b108      	cbz	r0, 8004e1c <_dtoa_r+0x6b4>
 8004e18:	07e3      	lsls	r3, r4, #31
 8004e1a:	d422      	bmi.n	8004e62 <_dtoa_r+0x6fa>
 8004e1c:	4651      	mov	r1, sl
 8004e1e:	4628      	mov	r0, r5
 8004e20:	f000 fbc2 	bl	80055a8 <_Bfree>
 8004e24:	2300      	movs	r3, #0
 8004e26:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004e28:	703b      	strb	r3, [r7, #0]
 8004e2a:	f10b 0301 	add.w	r3, fp, #1
 8004e2e:	6013      	str	r3, [r2, #0]
 8004e30:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	f43f ace6 	beq.w	8004804 <_dtoa_r+0x9c>
 8004e38:	601f      	str	r7, [r3, #0]
 8004e3a:	e4e3      	b.n	8004804 <_dtoa_r+0x9c>
 8004e3c:	4627      	mov	r7, r4
 8004e3e:	463b      	mov	r3, r7
 8004e40:	461f      	mov	r7, r3
 8004e42:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004e46:	2a39      	cmp	r2, #57	; 0x39
 8004e48:	d107      	bne.n	8004e5a <_dtoa_r+0x6f2>
 8004e4a:	9a03      	ldr	r2, [sp, #12]
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d1f7      	bne.n	8004e40 <_dtoa_r+0x6d8>
 8004e50:	2230      	movs	r2, #48	; 0x30
 8004e52:	9903      	ldr	r1, [sp, #12]
 8004e54:	f108 0801 	add.w	r8, r8, #1
 8004e58:	700a      	strb	r2, [r1, #0]
 8004e5a:	781a      	ldrb	r2, [r3, #0]
 8004e5c:	3201      	adds	r2, #1
 8004e5e:	701a      	strb	r2, [r3, #0]
 8004e60:	e79e      	b.n	8004da0 <_dtoa_r+0x638>
 8004e62:	46d8      	mov	r8, fp
 8004e64:	e7eb      	b.n	8004e3e <_dtoa_r+0x6d6>
 8004e66:	2200      	movs	r2, #0
 8004e68:	4b6d      	ldr	r3, [pc, #436]	; (8005020 <_dtoa_r+0x8b8>)
 8004e6a:	f7fb fb35 	bl	80004d8 <__aeabi_dmul>
 8004e6e:	2200      	movs	r2, #0
 8004e70:	2300      	movs	r3, #0
 8004e72:	4680      	mov	r8, r0
 8004e74:	4689      	mov	r9, r1
 8004e76:	f7fb fd97 	bl	80009a8 <__aeabi_dcmpeq>
 8004e7a:	2800      	cmp	r0, #0
 8004e7c:	d09b      	beq.n	8004db6 <_dtoa_r+0x64e>
 8004e7e:	e7cd      	b.n	8004e1c <_dtoa_r+0x6b4>
 8004e80:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004e82:	2a00      	cmp	r2, #0
 8004e84:	f000 80c4 	beq.w	8005010 <_dtoa_r+0x8a8>
 8004e88:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004e8a:	2a01      	cmp	r2, #1
 8004e8c:	f300 80a8 	bgt.w	8004fe0 <_dtoa_r+0x878>
 8004e90:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004e92:	2a00      	cmp	r2, #0
 8004e94:	f000 80a0 	beq.w	8004fd8 <_dtoa_r+0x870>
 8004e98:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004e9c:	464f      	mov	r7, r9
 8004e9e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004ea0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004ea2:	2101      	movs	r1, #1
 8004ea4:	441a      	add	r2, r3
 8004ea6:	4628      	mov	r0, r5
 8004ea8:	4499      	add	r9, r3
 8004eaa:	9209      	str	r2, [sp, #36]	; 0x24
 8004eac:	f000 fc32 	bl	8005714 <__i2b>
 8004eb0:	4606      	mov	r6, r0
 8004eb2:	b15f      	cbz	r7, 8004ecc <_dtoa_r+0x764>
 8004eb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	dd08      	ble.n	8004ecc <_dtoa_r+0x764>
 8004eba:	42bb      	cmp	r3, r7
 8004ebc:	bfa8      	it	ge
 8004ebe:	463b      	movge	r3, r7
 8004ec0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004ec2:	eba9 0903 	sub.w	r9, r9, r3
 8004ec6:	1aff      	subs	r7, r7, r3
 8004ec8:	1ad3      	subs	r3, r2, r3
 8004eca:	9309      	str	r3, [sp, #36]	; 0x24
 8004ecc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ece:	b1f3      	cbz	r3, 8004f0e <_dtoa_r+0x7a6>
 8004ed0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	f000 80a0 	beq.w	8005018 <_dtoa_r+0x8b0>
 8004ed8:	2c00      	cmp	r4, #0
 8004eda:	dd10      	ble.n	8004efe <_dtoa_r+0x796>
 8004edc:	4631      	mov	r1, r6
 8004ede:	4622      	mov	r2, r4
 8004ee0:	4628      	mov	r0, r5
 8004ee2:	f000 fcd5 	bl	8005890 <__pow5mult>
 8004ee6:	4652      	mov	r2, sl
 8004ee8:	4601      	mov	r1, r0
 8004eea:	4606      	mov	r6, r0
 8004eec:	4628      	mov	r0, r5
 8004eee:	f000 fc27 	bl	8005740 <__multiply>
 8004ef2:	4680      	mov	r8, r0
 8004ef4:	4651      	mov	r1, sl
 8004ef6:	4628      	mov	r0, r5
 8004ef8:	f000 fb56 	bl	80055a8 <_Bfree>
 8004efc:	46c2      	mov	sl, r8
 8004efe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f00:	1b1a      	subs	r2, r3, r4
 8004f02:	d004      	beq.n	8004f0e <_dtoa_r+0x7a6>
 8004f04:	4651      	mov	r1, sl
 8004f06:	4628      	mov	r0, r5
 8004f08:	f000 fcc2 	bl	8005890 <__pow5mult>
 8004f0c:	4682      	mov	sl, r0
 8004f0e:	2101      	movs	r1, #1
 8004f10:	4628      	mov	r0, r5
 8004f12:	f000 fbff 	bl	8005714 <__i2b>
 8004f16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004f18:	4604      	mov	r4, r0
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	f340 8082 	ble.w	8005024 <_dtoa_r+0x8bc>
 8004f20:	461a      	mov	r2, r3
 8004f22:	4601      	mov	r1, r0
 8004f24:	4628      	mov	r0, r5
 8004f26:	f000 fcb3 	bl	8005890 <__pow5mult>
 8004f2a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004f2c:	4604      	mov	r4, r0
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	dd7b      	ble.n	800502a <_dtoa_r+0x8c2>
 8004f32:	f04f 0800 	mov.w	r8, #0
 8004f36:	6923      	ldr	r3, [r4, #16]
 8004f38:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004f3c:	6918      	ldr	r0, [r3, #16]
 8004f3e:	f000 fb9b 	bl	8005678 <__hi0bits>
 8004f42:	f1c0 0020 	rsb	r0, r0, #32
 8004f46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f48:	4418      	add	r0, r3
 8004f4a:	f010 001f 	ands.w	r0, r0, #31
 8004f4e:	f000 8092 	beq.w	8005076 <_dtoa_r+0x90e>
 8004f52:	f1c0 0320 	rsb	r3, r0, #32
 8004f56:	2b04      	cmp	r3, #4
 8004f58:	f340 8085 	ble.w	8005066 <_dtoa_r+0x8fe>
 8004f5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f5e:	f1c0 001c 	rsb	r0, r0, #28
 8004f62:	4403      	add	r3, r0
 8004f64:	4481      	add	r9, r0
 8004f66:	4407      	add	r7, r0
 8004f68:	9309      	str	r3, [sp, #36]	; 0x24
 8004f6a:	f1b9 0f00 	cmp.w	r9, #0
 8004f6e:	dd05      	ble.n	8004f7c <_dtoa_r+0x814>
 8004f70:	4651      	mov	r1, sl
 8004f72:	464a      	mov	r2, r9
 8004f74:	4628      	mov	r0, r5
 8004f76:	f000 fce5 	bl	8005944 <__lshift>
 8004f7a:	4682      	mov	sl, r0
 8004f7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	dd05      	ble.n	8004f8e <_dtoa_r+0x826>
 8004f82:	4621      	mov	r1, r4
 8004f84:	461a      	mov	r2, r3
 8004f86:	4628      	mov	r0, r5
 8004f88:	f000 fcdc 	bl	8005944 <__lshift>
 8004f8c:	4604      	mov	r4, r0
 8004f8e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d072      	beq.n	800507a <_dtoa_r+0x912>
 8004f94:	4621      	mov	r1, r4
 8004f96:	4650      	mov	r0, sl
 8004f98:	f000 fd40 	bl	8005a1c <__mcmp>
 8004f9c:	2800      	cmp	r0, #0
 8004f9e:	da6c      	bge.n	800507a <_dtoa_r+0x912>
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	4651      	mov	r1, sl
 8004fa4:	220a      	movs	r2, #10
 8004fa6:	4628      	mov	r0, r5
 8004fa8:	f000 fb20 	bl	80055ec <__multadd>
 8004fac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004fae:	4682      	mov	sl, r0
 8004fb0:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	f000 81ac 	beq.w	8005312 <_dtoa_r+0xbaa>
 8004fba:	2300      	movs	r3, #0
 8004fbc:	4631      	mov	r1, r6
 8004fbe:	220a      	movs	r2, #10
 8004fc0:	4628      	mov	r0, r5
 8004fc2:	f000 fb13 	bl	80055ec <__multadd>
 8004fc6:	9b06      	ldr	r3, [sp, #24]
 8004fc8:	4606      	mov	r6, r0
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	f300 8093 	bgt.w	80050f6 <_dtoa_r+0x98e>
 8004fd0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004fd2:	2b02      	cmp	r3, #2
 8004fd4:	dc59      	bgt.n	800508a <_dtoa_r+0x922>
 8004fd6:	e08e      	b.n	80050f6 <_dtoa_r+0x98e>
 8004fd8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004fda:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004fde:	e75d      	b.n	8004e9c <_dtoa_r+0x734>
 8004fe0:	9b08      	ldr	r3, [sp, #32]
 8004fe2:	1e5c      	subs	r4, r3, #1
 8004fe4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004fe6:	42a3      	cmp	r3, r4
 8004fe8:	bfbf      	itttt	lt
 8004fea:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8004fec:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8004fee:	1ae3      	sublt	r3, r4, r3
 8004ff0:	18d2      	addlt	r2, r2, r3
 8004ff2:	bfa8      	it	ge
 8004ff4:	1b1c      	subge	r4, r3, r4
 8004ff6:	9b08      	ldr	r3, [sp, #32]
 8004ff8:	bfbe      	ittt	lt
 8004ffa:	940a      	strlt	r4, [sp, #40]	; 0x28
 8004ffc:	920e      	strlt	r2, [sp, #56]	; 0x38
 8004ffe:	2400      	movlt	r4, #0
 8005000:	2b00      	cmp	r3, #0
 8005002:	bfb5      	itete	lt
 8005004:	eba9 0703 	sublt.w	r7, r9, r3
 8005008:	464f      	movge	r7, r9
 800500a:	2300      	movlt	r3, #0
 800500c:	9b08      	ldrge	r3, [sp, #32]
 800500e:	e747      	b.n	8004ea0 <_dtoa_r+0x738>
 8005010:	464f      	mov	r7, r9
 8005012:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005014:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005016:	e74c      	b.n	8004eb2 <_dtoa_r+0x74a>
 8005018:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800501a:	e773      	b.n	8004f04 <_dtoa_r+0x79c>
 800501c:	3fe00000 	.word	0x3fe00000
 8005020:	40240000 	.word	0x40240000
 8005024:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005026:	2b01      	cmp	r3, #1
 8005028:	dc18      	bgt.n	800505c <_dtoa_r+0x8f4>
 800502a:	9b04      	ldr	r3, [sp, #16]
 800502c:	b9b3      	cbnz	r3, 800505c <_dtoa_r+0x8f4>
 800502e:	9b05      	ldr	r3, [sp, #20]
 8005030:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005034:	b993      	cbnz	r3, 800505c <_dtoa_r+0x8f4>
 8005036:	9b05      	ldr	r3, [sp, #20]
 8005038:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800503c:	0d1b      	lsrs	r3, r3, #20
 800503e:	051b      	lsls	r3, r3, #20
 8005040:	b17b      	cbz	r3, 8005062 <_dtoa_r+0x8fa>
 8005042:	f04f 0801 	mov.w	r8, #1
 8005046:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005048:	f109 0901 	add.w	r9, r9, #1
 800504c:	3301      	adds	r3, #1
 800504e:	9309      	str	r3, [sp, #36]	; 0x24
 8005050:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005052:	2b00      	cmp	r3, #0
 8005054:	f47f af6f 	bne.w	8004f36 <_dtoa_r+0x7ce>
 8005058:	2001      	movs	r0, #1
 800505a:	e774      	b.n	8004f46 <_dtoa_r+0x7de>
 800505c:	f04f 0800 	mov.w	r8, #0
 8005060:	e7f6      	b.n	8005050 <_dtoa_r+0x8e8>
 8005062:	4698      	mov	r8, r3
 8005064:	e7f4      	b.n	8005050 <_dtoa_r+0x8e8>
 8005066:	d080      	beq.n	8004f6a <_dtoa_r+0x802>
 8005068:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800506a:	331c      	adds	r3, #28
 800506c:	441a      	add	r2, r3
 800506e:	4499      	add	r9, r3
 8005070:	441f      	add	r7, r3
 8005072:	9209      	str	r2, [sp, #36]	; 0x24
 8005074:	e779      	b.n	8004f6a <_dtoa_r+0x802>
 8005076:	4603      	mov	r3, r0
 8005078:	e7f6      	b.n	8005068 <_dtoa_r+0x900>
 800507a:	9b08      	ldr	r3, [sp, #32]
 800507c:	2b00      	cmp	r3, #0
 800507e:	dc34      	bgt.n	80050ea <_dtoa_r+0x982>
 8005080:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005082:	2b02      	cmp	r3, #2
 8005084:	dd31      	ble.n	80050ea <_dtoa_r+0x982>
 8005086:	9b08      	ldr	r3, [sp, #32]
 8005088:	9306      	str	r3, [sp, #24]
 800508a:	9b06      	ldr	r3, [sp, #24]
 800508c:	b963      	cbnz	r3, 80050a8 <_dtoa_r+0x940>
 800508e:	4621      	mov	r1, r4
 8005090:	2205      	movs	r2, #5
 8005092:	4628      	mov	r0, r5
 8005094:	f000 faaa 	bl	80055ec <__multadd>
 8005098:	4601      	mov	r1, r0
 800509a:	4604      	mov	r4, r0
 800509c:	4650      	mov	r0, sl
 800509e:	f000 fcbd 	bl	8005a1c <__mcmp>
 80050a2:	2800      	cmp	r0, #0
 80050a4:	f73f adbf 	bgt.w	8004c26 <_dtoa_r+0x4be>
 80050a8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80050aa:	9f03      	ldr	r7, [sp, #12]
 80050ac:	ea6f 0b03 	mvn.w	fp, r3
 80050b0:	f04f 0800 	mov.w	r8, #0
 80050b4:	4621      	mov	r1, r4
 80050b6:	4628      	mov	r0, r5
 80050b8:	f000 fa76 	bl	80055a8 <_Bfree>
 80050bc:	2e00      	cmp	r6, #0
 80050be:	f43f aead 	beq.w	8004e1c <_dtoa_r+0x6b4>
 80050c2:	f1b8 0f00 	cmp.w	r8, #0
 80050c6:	d005      	beq.n	80050d4 <_dtoa_r+0x96c>
 80050c8:	45b0      	cmp	r8, r6
 80050ca:	d003      	beq.n	80050d4 <_dtoa_r+0x96c>
 80050cc:	4641      	mov	r1, r8
 80050ce:	4628      	mov	r0, r5
 80050d0:	f000 fa6a 	bl	80055a8 <_Bfree>
 80050d4:	4631      	mov	r1, r6
 80050d6:	4628      	mov	r0, r5
 80050d8:	f000 fa66 	bl	80055a8 <_Bfree>
 80050dc:	e69e      	b.n	8004e1c <_dtoa_r+0x6b4>
 80050de:	2400      	movs	r4, #0
 80050e0:	4626      	mov	r6, r4
 80050e2:	e7e1      	b.n	80050a8 <_dtoa_r+0x940>
 80050e4:	46c3      	mov	fp, r8
 80050e6:	4626      	mov	r6, r4
 80050e8:	e59d      	b.n	8004c26 <_dtoa_r+0x4be>
 80050ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	f000 80c8 	beq.w	8005282 <_dtoa_r+0xb1a>
 80050f2:	9b08      	ldr	r3, [sp, #32]
 80050f4:	9306      	str	r3, [sp, #24]
 80050f6:	2f00      	cmp	r7, #0
 80050f8:	dd05      	ble.n	8005106 <_dtoa_r+0x99e>
 80050fa:	4631      	mov	r1, r6
 80050fc:	463a      	mov	r2, r7
 80050fe:	4628      	mov	r0, r5
 8005100:	f000 fc20 	bl	8005944 <__lshift>
 8005104:	4606      	mov	r6, r0
 8005106:	f1b8 0f00 	cmp.w	r8, #0
 800510a:	d05b      	beq.n	80051c4 <_dtoa_r+0xa5c>
 800510c:	4628      	mov	r0, r5
 800510e:	6871      	ldr	r1, [r6, #4]
 8005110:	f000 fa0a 	bl	8005528 <_Balloc>
 8005114:	4607      	mov	r7, r0
 8005116:	b928      	cbnz	r0, 8005124 <_dtoa_r+0x9bc>
 8005118:	4602      	mov	r2, r0
 800511a:	f240 21ef 	movw	r1, #751	; 0x2ef
 800511e:	4b81      	ldr	r3, [pc, #516]	; (8005324 <_dtoa_r+0xbbc>)
 8005120:	f7ff bb36 	b.w	8004790 <_dtoa_r+0x28>
 8005124:	6932      	ldr	r2, [r6, #16]
 8005126:	f106 010c 	add.w	r1, r6, #12
 800512a:	3202      	adds	r2, #2
 800512c:	0092      	lsls	r2, r2, #2
 800512e:	300c      	adds	r0, #12
 8005130:	f000 fff2 	bl	8006118 <memcpy>
 8005134:	2201      	movs	r2, #1
 8005136:	4639      	mov	r1, r7
 8005138:	4628      	mov	r0, r5
 800513a:	f000 fc03 	bl	8005944 <__lshift>
 800513e:	46b0      	mov	r8, r6
 8005140:	4606      	mov	r6, r0
 8005142:	9b03      	ldr	r3, [sp, #12]
 8005144:	9a03      	ldr	r2, [sp, #12]
 8005146:	3301      	adds	r3, #1
 8005148:	9308      	str	r3, [sp, #32]
 800514a:	9b06      	ldr	r3, [sp, #24]
 800514c:	4413      	add	r3, r2
 800514e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005150:	9b04      	ldr	r3, [sp, #16]
 8005152:	f003 0301 	and.w	r3, r3, #1
 8005156:	930a      	str	r3, [sp, #40]	; 0x28
 8005158:	9b08      	ldr	r3, [sp, #32]
 800515a:	4621      	mov	r1, r4
 800515c:	3b01      	subs	r3, #1
 800515e:	4650      	mov	r0, sl
 8005160:	9304      	str	r3, [sp, #16]
 8005162:	f7ff fa78 	bl	8004656 <quorem>
 8005166:	4641      	mov	r1, r8
 8005168:	9006      	str	r0, [sp, #24]
 800516a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800516e:	4650      	mov	r0, sl
 8005170:	f000 fc54 	bl	8005a1c <__mcmp>
 8005174:	4632      	mov	r2, r6
 8005176:	9009      	str	r0, [sp, #36]	; 0x24
 8005178:	4621      	mov	r1, r4
 800517a:	4628      	mov	r0, r5
 800517c:	f000 fc6a 	bl	8005a54 <__mdiff>
 8005180:	68c2      	ldr	r2, [r0, #12]
 8005182:	4607      	mov	r7, r0
 8005184:	bb02      	cbnz	r2, 80051c8 <_dtoa_r+0xa60>
 8005186:	4601      	mov	r1, r0
 8005188:	4650      	mov	r0, sl
 800518a:	f000 fc47 	bl	8005a1c <__mcmp>
 800518e:	4602      	mov	r2, r0
 8005190:	4639      	mov	r1, r7
 8005192:	4628      	mov	r0, r5
 8005194:	920c      	str	r2, [sp, #48]	; 0x30
 8005196:	f000 fa07 	bl	80055a8 <_Bfree>
 800519a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800519c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800519e:	9f08      	ldr	r7, [sp, #32]
 80051a0:	ea43 0102 	orr.w	r1, r3, r2
 80051a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051a6:	4319      	orrs	r1, r3
 80051a8:	d110      	bne.n	80051cc <_dtoa_r+0xa64>
 80051aa:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80051ae:	d029      	beq.n	8005204 <_dtoa_r+0xa9c>
 80051b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	dd02      	ble.n	80051bc <_dtoa_r+0xa54>
 80051b6:	9b06      	ldr	r3, [sp, #24]
 80051b8:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80051bc:	9b04      	ldr	r3, [sp, #16]
 80051be:	f883 9000 	strb.w	r9, [r3]
 80051c2:	e777      	b.n	80050b4 <_dtoa_r+0x94c>
 80051c4:	4630      	mov	r0, r6
 80051c6:	e7ba      	b.n	800513e <_dtoa_r+0x9d6>
 80051c8:	2201      	movs	r2, #1
 80051ca:	e7e1      	b.n	8005190 <_dtoa_r+0xa28>
 80051cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	db04      	blt.n	80051dc <_dtoa_r+0xa74>
 80051d2:	9922      	ldr	r1, [sp, #136]	; 0x88
 80051d4:	430b      	orrs	r3, r1
 80051d6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80051d8:	430b      	orrs	r3, r1
 80051da:	d120      	bne.n	800521e <_dtoa_r+0xab6>
 80051dc:	2a00      	cmp	r2, #0
 80051de:	dded      	ble.n	80051bc <_dtoa_r+0xa54>
 80051e0:	4651      	mov	r1, sl
 80051e2:	2201      	movs	r2, #1
 80051e4:	4628      	mov	r0, r5
 80051e6:	f000 fbad 	bl	8005944 <__lshift>
 80051ea:	4621      	mov	r1, r4
 80051ec:	4682      	mov	sl, r0
 80051ee:	f000 fc15 	bl	8005a1c <__mcmp>
 80051f2:	2800      	cmp	r0, #0
 80051f4:	dc03      	bgt.n	80051fe <_dtoa_r+0xa96>
 80051f6:	d1e1      	bne.n	80051bc <_dtoa_r+0xa54>
 80051f8:	f019 0f01 	tst.w	r9, #1
 80051fc:	d0de      	beq.n	80051bc <_dtoa_r+0xa54>
 80051fe:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005202:	d1d8      	bne.n	80051b6 <_dtoa_r+0xa4e>
 8005204:	2339      	movs	r3, #57	; 0x39
 8005206:	9a04      	ldr	r2, [sp, #16]
 8005208:	7013      	strb	r3, [r2, #0]
 800520a:	463b      	mov	r3, r7
 800520c:	461f      	mov	r7, r3
 800520e:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8005212:	3b01      	subs	r3, #1
 8005214:	2a39      	cmp	r2, #57	; 0x39
 8005216:	d06b      	beq.n	80052f0 <_dtoa_r+0xb88>
 8005218:	3201      	adds	r2, #1
 800521a:	701a      	strb	r2, [r3, #0]
 800521c:	e74a      	b.n	80050b4 <_dtoa_r+0x94c>
 800521e:	2a00      	cmp	r2, #0
 8005220:	dd07      	ble.n	8005232 <_dtoa_r+0xaca>
 8005222:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005226:	d0ed      	beq.n	8005204 <_dtoa_r+0xa9c>
 8005228:	9a04      	ldr	r2, [sp, #16]
 800522a:	f109 0301 	add.w	r3, r9, #1
 800522e:	7013      	strb	r3, [r2, #0]
 8005230:	e740      	b.n	80050b4 <_dtoa_r+0x94c>
 8005232:	9b08      	ldr	r3, [sp, #32]
 8005234:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005236:	f803 9c01 	strb.w	r9, [r3, #-1]
 800523a:	4293      	cmp	r3, r2
 800523c:	d042      	beq.n	80052c4 <_dtoa_r+0xb5c>
 800523e:	4651      	mov	r1, sl
 8005240:	2300      	movs	r3, #0
 8005242:	220a      	movs	r2, #10
 8005244:	4628      	mov	r0, r5
 8005246:	f000 f9d1 	bl	80055ec <__multadd>
 800524a:	45b0      	cmp	r8, r6
 800524c:	4682      	mov	sl, r0
 800524e:	f04f 0300 	mov.w	r3, #0
 8005252:	f04f 020a 	mov.w	r2, #10
 8005256:	4641      	mov	r1, r8
 8005258:	4628      	mov	r0, r5
 800525a:	d107      	bne.n	800526c <_dtoa_r+0xb04>
 800525c:	f000 f9c6 	bl	80055ec <__multadd>
 8005260:	4680      	mov	r8, r0
 8005262:	4606      	mov	r6, r0
 8005264:	9b08      	ldr	r3, [sp, #32]
 8005266:	3301      	adds	r3, #1
 8005268:	9308      	str	r3, [sp, #32]
 800526a:	e775      	b.n	8005158 <_dtoa_r+0x9f0>
 800526c:	f000 f9be 	bl	80055ec <__multadd>
 8005270:	4631      	mov	r1, r6
 8005272:	4680      	mov	r8, r0
 8005274:	2300      	movs	r3, #0
 8005276:	220a      	movs	r2, #10
 8005278:	4628      	mov	r0, r5
 800527a:	f000 f9b7 	bl	80055ec <__multadd>
 800527e:	4606      	mov	r6, r0
 8005280:	e7f0      	b.n	8005264 <_dtoa_r+0xafc>
 8005282:	9b08      	ldr	r3, [sp, #32]
 8005284:	9306      	str	r3, [sp, #24]
 8005286:	9f03      	ldr	r7, [sp, #12]
 8005288:	4621      	mov	r1, r4
 800528a:	4650      	mov	r0, sl
 800528c:	f7ff f9e3 	bl	8004656 <quorem>
 8005290:	9b03      	ldr	r3, [sp, #12]
 8005292:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005296:	f807 9b01 	strb.w	r9, [r7], #1
 800529a:	1afa      	subs	r2, r7, r3
 800529c:	9b06      	ldr	r3, [sp, #24]
 800529e:	4293      	cmp	r3, r2
 80052a0:	dd07      	ble.n	80052b2 <_dtoa_r+0xb4a>
 80052a2:	4651      	mov	r1, sl
 80052a4:	2300      	movs	r3, #0
 80052a6:	220a      	movs	r2, #10
 80052a8:	4628      	mov	r0, r5
 80052aa:	f000 f99f 	bl	80055ec <__multadd>
 80052ae:	4682      	mov	sl, r0
 80052b0:	e7ea      	b.n	8005288 <_dtoa_r+0xb20>
 80052b2:	9b06      	ldr	r3, [sp, #24]
 80052b4:	f04f 0800 	mov.w	r8, #0
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	bfcc      	ite	gt
 80052bc:	461f      	movgt	r7, r3
 80052be:	2701      	movle	r7, #1
 80052c0:	9b03      	ldr	r3, [sp, #12]
 80052c2:	441f      	add	r7, r3
 80052c4:	4651      	mov	r1, sl
 80052c6:	2201      	movs	r2, #1
 80052c8:	4628      	mov	r0, r5
 80052ca:	f000 fb3b 	bl	8005944 <__lshift>
 80052ce:	4621      	mov	r1, r4
 80052d0:	4682      	mov	sl, r0
 80052d2:	f000 fba3 	bl	8005a1c <__mcmp>
 80052d6:	2800      	cmp	r0, #0
 80052d8:	dc97      	bgt.n	800520a <_dtoa_r+0xaa2>
 80052da:	d102      	bne.n	80052e2 <_dtoa_r+0xb7a>
 80052dc:	f019 0f01 	tst.w	r9, #1
 80052e0:	d193      	bne.n	800520a <_dtoa_r+0xaa2>
 80052e2:	463b      	mov	r3, r7
 80052e4:	461f      	mov	r7, r3
 80052e6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80052ea:	2a30      	cmp	r2, #48	; 0x30
 80052ec:	d0fa      	beq.n	80052e4 <_dtoa_r+0xb7c>
 80052ee:	e6e1      	b.n	80050b4 <_dtoa_r+0x94c>
 80052f0:	9a03      	ldr	r2, [sp, #12]
 80052f2:	429a      	cmp	r2, r3
 80052f4:	d18a      	bne.n	800520c <_dtoa_r+0xaa4>
 80052f6:	2331      	movs	r3, #49	; 0x31
 80052f8:	f10b 0b01 	add.w	fp, fp, #1
 80052fc:	e797      	b.n	800522e <_dtoa_r+0xac6>
 80052fe:	4b0a      	ldr	r3, [pc, #40]	; (8005328 <_dtoa_r+0xbc0>)
 8005300:	f7ff ba9f 	b.w	8004842 <_dtoa_r+0xda>
 8005304:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005306:	2b00      	cmp	r3, #0
 8005308:	f47f aa77 	bne.w	80047fa <_dtoa_r+0x92>
 800530c:	4b07      	ldr	r3, [pc, #28]	; (800532c <_dtoa_r+0xbc4>)
 800530e:	f7ff ba98 	b.w	8004842 <_dtoa_r+0xda>
 8005312:	9b06      	ldr	r3, [sp, #24]
 8005314:	2b00      	cmp	r3, #0
 8005316:	dcb6      	bgt.n	8005286 <_dtoa_r+0xb1e>
 8005318:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800531a:	2b02      	cmp	r3, #2
 800531c:	f73f aeb5 	bgt.w	800508a <_dtoa_r+0x922>
 8005320:	e7b1      	b.n	8005286 <_dtoa_r+0xb1e>
 8005322:	bf00      	nop
 8005324:	08007362 	.word	0x08007362
 8005328:	080072c2 	.word	0x080072c2
 800532c:	080072e6 	.word	0x080072e6

08005330 <_free_r>:
 8005330:	b538      	push	{r3, r4, r5, lr}
 8005332:	4605      	mov	r5, r0
 8005334:	2900      	cmp	r1, #0
 8005336:	d040      	beq.n	80053ba <_free_r+0x8a>
 8005338:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800533c:	1f0c      	subs	r4, r1, #4
 800533e:	2b00      	cmp	r3, #0
 8005340:	bfb8      	it	lt
 8005342:	18e4      	addlt	r4, r4, r3
 8005344:	f000 f8e4 	bl	8005510 <__malloc_lock>
 8005348:	4a1c      	ldr	r2, [pc, #112]	; (80053bc <_free_r+0x8c>)
 800534a:	6813      	ldr	r3, [r2, #0]
 800534c:	b933      	cbnz	r3, 800535c <_free_r+0x2c>
 800534e:	6063      	str	r3, [r4, #4]
 8005350:	6014      	str	r4, [r2, #0]
 8005352:	4628      	mov	r0, r5
 8005354:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005358:	f000 b8e0 	b.w	800551c <__malloc_unlock>
 800535c:	42a3      	cmp	r3, r4
 800535e:	d908      	bls.n	8005372 <_free_r+0x42>
 8005360:	6820      	ldr	r0, [r4, #0]
 8005362:	1821      	adds	r1, r4, r0
 8005364:	428b      	cmp	r3, r1
 8005366:	bf01      	itttt	eq
 8005368:	6819      	ldreq	r1, [r3, #0]
 800536a:	685b      	ldreq	r3, [r3, #4]
 800536c:	1809      	addeq	r1, r1, r0
 800536e:	6021      	streq	r1, [r4, #0]
 8005370:	e7ed      	b.n	800534e <_free_r+0x1e>
 8005372:	461a      	mov	r2, r3
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	b10b      	cbz	r3, 800537c <_free_r+0x4c>
 8005378:	42a3      	cmp	r3, r4
 800537a:	d9fa      	bls.n	8005372 <_free_r+0x42>
 800537c:	6811      	ldr	r1, [r2, #0]
 800537e:	1850      	adds	r0, r2, r1
 8005380:	42a0      	cmp	r0, r4
 8005382:	d10b      	bne.n	800539c <_free_r+0x6c>
 8005384:	6820      	ldr	r0, [r4, #0]
 8005386:	4401      	add	r1, r0
 8005388:	1850      	adds	r0, r2, r1
 800538a:	4283      	cmp	r3, r0
 800538c:	6011      	str	r1, [r2, #0]
 800538e:	d1e0      	bne.n	8005352 <_free_r+0x22>
 8005390:	6818      	ldr	r0, [r3, #0]
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	4408      	add	r0, r1
 8005396:	6010      	str	r0, [r2, #0]
 8005398:	6053      	str	r3, [r2, #4]
 800539a:	e7da      	b.n	8005352 <_free_r+0x22>
 800539c:	d902      	bls.n	80053a4 <_free_r+0x74>
 800539e:	230c      	movs	r3, #12
 80053a0:	602b      	str	r3, [r5, #0]
 80053a2:	e7d6      	b.n	8005352 <_free_r+0x22>
 80053a4:	6820      	ldr	r0, [r4, #0]
 80053a6:	1821      	adds	r1, r4, r0
 80053a8:	428b      	cmp	r3, r1
 80053aa:	bf01      	itttt	eq
 80053ac:	6819      	ldreq	r1, [r3, #0]
 80053ae:	685b      	ldreq	r3, [r3, #4]
 80053b0:	1809      	addeq	r1, r1, r0
 80053b2:	6021      	streq	r1, [r4, #0]
 80053b4:	6063      	str	r3, [r4, #4]
 80053b6:	6054      	str	r4, [r2, #4]
 80053b8:	e7cb      	b.n	8005352 <_free_r+0x22>
 80053ba:	bd38      	pop	{r3, r4, r5, pc}
 80053bc:	20000464 	.word	0x20000464

080053c0 <malloc>:
 80053c0:	4b02      	ldr	r3, [pc, #8]	; (80053cc <malloc+0xc>)
 80053c2:	4601      	mov	r1, r0
 80053c4:	6818      	ldr	r0, [r3, #0]
 80053c6:	f000 b823 	b.w	8005410 <_malloc_r>
 80053ca:	bf00      	nop
 80053cc:	20000068 	.word	0x20000068

080053d0 <sbrk_aligned>:
 80053d0:	b570      	push	{r4, r5, r6, lr}
 80053d2:	4e0e      	ldr	r6, [pc, #56]	; (800540c <sbrk_aligned+0x3c>)
 80053d4:	460c      	mov	r4, r1
 80053d6:	6831      	ldr	r1, [r6, #0]
 80053d8:	4605      	mov	r5, r0
 80053da:	b911      	cbnz	r1, 80053e2 <sbrk_aligned+0x12>
 80053dc:	f000 fe8c 	bl	80060f8 <_sbrk_r>
 80053e0:	6030      	str	r0, [r6, #0]
 80053e2:	4621      	mov	r1, r4
 80053e4:	4628      	mov	r0, r5
 80053e6:	f000 fe87 	bl	80060f8 <_sbrk_r>
 80053ea:	1c43      	adds	r3, r0, #1
 80053ec:	d00a      	beq.n	8005404 <sbrk_aligned+0x34>
 80053ee:	1cc4      	adds	r4, r0, #3
 80053f0:	f024 0403 	bic.w	r4, r4, #3
 80053f4:	42a0      	cmp	r0, r4
 80053f6:	d007      	beq.n	8005408 <sbrk_aligned+0x38>
 80053f8:	1a21      	subs	r1, r4, r0
 80053fa:	4628      	mov	r0, r5
 80053fc:	f000 fe7c 	bl	80060f8 <_sbrk_r>
 8005400:	3001      	adds	r0, #1
 8005402:	d101      	bne.n	8005408 <sbrk_aligned+0x38>
 8005404:	f04f 34ff 	mov.w	r4, #4294967295
 8005408:	4620      	mov	r0, r4
 800540a:	bd70      	pop	{r4, r5, r6, pc}
 800540c:	20000468 	.word	0x20000468

08005410 <_malloc_r>:
 8005410:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005414:	1ccd      	adds	r5, r1, #3
 8005416:	f025 0503 	bic.w	r5, r5, #3
 800541a:	3508      	adds	r5, #8
 800541c:	2d0c      	cmp	r5, #12
 800541e:	bf38      	it	cc
 8005420:	250c      	movcc	r5, #12
 8005422:	2d00      	cmp	r5, #0
 8005424:	4607      	mov	r7, r0
 8005426:	db01      	blt.n	800542c <_malloc_r+0x1c>
 8005428:	42a9      	cmp	r1, r5
 800542a:	d905      	bls.n	8005438 <_malloc_r+0x28>
 800542c:	230c      	movs	r3, #12
 800542e:	2600      	movs	r6, #0
 8005430:	603b      	str	r3, [r7, #0]
 8005432:	4630      	mov	r0, r6
 8005434:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005438:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800550c <_malloc_r+0xfc>
 800543c:	f000 f868 	bl	8005510 <__malloc_lock>
 8005440:	f8d8 3000 	ldr.w	r3, [r8]
 8005444:	461c      	mov	r4, r3
 8005446:	bb5c      	cbnz	r4, 80054a0 <_malloc_r+0x90>
 8005448:	4629      	mov	r1, r5
 800544a:	4638      	mov	r0, r7
 800544c:	f7ff ffc0 	bl	80053d0 <sbrk_aligned>
 8005450:	1c43      	adds	r3, r0, #1
 8005452:	4604      	mov	r4, r0
 8005454:	d155      	bne.n	8005502 <_malloc_r+0xf2>
 8005456:	f8d8 4000 	ldr.w	r4, [r8]
 800545a:	4626      	mov	r6, r4
 800545c:	2e00      	cmp	r6, #0
 800545e:	d145      	bne.n	80054ec <_malloc_r+0xdc>
 8005460:	2c00      	cmp	r4, #0
 8005462:	d048      	beq.n	80054f6 <_malloc_r+0xe6>
 8005464:	6823      	ldr	r3, [r4, #0]
 8005466:	4631      	mov	r1, r6
 8005468:	4638      	mov	r0, r7
 800546a:	eb04 0903 	add.w	r9, r4, r3
 800546e:	f000 fe43 	bl	80060f8 <_sbrk_r>
 8005472:	4581      	cmp	r9, r0
 8005474:	d13f      	bne.n	80054f6 <_malloc_r+0xe6>
 8005476:	6821      	ldr	r1, [r4, #0]
 8005478:	4638      	mov	r0, r7
 800547a:	1a6d      	subs	r5, r5, r1
 800547c:	4629      	mov	r1, r5
 800547e:	f7ff ffa7 	bl	80053d0 <sbrk_aligned>
 8005482:	3001      	adds	r0, #1
 8005484:	d037      	beq.n	80054f6 <_malloc_r+0xe6>
 8005486:	6823      	ldr	r3, [r4, #0]
 8005488:	442b      	add	r3, r5
 800548a:	6023      	str	r3, [r4, #0]
 800548c:	f8d8 3000 	ldr.w	r3, [r8]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d038      	beq.n	8005506 <_malloc_r+0xf6>
 8005494:	685a      	ldr	r2, [r3, #4]
 8005496:	42a2      	cmp	r2, r4
 8005498:	d12b      	bne.n	80054f2 <_malloc_r+0xe2>
 800549a:	2200      	movs	r2, #0
 800549c:	605a      	str	r2, [r3, #4]
 800549e:	e00f      	b.n	80054c0 <_malloc_r+0xb0>
 80054a0:	6822      	ldr	r2, [r4, #0]
 80054a2:	1b52      	subs	r2, r2, r5
 80054a4:	d41f      	bmi.n	80054e6 <_malloc_r+0xd6>
 80054a6:	2a0b      	cmp	r2, #11
 80054a8:	d917      	bls.n	80054da <_malloc_r+0xca>
 80054aa:	1961      	adds	r1, r4, r5
 80054ac:	42a3      	cmp	r3, r4
 80054ae:	6025      	str	r5, [r4, #0]
 80054b0:	bf18      	it	ne
 80054b2:	6059      	strne	r1, [r3, #4]
 80054b4:	6863      	ldr	r3, [r4, #4]
 80054b6:	bf08      	it	eq
 80054b8:	f8c8 1000 	streq.w	r1, [r8]
 80054bc:	5162      	str	r2, [r4, r5]
 80054be:	604b      	str	r3, [r1, #4]
 80054c0:	4638      	mov	r0, r7
 80054c2:	f104 060b 	add.w	r6, r4, #11
 80054c6:	f000 f829 	bl	800551c <__malloc_unlock>
 80054ca:	f026 0607 	bic.w	r6, r6, #7
 80054ce:	1d23      	adds	r3, r4, #4
 80054d0:	1af2      	subs	r2, r6, r3
 80054d2:	d0ae      	beq.n	8005432 <_malloc_r+0x22>
 80054d4:	1b9b      	subs	r3, r3, r6
 80054d6:	50a3      	str	r3, [r4, r2]
 80054d8:	e7ab      	b.n	8005432 <_malloc_r+0x22>
 80054da:	42a3      	cmp	r3, r4
 80054dc:	6862      	ldr	r2, [r4, #4]
 80054de:	d1dd      	bne.n	800549c <_malloc_r+0x8c>
 80054e0:	f8c8 2000 	str.w	r2, [r8]
 80054e4:	e7ec      	b.n	80054c0 <_malloc_r+0xb0>
 80054e6:	4623      	mov	r3, r4
 80054e8:	6864      	ldr	r4, [r4, #4]
 80054ea:	e7ac      	b.n	8005446 <_malloc_r+0x36>
 80054ec:	4634      	mov	r4, r6
 80054ee:	6876      	ldr	r6, [r6, #4]
 80054f0:	e7b4      	b.n	800545c <_malloc_r+0x4c>
 80054f2:	4613      	mov	r3, r2
 80054f4:	e7cc      	b.n	8005490 <_malloc_r+0x80>
 80054f6:	230c      	movs	r3, #12
 80054f8:	4638      	mov	r0, r7
 80054fa:	603b      	str	r3, [r7, #0]
 80054fc:	f000 f80e 	bl	800551c <__malloc_unlock>
 8005500:	e797      	b.n	8005432 <_malloc_r+0x22>
 8005502:	6025      	str	r5, [r4, #0]
 8005504:	e7dc      	b.n	80054c0 <_malloc_r+0xb0>
 8005506:	605b      	str	r3, [r3, #4]
 8005508:	deff      	udf	#255	; 0xff
 800550a:	bf00      	nop
 800550c:	20000464 	.word	0x20000464

08005510 <__malloc_lock>:
 8005510:	4801      	ldr	r0, [pc, #4]	; (8005518 <__malloc_lock+0x8>)
 8005512:	f7ff b890 	b.w	8004636 <__retarget_lock_acquire_recursive>
 8005516:	bf00      	nop
 8005518:	20000460 	.word	0x20000460

0800551c <__malloc_unlock>:
 800551c:	4801      	ldr	r0, [pc, #4]	; (8005524 <__malloc_unlock+0x8>)
 800551e:	f7ff b88b 	b.w	8004638 <__retarget_lock_release_recursive>
 8005522:	bf00      	nop
 8005524:	20000460 	.word	0x20000460

08005528 <_Balloc>:
 8005528:	b570      	push	{r4, r5, r6, lr}
 800552a:	69c6      	ldr	r6, [r0, #28]
 800552c:	4604      	mov	r4, r0
 800552e:	460d      	mov	r5, r1
 8005530:	b976      	cbnz	r6, 8005550 <_Balloc+0x28>
 8005532:	2010      	movs	r0, #16
 8005534:	f7ff ff44 	bl	80053c0 <malloc>
 8005538:	4602      	mov	r2, r0
 800553a:	61e0      	str	r0, [r4, #28]
 800553c:	b920      	cbnz	r0, 8005548 <_Balloc+0x20>
 800553e:	216b      	movs	r1, #107	; 0x6b
 8005540:	4b17      	ldr	r3, [pc, #92]	; (80055a0 <_Balloc+0x78>)
 8005542:	4818      	ldr	r0, [pc, #96]	; (80055a4 <_Balloc+0x7c>)
 8005544:	f000 fdf6 	bl	8006134 <__assert_func>
 8005548:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800554c:	6006      	str	r6, [r0, #0]
 800554e:	60c6      	str	r6, [r0, #12]
 8005550:	69e6      	ldr	r6, [r4, #28]
 8005552:	68f3      	ldr	r3, [r6, #12]
 8005554:	b183      	cbz	r3, 8005578 <_Balloc+0x50>
 8005556:	69e3      	ldr	r3, [r4, #28]
 8005558:	68db      	ldr	r3, [r3, #12]
 800555a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800555e:	b9b8      	cbnz	r0, 8005590 <_Balloc+0x68>
 8005560:	2101      	movs	r1, #1
 8005562:	fa01 f605 	lsl.w	r6, r1, r5
 8005566:	1d72      	adds	r2, r6, #5
 8005568:	4620      	mov	r0, r4
 800556a:	0092      	lsls	r2, r2, #2
 800556c:	f000 fe00 	bl	8006170 <_calloc_r>
 8005570:	b160      	cbz	r0, 800558c <_Balloc+0x64>
 8005572:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005576:	e00e      	b.n	8005596 <_Balloc+0x6e>
 8005578:	2221      	movs	r2, #33	; 0x21
 800557a:	2104      	movs	r1, #4
 800557c:	4620      	mov	r0, r4
 800557e:	f000 fdf7 	bl	8006170 <_calloc_r>
 8005582:	69e3      	ldr	r3, [r4, #28]
 8005584:	60f0      	str	r0, [r6, #12]
 8005586:	68db      	ldr	r3, [r3, #12]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d1e4      	bne.n	8005556 <_Balloc+0x2e>
 800558c:	2000      	movs	r0, #0
 800558e:	bd70      	pop	{r4, r5, r6, pc}
 8005590:	6802      	ldr	r2, [r0, #0]
 8005592:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005596:	2300      	movs	r3, #0
 8005598:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800559c:	e7f7      	b.n	800558e <_Balloc+0x66>
 800559e:	bf00      	nop
 80055a0:	080072f3 	.word	0x080072f3
 80055a4:	08007373 	.word	0x08007373

080055a8 <_Bfree>:
 80055a8:	b570      	push	{r4, r5, r6, lr}
 80055aa:	69c6      	ldr	r6, [r0, #28]
 80055ac:	4605      	mov	r5, r0
 80055ae:	460c      	mov	r4, r1
 80055b0:	b976      	cbnz	r6, 80055d0 <_Bfree+0x28>
 80055b2:	2010      	movs	r0, #16
 80055b4:	f7ff ff04 	bl	80053c0 <malloc>
 80055b8:	4602      	mov	r2, r0
 80055ba:	61e8      	str	r0, [r5, #28]
 80055bc:	b920      	cbnz	r0, 80055c8 <_Bfree+0x20>
 80055be:	218f      	movs	r1, #143	; 0x8f
 80055c0:	4b08      	ldr	r3, [pc, #32]	; (80055e4 <_Bfree+0x3c>)
 80055c2:	4809      	ldr	r0, [pc, #36]	; (80055e8 <_Bfree+0x40>)
 80055c4:	f000 fdb6 	bl	8006134 <__assert_func>
 80055c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80055cc:	6006      	str	r6, [r0, #0]
 80055ce:	60c6      	str	r6, [r0, #12]
 80055d0:	b13c      	cbz	r4, 80055e2 <_Bfree+0x3a>
 80055d2:	69eb      	ldr	r3, [r5, #28]
 80055d4:	6862      	ldr	r2, [r4, #4]
 80055d6:	68db      	ldr	r3, [r3, #12]
 80055d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80055dc:	6021      	str	r1, [r4, #0]
 80055de:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80055e2:	bd70      	pop	{r4, r5, r6, pc}
 80055e4:	080072f3 	.word	0x080072f3
 80055e8:	08007373 	.word	0x08007373

080055ec <__multadd>:
 80055ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055f0:	4607      	mov	r7, r0
 80055f2:	460c      	mov	r4, r1
 80055f4:	461e      	mov	r6, r3
 80055f6:	2000      	movs	r0, #0
 80055f8:	690d      	ldr	r5, [r1, #16]
 80055fa:	f101 0c14 	add.w	ip, r1, #20
 80055fe:	f8dc 3000 	ldr.w	r3, [ip]
 8005602:	3001      	adds	r0, #1
 8005604:	b299      	uxth	r1, r3
 8005606:	fb02 6101 	mla	r1, r2, r1, r6
 800560a:	0c1e      	lsrs	r6, r3, #16
 800560c:	0c0b      	lsrs	r3, r1, #16
 800560e:	fb02 3306 	mla	r3, r2, r6, r3
 8005612:	b289      	uxth	r1, r1
 8005614:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005618:	4285      	cmp	r5, r0
 800561a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800561e:	f84c 1b04 	str.w	r1, [ip], #4
 8005622:	dcec      	bgt.n	80055fe <__multadd+0x12>
 8005624:	b30e      	cbz	r6, 800566a <__multadd+0x7e>
 8005626:	68a3      	ldr	r3, [r4, #8]
 8005628:	42ab      	cmp	r3, r5
 800562a:	dc19      	bgt.n	8005660 <__multadd+0x74>
 800562c:	6861      	ldr	r1, [r4, #4]
 800562e:	4638      	mov	r0, r7
 8005630:	3101      	adds	r1, #1
 8005632:	f7ff ff79 	bl	8005528 <_Balloc>
 8005636:	4680      	mov	r8, r0
 8005638:	b928      	cbnz	r0, 8005646 <__multadd+0x5a>
 800563a:	4602      	mov	r2, r0
 800563c:	21ba      	movs	r1, #186	; 0xba
 800563e:	4b0c      	ldr	r3, [pc, #48]	; (8005670 <__multadd+0x84>)
 8005640:	480c      	ldr	r0, [pc, #48]	; (8005674 <__multadd+0x88>)
 8005642:	f000 fd77 	bl	8006134 <__assert_func>
 8005646:	6922      	ldr	r2, [r4, #16]
 8005648:	f104 010c 	add.w	r1, r4, #12
 800564c:	3202      	adds	r2, #2
 800564e:	0092      	lsls	r2, r2, #2
 8005650:	300c      	adds	r0, #12
 8005652:	f000 fd61 	bl	8006118 <memcpy>
 8005656:	4621      	mov	r1, r4
 8005658:	4638      	mov	r0, r7
 800565a:	f7ff ffa5 	bl	80055a8 <_Bfree>
 800565e:	4644      	mov	r4, r8
 8005660:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005664:	3501      	adds	r5, #1
 8005666:	615e      	str	r6, [r3, #20]
 8005668:	6125      	str	r5, [r4, #16]
 800566a:	4620      	mov	r0, r4
 800566c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005670:	08007362 	.word	0x08007362
 8005674:	08007373 	.word	0x08007373

08005678 <__hi0bits>:
 8005678:	0c02      	lsrs	r2, r0, #16
 800567a:	0412      	lsls	r2, r2, #16
 800567c:	4603      	mov	r3, r0
 800567e:	b9ca      	cbnz	r2, 80056b4 <__hi0bits+0x3c>
 8005680:	0403      	lsls	r3, r0, #16
 8005682:	2010      	movs	r0, #16
 8005684:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005688:	bf04      	itt	eq
 800568a:	021b      	lsleq	r3, r3, #8
 800568c:	3008      	addeq	r0, #8
 800568e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005692:	bf04      	itt	eq
 8005694:	011b      	lsleq	r3, r3, #4
 8005696:	3004      	addeq	r0, #4
 8005698:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800569c:	bf04      	itt	eq
 800569e:	009b      	lsleq	r3, r3, #2
 80056a0:	3002      	addeq	r0, #2
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	db05      	blt.n	80056b2 <__hi0bits+0x3a>
 80056a6:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80056aa:	f100 0001 	add.w	r0, r0, #1
 80056ae:	bf08      	it	eq
 80056b0:	2020      	moveq	r0, #32
 80056b2:	4770      	bx	lr
 80056b4:	2000      	movs	r0, #0
 80056b6:	e7e5      	b.n	8005684 <__hi0bits+0xc>

080056b8 <__lo0bits>:
 80056b8:	6803      	ldr	r3, [r0, #0]
 80056ba:	4602      	mov	r2, r0
 80056bc:	f013 0007 	ands.w	r0, r3, #7
 80056c0:	d00b      	beq.n	80056da <__lo0bits+0x22>
 80056c2:	07d9      	lsls	r1, r3, #31
 80056c4:	d421      	bmi.n	800570a <__lo0bits+0x52>
 80056c6:	0798      	lsls	r0, r3, #30
 80056c8:	bf49      	itett	mi
 80056ca:	085b      	lsrmi	r3, r3, #1
 80056cc:	089b      	lsrpl	r3, r3, #2
 80056ce:	2001      	movmi	r0, #1
 80056d0:	6013      	strmi	r3, [r2, #0]
 80056d2:	bf5c      	itt	pl
 80056d4:	2002      	movpl	r0, #2
 80056d6:	6013      	strpl	r3, [r2, #0]
 80056d8:	4770      	bx	lr
 80056da:	b299      	uxth	r1, r3
 80056dc:	b909      	cbnz	r1, 80056e2 <__lo0bits+0x2a>
 80056de:	2010      	movs	r0, #16
 80056e0:	0c1b      	lsrs	r3, r3, #16
 80056e2:	b2d9      	uxtb	r1, r3
 80056e4:	b909      	cbnz	r1, 80056ea <__lo0bits+0x32>
 80056e6:	3008      	adds	r0, #8
 80056e8:	0a1b      	lsrs	r3, r3, #8
 80056ea:	0719      	lsls	r1, r3, #28
 80056ec:	bf04      	itt	eq
 80056ee:	091b      	lsreq	r3, r3, #4
 80056f0:	3004      	addeq	r0, #4
 80056f2:	0799      	lsls	r1, r3, #30
 80056f4:	bf04      	itt	eq
 80056f6:	089b      	lsreq	r3, r3, #2
 80056f8:	3002      	addeq	r0, #2
 80056fa:	07d9      	lsls	r1, r3, #31
 80056fc:	d403      	bmi.n	8005706 <__lo0bits+0x4e>
 80056fe:	085b      	lsrs	r3, r3, #1
 8005700:	f100 0001 	add.w	r0, r0, #1
 8005704:	d003      	beq.n	800570e <__lo0bits+0x56>
 8005706:	6013      	str	r3, [r2, #0]
 8005708:	4770      	bx	lr
 800570a:	2000      	movs	r0, #0
 800570c:	4770      	bx	lr
 800570e:	2020      	movs	r0, #32
 8005710:	4770      	bx	lr
	...

08005714 <__i2b>:
 8005714:	b510      	push	{r4, lr}
 8005716:	460c      	mov	r4, r1
 8005718:	2101      	movs	r1, #1
 800571a:	f7ff ff05 	bl	8005528 <_Balloc>
 800571e:	4602      	mov	r2, r0
 8005720:	b928      	cbnz	r0, 800572e <__i2b+0x1a>
 8005722:	f240 1145 	movw	r1, #325	; 0x145
 8005726:	4b04      	ldr	r3, [pc, #16]	; (8005738 <__i2b+0x24>)
 8005728:	4804      	ldr	r0, [pc, #16]	; (800573c <__i2b+0x28>)
 800572a:	f000 fd03 	bl	8006134 <__assert_func>
 800572e:	2301      	movs	r3, #1
 8005730:	6144      	str	r4, [r0, #20]
 8005732:	6103      	str	r3, [r0, #16]
 8005734:	bd10      	pop	{r4, pc}
 8005736:	bf00      	nop
 8005738:	08007362 	.word	0x08007362
 800573c:	08007373 	.word	0x08007373

08005740 <__multiply>:
 8005740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005744:	4691      	mov	r9, r2
 8005746:	690a      	ldr	r2, [r1, #16]
 8005748:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800574c:	460c      	mov	r4, r1
 800574e:	429a      	cmp	r2, r3
 8005750:	bfbe      	ittt	lt
 8005752:	460b      	movlt	r3, r1
 8005754:	464c      	movlt	r4, r9
 8005756:	4699      	movlt	r9, r3
 8005758:	6927      	ldr	r7, [r4, #16]
 800575a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800575e:	68a3      	ldr	r3, [r4, #8]
 8005760:	6861      	ldr	r1, [r4, #4]
 8005762:	eb07 060a 	add.w	r6, r7, sl
 8005766:	42b3      	cmp	r3, r6
 8005768:	b085      	sub	sp, #20
 800576a:	bfb8      	it	lt
 800576c:	3101      	addlt	r1, #1
 800576e:	f7ff fedb 	bl	8005528 <_Balloc>
 8005772:	b930      	cbnz	r0, 8005782 <__multiply+0x42>
 8005774:	4602      	mov	r2, r0
 8005776:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800577a:	4b43      	ldr	r3, [pc, #268]	; (8005888 <__multiply+0x148>)
 800577c:	4843      	ldr	r0, [pc, #268]	; (800588c <__multiply+0x14c>)
 800577e:	f000 fcd9 	bl	8006134 <__assert_func>
 8005782:	f100 0514 	add.w	r5, r0, #20
 8005786:	462b      	mov	r3, r5
 8005788:	2200      	movs	r2, #0
 800578a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800578e:	4543      	cmp	r3, r8
 8005790:	d321      	bcc.n	80057d6 <__multiply+0x96>
 8005792:	f104 0314 	add.w	r3, r4, #20
 8005796:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800579a:	f109 0314 	add.w	r3, r9, #20
 800579e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80057a2:	9202      	str	r2, [sp, #8]
 80057a4:	1b3a      	subs	r2, r7, r4
 80057a6:	3a15      	subs	r2, #21
 80057a8:	f022 0203 	bic.w	r2, r2, #3
 80057ac:	3204      	adds	r2, #4
 80057ae:	f104 0115 	add.w	r1, r4, #21
 80057b2:	428f      	cmp	r7, r1
 80057b4:	bf38      	it	cc
 80057b6:	2204      	movcc	r2, #4
 80057b8:	9201      	str	r2, [sp, #4]
 80057ba:	9a02      	ldr	r2, [sp, #8]
 80057bc:	9303      	str	r3, [sp, #12]
 80057be:	429a      	cmp	r2, r3
 80057c0:	d80c      	bhi.n	80057dc <__multiply+0x9c>
 80057c2:	2e00      	cmp	r6, #0
 80057c4:	dd03      	ble.n	80057ce <__multiply+0x8e>
 80057c6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d05a      	beq.n	8005884 <__multiply+0x144>
 80057ce:	6106      	str	r6, [r0, #16]
 80057d0:	b005      	add	sp, #20
 80057d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057d6:	f843 2b04 	str.w	r2, [r3], #4
 80057da:	e7d8      	b.n	800578e <__multiply+0x4e>
 80057dc:	f8b3 a000 	ldrh.w	sl, [r3]
 80057e0:	f1ba 0f00 	cmp.w	sl, #0
 80057e4:	d023      	beq.n	800582e <__multiply+0xee>
 80057e6:	46a9      	mov	r9, r5
 80057e8:	f04f 0c00 	mov.w	ip, #0
 80057ec:	f104 0e14 	add.w	lr, r4, #20
 80057f0:	f85e 2b04 	ldr.w	r2, [lr], #4
 80057f4:	f8d9 1000 	ldr.w	r1, [r9]
 80057f8:	fa1f fb82 	uxth.w	fp, r2
 80057fc:	b289      	uxth	r1, r1
 80057fe:	fb0a 110b 	mla	r1, sl, fp, r1
 8005802:	4461      	add	r1, ip
 8005804:	f8d9 c000 	ldr.w	ip, [r9]
 8005808:	0c12      	lsrs	r2, r2, #16
 800580a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800580e:	fb0a c202 	mla	r2, sl, r2, ip
 8005812:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005816:	b289      	uxth	r1, r1
 8005818:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800581c:	4577      	cmp	r7, lr
 800581e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005822:	f849 1b04 	str.w	r1, [r9], #4
 8005826:	d8e3      	bhi.n	80057f0 <__multiply+0xb0>
 8005828:	9a01      	ldr	r2, [sp, #4]
 800582a:	f845 c002 	str.w	ip, [r5, r2]
 800582e:	9a03      	ldr	r2, [sp, #12]
 8005830:	3304      	adds	r3, #4
 8005832:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005836:	f1b9 0f00 	cmp.w	r9, #0
 800583a:	d021      	beq.n	8005880 <__multiply+0x140>
 800583c:	46ae      	mov	lr, r5
 800583e:	f04f 0a00 	mov.w	sl, #0
 8005842:	6829      	ldr	r1, [r5, #0]
 8005844:	f104 0c14 	add.w	ip, r4, #20
 8005848:	f8bc b000 	ldrh.w	fp, [ip]
 800584c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005850:	b289      	uxth	r1, r1
 8005852:	fb09 220b 	mla	r2, r9, fp, r2
 8005856:	4452      	add	r2, sl
 8005858:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800585c:	f84e 1b04 	str.w	r1, [lr], #4
 8005860:	f85c 1b04 	ldr.w	r1, [ip], #4
 8005864:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005868:	f8be 1000 	ldrh.w	r1, [lr]
 800586c:	4567      	cmp	r7, ip
 800586e:	fb09 110a 	mla	r1, r9, sl, r1
 8005872:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8005876:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800587a:	d8e5      	bhi.n	8005848 <__multiply+0x108>
 800587c:	9a01      	ldr	r2, [sp, #4]
 800587e:	50a9      	str	r1, [r5, r2]
 8005880:	3504      	adds	r5, #4
 8005882:	e79a      	b.n	80057ba <__multiply+0x7a>
 8005884:	3e01      	subs	r6, #1
 8005886:	e79c      	b.n	80057c2 <__multiply+0x82>
 8005888:	08007362 	.word	0x08007362
 800588c:	08007373 	.word	0x08007373

08005890 <__pow5mult>:
 8005890:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005894:	4615      	mov	r5, r2
 8005896:	f012 0203 	ands.w	r2, r2, #3
 800589a:	4606      	mov	r6, r0
 800589c:	460f      	mov	r7, r1
 800589e:	d007      	beq.n	80058b0 <__pow5mult+0x20>
 80058a0:	4c25      	ldr	r4, [pc, #148]	; (8005938 <__pow5mult+0xa8>)
 80058a2:	3a01      	subs	r2, #1
 80058a4:	2300      	movs	r3, #0
 80058a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80058aa:	f7ff fe9f 	bl	80055ec <__multadd>
 80058ae:	4607      	mov	r7, r0
 80058b0:	10ad      	asrs	r5, r5, #2
 80058b2:	d03d      	beq.n	8005930 <__pow5mult+0xa0>
 80058b4:	69f4      	ldr	r4, [r6, #28]
 80058b6:	b97c      	cbnz	r4, 80058d8 <__pow5mult+0x48>
 80058b8:	2010      	movs	r0, #16
 80058ba:	f7ff fd81 	bl	80053c0 <malloc>
 80058be:	4602      	mov	r2, r0
 80058c0:	61f0      	str	r0, [r6, #28]
 80058c2:	b928      	cbnz	r0, 80058d0 <__pow5mult+0x40>
 80058c4:	f240 11b3 	movw	r1, #435	; 0x1b3
 80058c8:	4b1c      	ldr	r3, [pc, #112]	; (800593c <__pow5mult+0xac>)
 80058ca:	481d      	ldr	r0, [pc, #116]	; (8005940 <__pow5mult+0xb0>)
 80058cc:	f000 fc32 	bl	8006134 <__assert_func>
 80058d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80058d4:	6004      	str	r4, [r0, #0]
 80058d6:	60c4      	str	r4, [r0, #12]
 80058d8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80058dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80058e0:	b94c      	cbnz	r4, 80058f6 <__pow5mult+0x66>
 80058e2:	f240 2171 	movw	r1, #625	; 0x271
 80058e6:	4630      	mov	r0, r6
 80058e8:	f7ff ff14 	bl	8005714 <__i2b>
 80058ec:	2300      	movs	r3, #0
 80058ee:	4604      	mov	r4, r0
 80058f0:	f8c8 0008 	str.w	r0, [r8, #8]
 80058f4:	6003      	str	r3, [r0, #0]
 80058f6:	f04f 0900 	mov.w	r9, #0
 80058fa:	07eb      	lsls	r3, r5, #31
 80058fc:	d50a      	bpl.n	8005914 <__pow5mult+0x84>
 80058fe:	4639      	mov	r1, r7
 8005900:	4622      	mov	r2, r4
 8005902:	4630      	mov	r0, r6
 8005904:	f7ff ff1c 	bl	8005740 <__multiply>
 8005908:	4680      	mov	r8, r0
 800590a:	4639      	mov	r1, r7
 800590c:	4630      	mov	r0, r6
 800590e:	f7ff fe4b 	bl	80055a8 <_Bfree>
 8005912:	4647      	mov	r7, r8
 8005914:	106d      	asrs	r5, r5, #1
 8005916:	d00b      	beq.n	8005930 <__pow5mult+0xa0>
 8005918:	6820      	ldr	r0, [r4, #0]
 800591a:	b938      	cbnz	r0, 800592c <__pow5mult+0x9c>
 800591c:	4622      	mov	r2, r4
 800591e:	4621      	mov	r1, r4
 8005920:	4630      	mov	r0, r6
 8005922:	f7ff ff0d 	bl	8005740 <__multiply>
 8005926:	6020      	str	r0, [r4, #0]
 8005928:	f8c0 9000 	str.w	r9, [r0]
 800592c:	4604      	mov	r4, r0
 800592e:	e7e4      	b.n	80058fa <__pow5mult+0x6a>
 8005930:	4638      	mov	r0, r7
 8005932:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005936:	bf00      	nop
 8005938:	080074c0 	.word	0x080074c0
 800593c:	080072f3 	.word	0x080072f3
 8005940:	08007373 	.word	0x08007373

08005944 <__lshift>:
 8005944:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005948:	460c      	mov	r4, r1
 800594a:	4607      	mov	r7, r0
 800594c:	4691      	mov	r9, r2
 800594e:	6923      	ldr	r3, [r4, #16]
 8005950:	6849      	ldr	r1, [r1, #4]
 8005952:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005956:	68a3      	ldr	r3, [r4, #8]
 8005958:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800595c:	f108 0601 	add.w	r6, r8, #1
 8005960:	42b3      	cmp	r3, r6
 8005962:	db0b      	blt.n	800597c <__lshift+0x38>
 8005964:	4638      	mov	r0, r7
 8005966:	f7ff fddf 	bl	8005528 <_Balloc>
 800596a:	4605      	mov	r5, r0
 800596c:	b948      	cbnz	r0, 8005982 <__lshift+0x3e>
 800596e:	4602      	mov	r2, r0
 8005970:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8005974:	4b27      	ldr	r3, [pc, #156]	; (8005a14 <__lshift+0xd0>)
 8005976:	4828      	ldr	r0, [pc, #160]	; (8005a18 <__lshift+0xd4>)
 8005978:	f000 fbdc 	bl	8006134 <__assert_func>
 800597c:	3101      	adds	r1, #1
 800597e:	005b      	lsls	r3, r3, #1
 8005980:	e7ee      	b.n	8005960 <__lshift+0x1c>
 8005982:	2300      	movs	r3, #0
 8005984:	f100 0114 	add.w	r1, r0, #20
 8005988:	f100 0210 	add.w	r2, r0, #16
 800598c:	4618      	mov	r0, r3
 800598e:	4553      	cmp	r3, sl
 8005990:	db33      	blt.n	80059fa <__lshift+0xb6>
 8005992:	6920      	ldr	r0, [r4, #16]
 8005994:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005998:	f104 0314 	add.w	r3, r4, #20
 800599c:	f019 091f 	ands.w	r9, r9, #31
 80059a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80059a4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80059a8:	d02b      	beq.n	8005a02 <__lshift+0xbe>
 80059aa:	468a      	mov	sl, r1
 80059ac:	2200      	movs	r2, #0
 80059ae:	f1c9 0e20 	rsb	lr, r9, #32
 80059b2:	6818      	ldr	r0, [r3, #0]
 80059b4:	fa00 f009 	lsl.w	r0, r0, r9
 80059b8:	4310      	orrs	r0, r2
 80059ba:	f84a 0b04 	str.w	r0, [sl], #4
 80059be:	f853 2b04 	ldr.w	r2, [r3], #4
 80059c2:	459c      	cmp	ip, r3
 80059c4:	fa22 f20e 	lsr.w	r2, r2, lr
 80059c8:	d8f3      	bhi.n	80059b2 <__lshift+0x6e>
 80059ca:	ebac 0304 	sub.w	r3, ip, r4
 80059ce:	3b15      	subs	r3, #21
 80059d0:	f023 0303 	bic.w	r3, r3, #3
 80059d4:	3304      	adds	r3, #4
 80059d6:	f104 0015 	add.w	r0, r4, #21
 80059da:	4584      	cmp	ip, r0
 80059dc:	bf38      	it	cc
 80059de:	2304      	movcc	r3, #4
 80059e0:	50ca      	str	r2, [r1, r3]
 80059e2:	b10a      	cbz	r2, 80059e8 <__lshift+0xa4>
 80059e4:	f108 0602 	add.w	r6, r8, #2
 80059e8:	3e01      	subs	r6, #1
 80059ea:	4638      	mov	r0, r7
 80059ec:	4621      	mov	r1, r4
 80059ee:	612e      	str	r6, [r5, #16]
 80059f0:	f7ff fdda 	bl	80055a8 <_Bfree>
 80059f4:	4628      	mov	r0, r5
 80059f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059fa:	f842 0f04 	str.w	r0, [r2, #4]!
 80059fe:	3301      	adds	r3, #1
 8005a00:	e7c5      	b.n	800598e <__lshift+0x4a>
 8005a02:	3904      	subs	r1, #4
 8005a04:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a08:	459c      	cmp	ip, r3
 8005a0a:	f841 2f04 	str.w	r2, [r1, #4]!
 8005a0e:	d8f9      	bhi.n	8005a04 <__lshift+0xc0>
 8005a10:	e7ea      	b.n	80059e8 <__lshift+0xa4>
 8005a12:	bf00      	nop
 8005a14:	08007362 	.word	0x08007362
 8005a18:	08007373 	.word	0x08007373

08005a1c <__mcmp>:
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	690a      	ldr	r2, [r1, #16]
 8005a20:	6900      	ldr	r0, [r0, #16]
 8005a22:	b530      	push	{r4, r5, lr}
 8005a24:	1a80      	subs	r0, r0, r2
 8005a26:	d10d      	bne.n	8005a44 <__mcmp+0x28>
 8005a28:	3314      	adds	r3, #20
 8005a2a:	3114      	adds	r1, #20
 8005a2c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005a30:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005a34:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005a38:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005a3c:	4295      	cmp	r5, r2
 8005a3e:	d002      	beq.n	8005a46 <__mcmp+0x2a>
 8005a40:	d304      	bcc.n	8005a4c <__mcmp+0x30>
 8005a42:	2001      	movs	r0, #1
 8005a44:	bd30      	pop	{r4, r5, pc}
 8005a46:	42a3      	cmp	r3, r4
 8005a48:	d3f4      	bcc.n	8005a34 <__mcmp+0x18>
 8005a4a:	e7fb      	b.n	8005a44 <__mcmp+0x28>
 8005a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8005a50:	e7f8      	b.n	8005a44 <__mcmp+0x28>
	...

08005a54 <__mdiff>:
 8005a54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a58:	460d      	mov	r5, r1
 8005a5a:	4607      	mov	r7, r0
 8005a5c:	4611      	mov	r1, r2
 8005a5e:	4628      	mov	r0, r5
 8005a60:	4614      	mov	r4, r2
 8005a62:	f7ff ffdb 	bl	8005a1c <__mcmp>
 8005a66:	1e06      	subs	r6, r0, #0
 8005a68:	d111      	bne.n	8005a8e <__mdiff+0x3a>
 8005a6a:	4631      	mov	r1, r6
 8005a6c:	4638      	mov	r0, r7
 8005a6e:	f7ff fd5b 	bl	8005528 <_Balloc>
 8005a72:	4602      	mov	r2, r0
 8005a74:	b928      	cbnz	r0, 8005a82 <__mdiff+0x2e>
 8005a76:	f240 2137 	movw	r1, #567	; 0x237
 8005a7a:	4b3a      	ldr	r3, [pc, #232]	; (8005b64 <__mdiff+0x110>)
 8005a7c:	483a      	ldr	r0, [pc, #232]	; (8005b68 <__mdiff+0x114>)
 8005a7e:	f000 fb59 	bl	8006134 <__assert_func>
 8005a82:	2301      	movs	r3, #1
 8005a84:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005a88:	4610      	mov	r0, r2
 8005a8a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a8e:	bfa4      	itt	ge
 8005a90:	4623      	movge	r3, r4
 8005a92:	462c      	movge	r4, r5
 8005a94:	4638      	mov	r0, r7
 8005a96:	6861      	ldr	r1, [r4, #4]
 8005a98:	bfa6      	itte	ge
 8005a9a:	461d      	movge	r5, r3
 8005a9c:	2600      	movge	r6, #0
 8005a9e:	2601      	movlt	r6, #1
 8005aa0:	f7ff fd42 	bl	8005528 <_Balloc>
 8005aa4:	4602      	mov	r2, r0
 8005aa6:	b918      	cbnz	r0, 8005ab0 <__mdiff+0x5c>
 8005aa8:	f240 2145 	movw	r1, #581	; 0x245
 8005aac:	4b2d      	ldr	r3, [pc, #180]	; (8005b64 <__mdiff+0x110>)
 8005aae:	e7e5      	b.n	8005a7c <__mdiff+0x28>
 8005ab0:	f102 0814 	add.w	r8, r2, #20
 8005ab4:	46c2      	mov	sl, r8
 8005ab6:	f04f 0c00 	mov.w	ip, #0
 8005aba:	6927      	ldr	r7, [r4, #16]
 8005abc:	60c6      	str	r6, [r0, #12]
 8005abe:	692e      	ldr	r6, [r5, #16]
 8005ac0:	f104 0014 	add.w	r0, r4, #20
 8005ac4:	f105 0914 	add.w	r9, r5, #20
 8005ac8:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8005acc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005ad0:	3410      	adds	r4, #16
 8005ad2:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8005ad6:	f859 3b04 	ldr.w	r3, [r9], #4
 8005ada:	fa1f f18b 	uxth.w	r1, fp
 8005ade:	4461      	add	r1, ip
 8005ae0:	fa1f fc83 	uxth.w	ip, r3
 8005ae4:	0c1b      	lsrs	r3, r3, #16
 8005ae6:	eba1 010c 	sub.w	r1, r1, ip
 8005aea:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005aee:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005af2:	b289      	uxth	r1, r1
 8005af4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8005af8:	454e      	cmp	r6, r9
 8005afa:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8005afe:	f84a 1b04 	str.w	r1, [sl], #4
 8005b02:	d8e6      	bhi.n	8005ad2 <__mdiff+0x7e>
 8005b04:	1b73      	subs	r3, r6, r5
 8005b06:	3b15      	subs	r3, #21
 8005b08:	f023 0303 	bic.w	r3, r3, #3
 8005b0c:	3515      	adds	r5, #21
 8005b0e:	3304      	adds	r3, #4
 8005b10:	42ae      	cmp	r6, r5
 8005b12:	bf38      	it	cc
 8005b14:	2304      	movcc	r3, #4
 8005b16:	4418      	add	r0, r3
 8005b18:	4443      	add	r3, r8
 8005b1a:	461e      	mov	r6, r3
 8005b1c:	4605      	mov	r5, r0
 8005b1e:	4575      	cmp	r5, lr
 8005b20:	d30e      	bcc.n	8005b40 <__mdiff+0xec>
 8005b22:	f10e 0103 	add.w	r1, lr, #3
 8005b26:	1a09      	subs	r1, r1, r0
 8005b28:	f021 0103 	bic.w	r1, r1, #3
 8005b2c:	3803      	subs	r0, #3
 8005b2e:	4586      	cmp	lr, r0
 8005b30:	bf38      	it	cc
 8005b32:	2100      	movcc	r1, #0
 8005b34:	440b      	add	r3, r1
 8005b36:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005b3a:	b189      	cbz	r1, 8005b60 <__mdiff+0x10c>
 8005b3c:	6117      	str	r7, [r2, #16]
 8005b3e:	e7a3      	b.n	8005a88 <__mdiff+0x34>
 8005b40:	f855 8b04 	ldr.w	r8, [r5], #4
 8005b44:	fa1f f188 	uxth.w	r1, r8
 8005b48:	4461      	add	r1, ip
 8005b4a:	140c      	asrs	r4, r1, #16
 8005b4c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005b50:	b289      	uxth	r1, r1
 8005b52:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005b56:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8005b5a:	f846 1b04 	str.w	r1, [r6], #4
 8005b5e:	e7de      	b.n	8005b1e <__mdiff+0xca>
 8005b60:	3f01      	subs	r7, #1
 8005b62:	e7e8      	b.n	8005b36 <__mdiff+0xe2>
 8005b64:	08007362 	.word	0x08007362
 8005b68:	08007373 	.word	0x08007373

08005b6c <__d2b>:
 8005b6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b6e:	2101      	movs	r1, #1
 8005b70:	4617      	mov	r7, r2
 8005b72:	461c      	mov	r4, r3
 8005b74:	9e08      	ldr	r6, [sp, #32]
 8005b76:	f7ff fcd7 	bl	8005528 <_Balloc>
 8005b7a:	4605      	mov	r5, r0
 8005b7c:	b930      	cbnz	r0, 8005b8c <__d2b+0x20>
 8005b7e:	4602      	mov	r2, r0
 8005b80:	f240 310f 	movw	r1, #783	; 0x30f
 8005b84:	4b22      	ldr	r3, [pc, #136]	; (8005c10 <__d2b+0xa4>)
 8005b86:	4823      	ldr	r0, [pc, #140]	; (8005c14 <__d2b+0xa8>)
 8005b88:	f000 fad4 	bl	8006134 <__assert_func>
 8005b8c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8005b90:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8005b94:	bb24      	cbnz	r4, 8005be0 <__d2b+0x74>
 8005b96:	2f00      	cmp	r7, #0
 8005b98:	9301      	str	r3, [sp, #4]
 8005b9a:	d026      	beq.n	8005bea <__d2b+0x7e>
 8005b9c:	4668      	mov	r0, sp
 8005b9e:	9700      	str	r7, [sp, #0]
 8005ba0:	f7ff fd8a 	bl	80056b8 <__lo0bits>
 8005ba4:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005ba8:	b1e8      	cbz	r0, 8005be6 <__d2b+0x7a>
 8005baa:	f1c0 0320 	rsb	r3, r0, #32
 8005bae:	fa02 f303 	lsl.w	r3, r2, r3
 8005bb2:	430b      	orrs	r3, r1
 8005bb4:	40c2      	lsrs	r2, r0
 8005bb6:	616b      	str	r3, [r5, #20]
 8005bb8:	9201      	str	r2, [sp, #4]
 8005bba:	9b01      	ldr	r3, [sp, #4]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	bf14      	ite	ne
 8005bc0:	2102      	movne	r1, #2
 8005bc2:	2101      	moveq	r1, #1
 8005bc4:	61ab      	str	r3, [r5, #24]
 8005bc6:	6129      	str	r1, [r5, #16]
 8005bc8:	b1bc      	cbz	r4, 8005bfa <__d2b+0x8e>
 8005bca:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8005bce:	4404      	add	r4, r0
 8005bd0:	6034      	str	r4, [r6, #0]
 8005bd2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005bd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bd8:	6018      	str	r0, [r3, #0]
 8005bda:	4628      	mov	r0, r5
 8005bdc:	b003      	add	sp, #12
 8005bde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005be0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005be4:	e7d7      	b.n	8005b96 <__d2b+0x2a>
 8005be6:	6169      	str	r1, [r5, #20]
 8005be8:	e7e7      	b.n	8005bba <__d2b+0x4e>
 8005bea:	a801      	add	r0, sp, #4
 8005bec:	f7ff fd64 	bl	80056b8 <__lo0bits>
 8005bf0:	9b01      	ldr	r3, [sp, #4]
 8005bf2:	2101      	movs	r1, #1
 8005bf4:	616b      	str	r3, [r5, #20]
 8005bf6:	3020      	adds	r0, #32
 8005bf8:	e7e5      	b.n	8005bc6 <__d2b+0x5a>
 8005bfa:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005bfe:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8005c02:	6030      	str	r0, [r6, #0]
 8005c04:	6918      	ldr	r0, [r3, #16]
 8005c06:	f7ff fd37 	bl	8005678 <__hi0bits>
 8005c0a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8005c0e:	e7e2      	b.n	8005bd6 <__d2b+0x6a>
 8005c10:	08007362 	.word	0x08007362
 8005c14:	08007373 	.word	0x08007373

08005c18 <__sfputc_r>:
 8005c18:	6893      	ldr	r3, [r2, #8]
 8005c1a:	b410      	push	{r4}
 8005c1c:	3b01      	subs	r3, #1
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	6093      	str	r3, [r2, #8]
 8005c22:	da07      	bge.n	8005c34 <__sfputc_r+0x1c>
 8005c24:	6994      	ldr	r4, [r2, #24]
 8005c26:	42a3      	cmp	r3, r4
 8005c28:	db01      	blt.n	8005c2e <__sfputc_r+0x16>
 8005c2a:	290a      	cmp	r1, #10
 8005c2c:	d102      	bne.n	8005c34 <__sfputc_r+0x1c>
 8005c2e:	bc10      	pop	{r4}
 8005c30:	f7fe bbef 	b.w	8004412 <__swbuf_r>
 8005c34:	6813      	ldr	r3, [r2, #0]
 8005c36:	1c58      	adds	r0, r3, #1
 8005c38:	6010      	str	r0, [r2, #0]
 8005c3a:	7019      	strb	r1, [r3, #0]
 8005c3c:	4608      	mov	r0, r1
 8005c3e:	bc10      	pop	{r4}
 8005c40:	4770      	bx	lr

08005c42 <__sfputs_r>:
 8005c42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c44:	4606      	mov	r6, r0
 8005c46:	460f      	mov	r7, r1
 8005c48:	4614      	mov	r4, r2
 8005c4a:	18d5      	adds	r5, r2, r3
 8005c4c:	42ac      	cmp	r4, r5
 8005c4e:	d101      	bne.n	8005c54 <__sfputs_r+0x12>
 8005c50:	2000      	movs	r0, #0
 8005c52:	e007      	b.n	8005c64 <__sfputs_r+0x22>
 8005c54:	463a      	mov	r2, r7
 8005c56:	4630      	mov	r0, r6
 8005c58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c5c:	f7ff ffdc 	bl	8005c18 <__sfputc_r>
 8005c60:	1c43      	adds	r3, r0, #1
 8005c62:	d1f3      	bne.n	8005c4c <__sfputs_r+0xa>
 8005c64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005c68 <_vfiprintf_r>:
 8005c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c6c:	460d      	mov	r5, r1
 8005c6e:	4614      	mov	r4, r2
 8005c70:	4698      	mov	r8, r3
 8005c72:	4606      	mov	r6, r0
 8005c74:	b09d      	sub	sp, #116	; 0x74
 8005c76:	b118      	cbz	r0, 8005c80 <_vfiprintf_r+0x18>
 8005c78:	6a03      	ldr	r3, [r0, #32]
 8005c7a:	b90b      	cbnz	r3, 8005c80 <_vfiprintf_r+0x18>
 8005c7c:	f7fe fae2 	bl	8004244 <__sinit>
 8005c80:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005c82:	07d9      	lsls	r1, r3, #31
 8005c84:	d405      	bmi.n	8005c92 <_vfiprintf_r+0x2a>
 8005c86:	89ab      	ldrh	r3, [r5, #12]
 8005c88:	059a      	lsls	r2, r3, #22
 8005c8a:	d402      	bmi.n	8005c92 <_vfiprintf_r+0x2a>
 8005c8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005c8e:	f7fe fcd2 	bl	8004636 <__retarget_lock_acquire_recursive>
 8005c92:	89ab      	ldrh	r3, [r5, #12]
 8005c94:	071b      	lsls	r3, r3, #28
 8005c96:	d501      	bpl.n	8005c9c <_vfiprintf_r+0x34>
 8005c98:	692b      	ldr	r3, [r5, #16]
 8005c9a:	b99b      	cbnz	r3, 8005cc4 <_vfiprintf_r+0x5c>
 8005c9c:	4629      	mov	r1, r5
 8005c9e:	4630      	mov	r0, r6
 8005ca0:	f7fe fbf4 	bl	800448c <__swsetup_r>
 8005ca4:	b170      	cbz	r0, 8005cc4 <_vfiprintf_r+0x5c>
 8005ca6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005ca8:	07dc      	lsls	r4, r3, #31
 8005caa:	d504      	bpl.n	8005cb6 <_vfiprintf_r+0x4e>
 8005cac:	f04f 30ff 	mov.w	r0, #4294967295
 8005cb0:	b01d      	add	sp, #116	; 0x74
 8005cb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cb6:	89ab      	ldrh	r3, [r5, #12]
 8005cb8:	0598      	lsls	r0, r3, #22
 8005cba:	d4f7      	bmi.n	8005cac <_vfiprintf_r+0x44>
 8005cbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005cbe:	f7fe fcbb 	bl	8004638 <__retarget_lock_release_recursive>
 8005cc2:	e7f3      	b.n	8005cac <_vfiprintf_r+0x44>
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	9309      	str	r3, [sp, #36]	; 0x24
 8005cc8:	2320      	movs	r3, #32
 8005cca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005cce:	2330      	movs	r3, #48	; 0x30
 8005cd0:	f04f 0901 	mov.w	r9, #1
 8005cd4:	f8cd 800c 	str.w	r8, [sp, #12]
 8005cd8:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8005e88 <_vfiprintf_r+0x220>
 8005cdc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005ce0:	4623      	mov	r3, r4
 8005ce2:	469a      	mov	sl, r3
 8005ce4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ce8:	b10a      	cbz	r2, 8005cee <_vfiprintf_r+0x86>
 8005cea:	2a25      	cmp	r2, #37	; 0x25
 8005cec:	d1f9      	bne.n	8005ce2 <_vfiprintf_r+0x7a>
 8005cee:	ebba 0b04 	subs.w	fp, sl, r4
 8005cf2:	d00b      	beq.n	8005d0c <_vfiprintf_r+0xa4>
 8005cf4:	465b      	mov	r3, fp
 8005cf6:	4622      	mov	r2, r4
 8005cf8:	4629      	mov	r1, r5
 8005cfa:	4630      	mov	r0, r6
 8005cfc:	f7ff ffa1 	bl	8005c42 <__sfputs_r>
 8005d00:	3001      	adds	r0, #1
 8005d02:	f000 80a9 	beq.w	8005e58 <_vfiprintf_r+0x1f0>
 8005d06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005d08:	445a      	add	r2, fp
 8005d0a:	9209      	str	r2, [sp, #36]	; 0x24
 8005d0c:	f89a 3000 	ldrb.w	r3, [sl]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	f000 80a1 	beq.w	8005e58 <_vfiprintf_r+0x1f0>
 8005d16:	2300      	movs	r3, #0
 8005d18:	f04f 32ff 	mov.w	r2, #4294967295
 8005d1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d20:	f10a 0a01 	add.w	sl, sl, #1
 8005d24:	9304      	str	r3, [sp, #16]
 8005d26:	9307      	str	r3, [sp, #28]
 8005d28:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005d2c:	931a      	str	r3, [sp, #104]	; 0x68
 8005d2e:	4654      	mov	r4, sl
 8005d30:	2205      	movs	r2, #5
 8005d32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d36:	4854      	ldr	r0, [pc, #336]	; (8005e88 <_vfiprintf_r+0x220>)
 8005d38:	f7fe fc7f 	bl	800463a <memchr>
 8005d3c:	9a04      	ldr	r2, [sp, #16]
 8005d3e:	b9d8      	cbnz	r0, 8005d78 <_vfiprintf_r+0x110>
 8005d40:	06d1      	lsls	r1, r2, #27
 8005d42:	bf44      	itt	mi
 8005d44:	2320      	movmi	r3, #32
 8005d46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005d4a:	0713      	lsls	r3, r2, #28
 8005d4c:	bf44      	itt	mi
 8005d4e:	232b      	movmi	r3, #43	; 0x2b
 8005d50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005d54:	f89a 3000 	ldrb.w	r3, [sl]
 8005d58:	2b2a      	cmp	r3, #42	; 0x2a
 8005d5a:	d015      	beq.n	8005d88 <_vfiprintf_r+0x120>
 8005d5c:	4654      	mov	r4, sl
 8005d5e:	2000      	movs	r0, #0
 8005d60:	f04f 0c0a 	mov.w	ip, #10
 8005d64:	9a07      	ldr	r2, [sp, #28]
 8005d66:	4621      	mov	r1, r4
 8005d68:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005d6c:	3b30      	subs	r3, #48	; 0x30
 8005d6e:	2b09      	cmp	r3, #9
 8005d70:	d94d      	bls.n	8005e0e <_vfiprintf_r+0x1a6>
 8005d72:	b1b0      	cbz	r0, 8005da2 <_vfiprintf_r+0x13a>
 8005d74:	9207      	str	r2, [sp, #28]
 8005d76:	e014      	b.n	8005da2 <_vfiprintf_r+0x13a>
 8005d78:	eba0 0308 	sub.w	r3, r0, r8
 8005d7c:	fa09 f303 	lsl.w	r3, r9, r3
 8005d80:	4313      	orrs	r3, r2
 8005d82:	46a2      	mov	sl, r4
 8005d84:	9304      	str	r3, [sp, #16]
 8005d86:	e7d2      	b.n	8005d2e <_vfiprintf_r+0xc6>
 8005d88:	9b03      	ldr	r3, [sp, #12]
 8005d8a:	1d19      	adds	r1, r3, #4
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	9103      	str	r1, [sp, #12]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	bfbb      	ittet	lt
 8005d94:	425b      	neglt	r3, r3
 8005d96:	f042 0202 	orrlt.w	r2, r2, #2
 8005d9a:	9307      	strge	r3, [sp, #28]
 8005d9c:	9307      	strlt	r3, [sp, #28]
 8005d9e:	bfb8      	it	lt
 8005da0:	9204      	strlt	r2, [sp, #16]
 8005da2:	7823      	ldrb	r3, [r4, #0]
 8005da4:	2b2e      	cmp	r3, #46	; 0x2e
 8005da6:	d10c      	bne.n	8005dc2 <_vfiprintf_r+0x15a>
 8005da8:	7863      	ldrb	r3, [r4, #1]
 8005daa:	2b2a      	cmp	r3, #42	; 0x2a
 8005dac:	d134      	bne.n	8005e18 <_vfiprintf_r+0x1b0>
 8005dae:	9b03      	ldr	r3, [sp, #12]
 8005db0:	3402      	adds	r4, #2
 8005db2:	1d1a      	adds	r2, r3, #4
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	9203      	str	r2, [sp, #12]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	bfb8      	it	lt
 8005dbc:	f04f 33ff 	movlt.w	r3, #4294967295
 8005dc0:	9305      	str	r3, [sp, #20]
 8005dc2:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005e8c <_vfiprintf_r+0x224>
 8005dc6:	2203      	movs	r2, #3
 8005dc8:	4650      	mov	r0, sl
 8005dca:	7821      	ldrb	r1, [r4, #0]
 8005dcc:	f7fe fc35 	bl	800463a <memchr>
 8005dd0:	b138      	cbz	r0, 8005de2 <_vfiprintf_r+0x17a>
 8005dd2:	2240      	movs	r2, #64	; 0x40
 8005dd4:	9b04      	ldr	r3, [sp, #16]
 8005dd6:	eba0 000a 	sub.w	r0, r0, sl
 8005dda:	4082      	lsls	r2, r0
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	3401      	adds	r4, #1
 8005de0:	9304      	str	r3, [sp, #16]
 8005de2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005de6:	2206      	movs	r2, #6
 8005de8:	4829      	ldr	r0, [pc, #164]	; (8005e90 <_vfiprintf_r+0x228>)
 8005dea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005dee:	f7fe fc24 	bl	800463a <memchr>
 8005df2:	2800      	cmp	r0, #0
 8005df4:	d03f      	beq.n	8005e76 <_vfiprintf_r+0x20e>
 8005df6:	4b27      	ldr	r3, [pc, #156]	; (8005e94 <_vfiprintf_r+0x22c>)
 8005df8:	bb1b      	cbnz	r3, 8005e42 <_vfiprintf_r+0x1da>
 8005dfa:	9b03      	ldr	r3, [sp, #12]
 8005dfc:	3307      	adds	r3, #7
 8005dfe:	f023 0307 	bic.w	r3, r3, #7
 8005e02:	3308      	adds	r3, #8
 8005e04:	9303      	str	r3, [sp, #12]
 8005e06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e08:	443b      	add	r3, r7
 8005e0a:	9309      	str	r3, [sp, #36]	; 0x24
 8005e0c:	e768      	b.n	8005ce0 <_vfiprintf_r+0x78>
 8005e0e:	460c      	mov	r4, r1
 8005e10:	2001      	movs	r0, #1
 8005e12:	fb0c 3202 	mla	r2, ip, r2, r3
 8005e16:	e7a6      	b.n	8005d66 <_vfiprintf_r+0xfe>
 8005e18:	2300      	movs	r3, #0
 8005e1a:	f04f 0c0a 	mov.w	ip, #10
 8005e1e:	4619      	mov	r1, r3
 8005e20:	3401      	adds	r4, #1
 8005e22:	9305      	str	r3, [sp, #20]
 8005e24:	4620      	mov	r0, r4
 8005e26:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e2a:	3a30      	subs	r2, #48	; 0x30
 8005e2c:	2a09      	cmp	r2, #9
 8005e2e:	d903      	bls.n	8005e38 <_vfiprintf_r+0x1d0>
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d0c6      	beq.n	8005dc2 <_vfiprintf_r+0x15a>
 8005e34:	9105      	str	r1, [sp, #20]
 8005e36:	e7c4      	b.n	8005dc2 <_vfiprintf_r+0x15a>
 8005e38:	4604      	mov	r4, r0
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005e40:	e7f0      	b.n	8005e24 <_vfiprintf_r+0x1bc>
 8005e42:	ab03      	add	r3, sp, #12
 8005e44:	9300      	str	r3, [sp, #0]
 8005e46:	462a      	mov	r2, r5
 8005e48:	4630      	mov	r0, r6
 8005e4a:	4b13      	ldr	r3, [pc, #76]	; (8005e98 <_vfiprintf_r+0x230>)
 8005e4c:	a904      	add	r1, sp, #16
 8005e4e:	f7fd fdab 	bl	80039a8 <_printf_float>
 8005e52:	4607      	mov	r7, r0
 8005e54:	1c78      	adds	r0, r7, #1
 8005e56:	d1d6      	bne.n	8005e06 <_vfiprintf_r+0x19e>
 8005e58:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005e5a:	07d9      	lsls	r1, r3, #31
 8005e5c:	d405      	bmi.n	8005e6a <_vfiprintf_r+0x202>
 8005e5e:	89ab      	ldrh	r3, [r5, #12]
 8005e60:	059a      	lsls	r2, r3, #22
 8005e62:	d402      	bmi.n	8005e6a <_vfiprintf_r+0x202>
 8005e64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005e66:	f7fe fbe7 	bl	8004638 <__retarget_lock_release_recursive>
 8005e6a:	89ab      	ldrh	r3, [r5, #12]
 8005e6c:	065b      	lsls	r3, r3, #25
 8005e6e:	f53f af1d 	bmi.w	8005cac <_vfiprintf_r+0x44>
 8005e72:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005e74:	e71c      	b.n	8005cb0 <_vfiprintf_r+0x48>
 8005e76:	ab03      	add	r3, sp, #12
 8005e78:	9300      	str	r3, [sp, #0]
 8005e7a:	462a      	mov	r2, r5
 8005e7c:	4630      	mov	r0, r6
 8005e7e:	4b06      	ldr	r3, [pc, #24]	; (8005e98 <_vfiprintf_r+0x230>)
 8005e80:	a904      	add	r1, sp, #16
 8005e82:	f7fe f831 	bl	8003ee8 <_printf_i>
 8005e86:	e7e4      	b.n	8005e52 <_vfiprintf_r+0x1ea>
 8005e88:	080074cc 	.word	0x080074cc
 8005e8c:	080074d2 	.word	0x080074d2
 8005e90:	080074d6 	.word	0x080074d6
 8005e94:	080039a9 	.word	0x080039a9
 8005e98:	08005c43 	.word	0x08005c43

08005e9c <__sflush_r>:
 8005e9c:	898a      	ldrh	r2, [r1, #12]
 8005e9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ea0:	4605      	mov	r5, r0
 8005ea2:	0710      	lsls	r0, r2, #28
 8005ea4:	460c      	mov	r4, r1
 8005ea6:	d457      	bmi.n	8005f58 <__sflush_r+0xbc>
 8005ea8:	684b      	ldr	r3, [r1, #4]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	dc04      	bgt.n	8005eb8 <__sflush_r+0x1c>
 8005eae:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	dc01      	bgt.n	8005eb8 <__sflush_r+0x1c>
 8005eb4:	2000      	movs	r0, #0
 8005eb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005eb8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005eba:	2e00      	cmp	r6, #0
 8005ebc:	d0fa      	beq.n	8005eb4 <__sflush_r+0x18>
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005ec4:	682f      	ldr	r7, [r5, #0]
 8005ec6:	6a21      	ldr	r1, [r4, #32]
 8005ec8:	602b      	str	r3, [r5, #0]
 8005eca:	d032      	beq.n	8005f32 <__sflush_r+0x96>
 8005ecc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005ece:	89a3      	ldrh	r3, [r4, #12]
 8005ed0:	075a      	lsls	r2, r3, #29
 8005ed2:	d505      	bpl.n	8005ee0 <__sflush_r+0x44>
 8005ed4:	6863      	ldr	r3, [r4, #4]
 8005ed6:	1ac0      	subs	r0, r0, r3
 8005ed8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005eda:	b10b      	cbz	r3, 8005ee0 <__sflush_r+0x44>
 8005edc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005ede:	1ac0      	subs	r0, r0, r3
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	4602      	mov	r2, r0
 8005ee4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005ee6:	4628      	mov	r0, r5
 8005ee8:	6a21      	ldr	r1, [r4, #32]
 8005eea:	47b0      	blx	r6
 8005eec:	1c43      	adds	r3, r0, #1
 8005eee:	89a3      	ldrh	r3, [r4, #12]
 8005ef0:	d106      	bne.n	8005f00 <__sflush_r+0x64>
 8005ef2:	6829      	ldr	r1, [r5, #0]
 8005ef4:	291d      	cmp	r1, #29
 8005ef6:	d82b      	bhi.n	8005f50 <__sflush_r+0xb4>
 8005ef8:	4a28      	ldr	r2, [pc, #160]	; (8005f9c <__sflush_r+0x100>)
 8005efa:	410a      	asrs	r2, r1
 8005efc:	07d6      	lsls	r6, r2, #31
 8005efe:	d427      	bmi.n	8005f50 <__sflush_r+0xb4>
 8005f00:	2200      	movs	r2, #0
 8005f02:	6062      	str	r2, [r4, #4]
 8005f04:	6922      	ldr	r2, [r4, #16]
 8005f06:	04d9      	lsls	r1, r3, #19
 8005f08:	6022      	str	r2, [r4, #0]
 8005f0a:	d504      	bpl.n	8005f16 <__sflush_r+0x7a>
 8005f0c:	1c42      	adds	r2, r0, #1
 8005f0e:	d101      	bne.n	8005f14 <__sflush_r+0x78>
 8005f10:	682b      	ldr	r3, [r5, #0]
 8005f12:	b903      	cbnz	r3, 8005f16 <__sflush_r+0x7a>
 8005f14:	6560      	str	r0, [r4, #84]	; 0x54
 8005f16:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005f18:	602f      	str	r7, [r5, #0]
 8005f1a:	2900      	cmp	r1, #0
 8005f1c:	d0ca      	beq.n	8005eb4 <__sflush_r+0x18>
 8005f1e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005f22:	4299      	cmp	r1, r3
 8005f24:	d002      	beq.n	8005f2c <__sflush_r+0x90>
 8005f26:	4628      	mov	r0, r5
 8005f28:	f7ff fa02 	bl	8005330 <_free_r>
 8005f2c:	2000      	movs	r0, #0
 8005f2e:	6360      	str	r0, [r4, #52]	; 0x34
 8005f30:	e7c1      	b.n	8005eb6 <__sflush_r+0x1a>
 8005f32:	2301      	movs	r3, #1
 8005f34:	4628      	mov	r0, r5
 8005f36:	47b0      	blx	r6
 8005f38:	1c41      	adds	r1, r0, #1
 8005f3a:	d1c8      	bne.n	8005ece <__sflush_r+0x32>
 8005f3c:	682b      	ldr	r3, [r5, #0]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d0c5      	beq.n	8005ece <__sflush_r+0x32>
 8005f42:	2b1d      	cmp	r3, #29
 8005f44:	d001      	beq.n	8005f4a <__sflush_r+0xae>
 8005f46:	2b16      	cmp	r3, #22
 8005f48:	d101      	bne.n	8005f4e <__sflush_r+0xb2>
 8005f4a:	602f      	str	r7, [r5, #0]
 8005f4c:	e7b2      	b.n	8005eb4 <__sflush_r+0x18>
 8005f4e:	89a3      	ldrh	r3, [r4, #12]
 8005f50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f54:	81a3      	strh	r3, [r4, #12]
 8005f56:	e7ae      	b.n	8005eb6 <__sflush_r+0x1a>
 8005f58:	690f      	ldr	r7, [r1, #16]
 8005f5a:	2f00      	cmp	r7, #0
 8005f5c:	d0aa      	beq.n	8005eb4 <__sflush_r+0x18>
 8005f5e:	0793      	lsls	r3, r2, #30
 8005f60:	bf18      	it	ne
 8005f62:	2300      	movne	r3, #0
 8005f64:	680e      	ldr	r6, [r1, #0]
 8005f66:	bf08      	it	eq
 8005f68:	694b      	ldreq	r3, [r1, #20]
 8005f6a:	1bf6      	subs	r6, r6, r7
 8005f6c:	600f      	str	r7, [r1, #0]
 8005f6e:	608b      	str	r3, [r1, #8]
 8005f70:	2e00      	cmp	r6, #0
 8005f72:	dd9f      	ble.n	8005eb4 <__sflush_r+0x18>
 8005f74:	4633      	mov	r3, r6
 8005f76:	463a      	mov	r2, r7
 8005f78:	4628      	mov	r0, r5
 8005f7a:	6a21      	ldr	r1, [r4, #32]
 8005f7c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8005f80:	47e0      	blx	ip
 8005f82:	2800      	cmp	r0, #0
 8005f84:	dc06      	bgt.n	8005f94 <__sflush_r+0xf8>
 8005f86:	89a3      	ldrh	r3, [r4, #12]
 8005f88:	f04f 30ff 	mov.w	r0, #4294967295
 8005f8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f90:	81a3      	strh	r3, [r4, #12]
 8005f92:	e790      	b.n	8005eb6 <__sflush_r+0x1a>
 8005f94:	4407      	add	r7, r0
 8005f96:	1a36      	subs	r6, r6, r0
 8005f98:	e7ea      	b.n	8005f70 <__sflush_r+0xd4>
 8005f9a:	bf00      	nop
 8005f9c:	dfbffffe 	.word	0xdfbffffe

08005fa0 <_fflush_r>:
 8005fa0:	b538      	push	{r3, r4, r5, lr}
 8005fa2:	690b      	ldr	r3, [r1, #16]
 8005fa4:	4605      	mov	r5, r0
 8005fa6:	460c      	mov	r4, r1
 8005fa8:	b913      	cbnz	r3, 8005fb0 <_fflush_r+0x10>
 8005faa:	2500      	movs	r5, #0
 8005fac:	4628      	mov	r0, r5
 8005fae:	bd38      	pop	{r3, r4, r5, pc}
 8005fb0:	b118      	cbz	r0, 8005fba <_fflush_r+0x1a>
 8005fb2:	6a03      	ldr	r3, [r0, #32]
 8005fb4:	b90b      	cbnz	r3, 8005fba <_fflush_r+0x1a>
 8005fb6:	f7fe f945 	bl	8004244 <__sinit>
 8005fba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d0f3      	beq.n	8005faa <_fflush_r+0xa>
 8005fc2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005fc4:	07d0      	lsls	r0, r2, #31
 8005fc6:	d404      	bmi.n	8005fd2 <_fflush_r+0x32>
 8005fc8:	0599      	lsls	r1, r3, #22
 8005fca:	d402      	bmi.n	8005fd2 <_fflush_r+0x32>
 8005fcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005fce:	f7fe fb32 	bl	8004636 <__retarget_lock_acquire_recursive>
 8005fd2:	4628      	mov	r0, r5
 8005fd4:	4621      	mov	r1, r4
 8005fd6:	f7ff ff61 	bl	8005e9c <__sflush_r>
 8005fda:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005fdc:	4605      	mov	r5, r0
 8005fde:	07da      	lsls	r2, r3, #31
 8005fe0:	d4e4      	bmi.n	8005fac <_fflush_r+0xc>
 8005fe2:	89a3      	ldrh	r3, [r4, #12]
 8005fe4:	059b      	lsls	r3, r3, #22
 8005fe6:	d4e1      	bmi.n	8005fac <_fflush_r+0xc>
 8005fe8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005fea:	f7fe fb25 	bl	8004638 <__retarget_lock_release_recursive>
 8005fee:	e7dd      	b.n	8005fac <_fflush_r+0xc>

08005ff0 <__swhatbuf_r>:
 8005ff0:	b570      	push	{r4, r5, r6, lr}
 8005ff2:	460c      	mov	r4, r1
 8005ff4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ff8:	4615      	mov	r5, r2
 8005ffa:	2900      	cmp	r1, #0
 8005ffc:	461e      	mov	r6, r3
 8005ffe:	b096      	sub	sp, #88	; 0x58
 8006000:	da0c      	bge.n	800601c <__swhatbuf_r+0x2c>
 8006002:	89a3      	ldrh	r3, [r4, #12]
 8006004:	2100      	movs	r1, #0
 8006006:	f013 0f80 	tst.w	r3, #128	; 0x80
 800600a:	bf0c      	ite	eq
 800600c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006010:	2340      	movne	r3, #64	; 0x40
 8006012:	2000      	movs	r0, #0
 8006014:	6031      	str	r1, [r6, #0]
 8006016:	602b      	str	r3, [r5, #0]
 8006018:	b016      	add	sp, #88	; 0x58
 800601a:	bd70      	pop	{r4, r5, r6, pc}
 800601c:	466a      	mov	r2, sp
 800601e:	f000 f849 	bl	80060b4 <_fstat_r>
 8006022:	2800      	cmp	r0, #0
 8006024:	dbed      	blt.n	8006002 <__swhatbuf_r+0x12>
 8006026:	9901      	ldr	r1, [sp, #4]
 8006028:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800602c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006030:	4259      	negs	r1, r3
 8006032:	4159      	adcs	r1, r3
 8006034:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006038:	e7eb      	b.n	8006012 <__swhatbuf_r+0x22>

0800603a <__smakebuf_r>:
 800603a:	898b      	ldrh	r3, [r1, #12]
 800603c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800603e:	079d      	lsls	r5, r3, #30
 8006040:	4606      	mov	r6, r0
 8006042:	460c      	mov	r4, r1
 8006044:	d507      	bpl.n	8006056 <__smakebuf_r+0x1c>
 8006046:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800604a:	6023      	str	r3, [r4, #0]
 800604c:	6123      	str	r3, [r4, #16]
 800604e:	2301      	movs	r3, #1
 8006050:	6163      	str	r3, [r4, #20]
 8006052:	b002      	add	sp, #8
 8006054:	bd70      	pop	{r4, r5, r6, pc}
 8006056:	466a      	mov	r2, sp
 8006058:	ab01      	add	r3, sp, #4
 800605a:	f7ff ffc9 	bl	8005ff0 <__swhatbuf_r>
 800605e:	9900      	ldr	r1, [sp, #0]
 8006060:	4605      	mov	r5, r0
 8006062:	4630      	mov	r0, r6
 8006064:	f7ff f9d4 	bl	8005410 <_malloc_r>
 8006068:	b948      	cbnz	r0, 800607e <__smakebuf_r+0x44>
 800606a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800606e:	059a      	lsls	r2, r3, #22
 8006070:	d4ef      	bmi.n	8006052 <__smakebuf_r+0x18>
 8006072:	f023 0303 	bic.w	r3, r3, #3
 8006076:	f043 0302 	orr.w	r3, r3, #2
 800607a:	81a3      	strh	r3, [r4, #12]
 800607c:	e7e3      	b.n	8006046 <__smakebuf_r+0xc>
 800607e:	89a3      	ldrh	r3, [r4, #12]
 8006080:	6020      	str	r0, [r4, #0]
 8006082:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006086:	81a3      	strh	r3, [r4, #12]
 8006088:	9b00      	ldr	r3, [sp, #0]
 800608a:	6120      	str	r0, [r4, #16]
 800608c:	6163      	str	r3, [r4, #20]
 800608e:	9b01      	ldr	r3, [sp, #4]
 8006090:	b15b      	cbz	r3, 80060aa <__smakebuf_r+0x70>
 8006092:	4630      	mov	r0, r6
 8006094:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006098:	f000 f81e 	bl	80060d8 <_isatty_r>
 800609c:	b128      	cbz	r0, 80060aa <__smakebuf_r+0x70>
 800609e:	89a3      	ldrh	r3, [r4, #12]
 80060a0:	f023 0303 	bic.w	r3, r3, #3
 80060a4:	f043 0301 	orr.w	r3, r3, #1
 80060a8:	81a3      	strh	r3, [r4, #12]
 80060aa:	89a3      	ldrh	r3, [r4, #12]
 80060ac:	431d      	orrs	r5, r3
 80060ae:	81a5      	strh	r5, [r4, #12]
 80060b0:	e7cf      	b.n	8006052 <__smakebuf_r+0x18>
	...

080060b4 <_fstat_r>:
 80060b4:	b538      	push	{r3, r4, r5, lr}
 80060b6:	2300      	movs	r3, #0
 80060b8:	4d06      	ldr	r5, [pc, #24]	; (80060d4 <_fstat_r+0x20>)
 80060ba:	4604      	mov	r4, r0
 80060bc:	4608      	mov	r0, r1
 80060be:	4611      	mov	r1, r2
 80060c0:	602b      	str	r3, [r5, #0]
 80060c2:	f7fc f8f3 	bl	80022ac <_fstat>
 80060c6:	1c43      	adds	r3, r0, #1
 80060c8:	d102      	bne.n	80060d0 <_fstat_r+0x1c>
 80060ca:	682b      	ldr	r3, [r5, #0]
 80060cc:	b103      	cbz	r3, 80060d0 <_fstat_r+0x1c>
 80060ce:	6023      	str	r3, [r4, #0]
 80060d0:	bd38      	pop	{r3, r4, r5, pc}
 80060d2:	bf00      	nop
 80060d4:	2000045c 	.word	0x2000045c

080060d8 <_isatty_r>:
 80060d8:	b538      	push	{r3, r4, r5, lr}
 80060da:	2300      	movs	r3, #0
 80060dc:	4d05      	ldr	r5, [pc, #20]	; (80060f4 <_isatty_r+0x1c>)
 80060de:	4604      	mov	r4, r0
 80060e0:	4608      	mov	r0, r1
 80060e2:	602b      	str	r3, [r5, #0]
 80060e4:	f7fc f8f1 	bl	80022ca <_isatty>
 80060e8:	1c43      	adds	r3, r0, #1
 80060ea:	d102      	bne.n	80060f2 <_isatty_r+0x1a>
 80060ec:	682b      	ldr	r3, [r5, #0]
 80060ee:	b103      	cbz	r3, 80060f2 <_isatty_r+0x1a>
 80060f0:	6023      	str	r3, [r4, #0]
 80060f2:	bd38      	pop	{r3, r4, r5, pc}
 80060f4:	2000045c 	.word	0x2000045c

080060f8 <_sbrk_r>:
 80060f8:	b538      	push	{r3, r4, r5, lr}
 80060fa:	2300      	movs	r3, #0
 80060fc:	4d05      	ldr	r5, [pc, #20]	; (8006114 <_sbrk_r+0x1c>)
 80060fe:	4604      	mov	r4, r0
 8006100:	4608      	mov	r0, r1
 8006102:	602b      	str	r3, [r5, #0]
 8006104:	f7fc f8f8 	bl	80022f8 <_sbrk>
 8006108:	1c43      	adds	r3, r0, #1
 800610a:	d102      	bne.n	8006112 <_sbrk_r+0x1a>
 800610c:	682b      	ldr	r3, [r5, #0]
 800610e:	b103      	cbz	r3, 8006112 <_sbrk_r+0x1a>
 8006110:	6023      	str	r3, [r4, #0]
 8006112:	bd38      	pop	{r3, r4, r5, pc}
 8006114:	2000045c 	.word	0x2000045c

08006118 <memcpy>:
 8006118:	440a      	add	r2, r1
 800611a:	4291      	cmp	r1, r2
 800611c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006120:	d100      	bne.n	8006124 <memcpy+0xc>
 8006122:	4770      	bx	lr
 8006124:	b510      	push	{r4, lr}
 8006126:	f811 4b01 	ldrb.w	r4, [r1], #1
 800612a:	4291      	cmp	r1, r2
 800612c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006130:	d1f9      	bne.n	8006126 <memcpy+0xe>
 8006132:	bd10      	pop	{r4, pc}

08006134 <__assert_func>:
 8006134:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006136:	4614      	mov	r4, r2
 8006138:	461a      	mov	r2, r3
 800613a:	4b09      	ldr	r3, [pc, #36]	; (8006160 <__assert_func+0x2c>)
 800613c:	4605      	mov	r5, r0
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	68d8      	ldr	r0, [r3, #12]
 8006142:	b14c      	cbz	r4, 8006158 <__assert_func+0x24>
 8006144:	4b07      	ldr	r3, [pc, #28]	; (8006164 <__assert_func+0x30>)
 8006146:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800614a:	9100      	str	r1, [sp, #0]
 800614c:	462b      	mov	r3, r5
 800614e:	4906      	ldr	r1, [pc, #24]	; (8006168 <__assert_func+0x34>)
 8006150:	f000 f842 	bl	80061d8 <fiprintf>
 8006154:	f000 f852 	bl	80061fc <abort>
 8006158:	4b04      	ldr	r3, [pc, #16]	; (800616c <__assert_func+0x38>)
 800615a:	461c      	mov	r4, r3
 800615c:	e7f3      	b.n	8006146 <__assert_func+0x12>
 800615e:	bf00      	nop
 8006160:	20000068 	.word	0x20000068
 8006164:	080074e7 	.word	0x080074e7
 8006168:	080074f4 	.word	0x080074f4
 800616c:	08007522 	.word	0x08007522

08006170 <_calloc_r>:
 8006170:	b570      	push	{r4, r5, r6, lr}
 8006172:	fba1 5402 	umull	r5, r4, r1, r2
 8006176:	b934      	cbnz	r4, 8006186 <_calloc_r+0x16>
 8006178:	4629      	mov	r1, r5
 800617a:	f7ff f949 	bl	8005410 <_malloc_r>
 800617e:	4606      	mov	r6, r0
 8006180:	b928      	cbnz	r0, 800618e <_calloc_r+0x1e>
 8006182:	4630      	mov	r0, r6
 8006184:	bd70      	pop	{r4, r5, r6, pc}
 8006186:	220c      	movs	r2, #12
 8006188:	2600      	movs	r6, #0
 800618a:	6002      	str	r2, [r0, #0]
 800618c:	e7f9      	b.n	8006182 <_calloc_r+0x12>
 800618e:	462a      	mov	r2, r5
 8006190:	4621      	mov	r1, r4
 8006192:	f7fe f9d3 	bl	800453c <memset>
 8006196:	e7f4      	b.n	8006182 <_calloc_r+0x12>

08006198 <__ascii_mbtowc>:
 8006198:	b082      	sub	sp, #8
 800619a:	b901      	cbnz	r1, 800619e <__ascii_mbtowc+0x6>
 800619c:	a901      	add	r1, sp, #4
 800619e:	b142      	cbz	r2, 80061b2 <__ascii_mbtowc+0x1a>
 80061a0:	b14b      	cbz	r3, 80061b6 <__ascii_mbtowc+0x1e>
 80061a2:	7813      	ldrb	r3, [r2, #0]
 80061a4:	600b      	str	r3, [r1, #0]
 80061a6:	7812      	ldrb	r2, [r2, #0]
 80061a8:	1e10      	subs	r0, r2, #0
 80061aa:	bf18      	it	ne
 80061ac:	2001      	movne	r0, #1
 80061ae:	b002      	add	sp, #8
 80061b0:	4770      	bx	lr
 80061b2:	4610      	mov	r0, r2
 80061b4:	e7fb      	b.n	80061ae <__ascii_mbtowc+0x16>
 80061b6:	f06f 0001 	mvn.w	r0, #1
 80061ba:	e7f8      	b.n	80061ae <__ascii_mbtowc+0x16>

080061bc <__ascii_wctomb>:
 80061bc:	4603      	mov	r3, r0
 80061be:	4608      	mov	r0, r1
 80061c0:	b141      	cbz	r1, 80061d4 <__ascii_wctomb+0x18>
 80061c2:	2aff      	cmp	r2, #255	; 0xff
 80061c4:	d904      	bls.n	80061d0 <__ascii_wctomb+0x14>
 80061c6:	228a      	movs	r2, #138	; 0x8a
 80061c8:	f04f 30ff 	mov.w	r0, #4294967295
 80061cc:	601a      	str	r2, [r3, #0]
 80061ce:	4770      	bx	lr
 80061d0:	2001      	movs	r0, #1
 80061d2:	700a      	strb	r2, [r1, #0]
 80061d4:	4770      	bx	lr
	...

080061d8 <fiprintf>:
 80061d8:	b40e      	push	{r1, r2, r3}
 80061da:	b503      	push	{r0, r1, lr}
 80061dc:	4601      	mov	r1, r0
 80061de:	ab03      	add	r3, sp, #12
 80061e0:	4805      	ldr	r0, [pc, #20]	; (80061f8 <fiprintf+0x20>)
 80061e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80061e6:	6800      	ldr	r0, [r0, #0]
 80061e8:	9301      	str	r3, [sp, #4]
 80061ea:	f7ff fd3d 	bl	8005c68 <_vfiprintf_r>
 80061ee:	b002      	add	sp, #8
 80061f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80061f4:	b003      	add	sp, #12
 80061f6:	4770      	bx	lr
 80061f8:	20000068 	.word	0x20000068

080061fc <abort>:
 80061fc:	2006      	movs	r0, #6
 80061fe:	b508      	push	{r3, lr}
 8006200:	f000 f82c 	bl	800625c <raise>
 8006204:	2001      	movs	r0, #1
 8006206:	f7fc f803 	bl	8002210 <_exit>

0800620a <_raise_r>:
 800620a:	291f      	cmp	r1, #31
 800620c:	b538      	push	{r3, r4, r5, lr}
 800620e:	4604      	mov	r4, r0
 8006210:	460d      	mov	r5, r1
 8006212:	d904      	bls.n	800621e <_raise_r+0x14>
 8006214:	2316      	movs	r3, #22
 8006216:	6003      	str	r3, [r0, #0]
 8006218:	f04f 30ff 	mov.w	r0, #4294967295
 800621c:	bd38      	pop	{r3, r4, r5, pc}
 800621e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8006220:	b112      	cbz	r2, 8006228 <_raise_r+0x1e>
 8006222:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006226:	b94b      	cbnz	r3, 800623c <_raise_r+0x32>
 8006228:	4620      	mov	r0, r4
 800622a:	f000 f831 	bl	8006290 <_getpid_r>
 800622e:	462a      	mov	r2, r5
 8006230:	4601      	mov	r1, r0
 8006232:	4620      	mov	r0, r4
 8006234:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006238:	f000 b818 	b.w	800626c <_kill_r>
 800623c:	2b01      	cmp	r3, #1
 800623e:	d00a      	beq.n	8006256 <_raise_r+0x4c>
 8006240:	1c59      	adds	r1, r3, #1
 8006242:	d103      	bne.n	800624c <_raise_r+0x42>
 8006244:	2316      	movs	r3, #22
 8006246:	6003      	str	r3, [r0, #0]
 8006248:	2001      	movs	r0, #1
 800624a:	e7e7      	b.n	800621c <_raise_r+0x12>
 800624c:	2400      	movs	r4, #0
 800624e:	4628      	mov	r0, r5
 8006250:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006254:	4798      	blx	r3
 8006256:	2000      	movs	r0, #0
 8006258:	e7e0      	b.n	800621c <_raise_r+0x12>
	...

0800625c <raise>:
 800625c:	4b02      	ldr	r3, [pc, #8]	; (8006268 <raise+0xc>)
 800625e:	4601      	mov	r1, r0
 8006260:	6818      	ldr	r0, [r3, #0]
 8006262:	f7ff bfd2 	b.w	800620a <_raise_r>
 8006266:	bf00      	nop
 8006268:	20000068 	.word	0x20000068

0800626c <_kill_r>:
 800626c:	b538      	push	{r3, r4, r5, lr}
 800626e:	2300      	movs	r3, #0
 8006270:	4d06      	ldr	r5, [pc, #24]	; (800628c <_kill_r+0x20>)
 8006272:	4604      	mov	r4, r0
 8006274:	4608      	mov	r0, r1
 8006276:	4611      	mov	r1, r2
 8006278:	602b      	str	r3, [r5, #0]
 800627a:	f7fb ffb9 	bl	80021f0 <_kill>
 800627e:	1c43      	adds	r3, r0, #1
 8006280:	d102      	bne.n	8006288 <_kill_r+0x1c>
 8006282:	682b      	ldr	r3, [r5, #0]
 8006284:	b103      	cbz	r3, 8006288 <_kill_r+0x1c>
 8006286:	6023      	str	r3, [r4, #0]
 8006288:	bd38      	pop	{r3, r4, r5, pc}
 800628a:	bf00      	nop
 800628c:	2000045c 	.word	0x2000045c

08006290 <_getpid_r>:
 8006290:	f7fb bfa7 	b.w	80021e2 <_getpid>

08006294 <asinf>:
 8006294:	b538      	push	{r3, r4, r5, lr}
 8006296:	4604      	mov	r4, r0
 8006298:	f000 f87a 	bl	8006390 <__ieee754_asinf>
 800629c:	4621      	mov	r1, r4
 800629e:	4605      	mov	r5, r0
 80062a0:	4620      	mov	r0, r4
 80062a2:	f7fa fec5 	bl	8001030 <__aeabi_fcmpun>
 80062a6:	b980      	cbnz	r0, 80062ca <asinf+0x36>
 80062a8:	4620      	mov	r0, r4
 80062aa:	f000 f862 	bl	8006372 <fabsf>
 80062ae:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80062b2:	f7fa feb3 	bl	800101c <__aeabi_fcmpgt>
 80062b6:	b140      	cbz	r0, 80062ca <asinf+0x36>
 80062b8:	f7fe f992 	bl	80045e0 <__errno>
 80062bc:	2321      	movs	r3, #33	; 0x21
 80062be:	6003      	str	r3, [r0, #0]
 80062c0:	4803      	ldr	r0, [pc, #12]	; (80062d0 <asinf+0x3c>)
 80062c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80062c6:	f000 b85f 	b.w	8006388 <nanf>
 80062ca:	4628      	mov	r0, r5
 80062cc:	bd38      	pop	{r3, r4, r5, pc}
 80062ce:	bf00      	nop
 80062d0:	08007522 	.word	0x08007522

080062d4 <atan2f>:
 80062d4:	f000 b99e 	b.w	8006614 <__ieee754_atan2f>

080062d8 <powf>:
 80062d8:	b570      	push	{r4, r5, r6, lr}
 80062da:	460c      	mov	r4, r1
 80062dc:	4606      	mov	r6, r0
 80062de:	f000 fa1f 	bl	8006720 <__ieee754_powf>
 80062e2:	4621      	mov	r1, r4
 80062e4:	4605      	mov	r5, r0
 80062e6:	4620      	mov	r0, r4
 80062e8:	f7fa fea2 	bl	8001030 <__aeabi_fcmpun>
 80062ec:	bb68      	cbnz	r0, 800634a <powf+0x72>
 80062ee:	2100      	movs	r1, #0
 80062f0:	4630      	mov	r0, r6
 80062f2:	f7fa fe6b 	bl	8000fcc <__aeabi_fcmpeq>
 80062f6:	b190      	cbz	r0, 800631e <powf+0x46>
 80062f8:	2100      	movs	r1, #0
 80062fa:	4620      	mov	r0, r4
 80062fc:	f7fa fe66 	bl	8000fcc <__aeabi_fcmpeq>
 8006300:	2800      	cmp	r0, #0
 8006302:	d133      	bne.n	800636c <powf+0x94>
 8006304:	4620      	mov	r0, r4
 8006306:	f000 f837 	bl	8006378 <finitef>
 800630a:	b1f0      	cbz	r0, 800634a <powf+0x72>
 800630c:	2100      	movs	r1, #0
 800630e:	4620      	mov	r0, r4
 8006310:	f7fa fe66 	bl	8000fe0 <__aeabi_fcmplt>
 8006314:	b1c8      	cbz	r0, 800634a <powf+0x72>
 8006316:	f7fe f963 	bl	80045e0 <__errno>
 800631a:	2322      	movs	r3, #34	; 0x22
 800631c:	e014      	b.n	8006348 <powf+0x70>
 800631e:	4628      	mov	r0, r5
 8006320:	f000 f82a 	bl	8006378 <finitef>
 8006324:	b998      	cbnz	r0, 800634e <powf+0x76>
 8006326:	4630      	mov	r0, r6
 8006328:	f000 f826 	bl	8006378 <finitef>
 800632c:	b178      	cbz	r0, 800634e <powf+0x76>
 800632e:	4620      	mov	r0, r4
 8006330:	f000 f822 	bl	8006378 <finitef>
 8006334:	b158      	cbz	r0, 800634e <powf+0x76>
 8006336:	4629      	mov	r1, r5
 8006338:	4628      	mov	r0, r5
 800633a:	f7fa fe79 	bl	8001030 <__aeabi_fcmpun>
 800633e:	2800      	cmp	r0, #0
 8006340:	d0e9      	beq.n	8006316 <powf+0x3e>
 8006342:	f7fe f94d 	bl	80045e0 <__errno>
 8006346:	2321      	movs	r3, #33	; 0x21
 8006348:	6003      	str	r3, [r0, #0]
 800634a:	4628      	mov	r0, r5
 800634c:	bd70      	pop	{r4, r5, r6, pc}
 800634e:	2100      	movs	r1, #0
 8006350:	4628      	mov	r0, r5
 8006352:	f7fa fe3b 	bl	8000fcc <__aeabi_fcmpeq>
 8006356:	2800      	cmp	r0, #0
 8006358:	d0f7      	beq.n	800634a <powf+0x72>
 800635a:	4630      	mov	r0, r6
 800635c:	f000 f80c 	bl	8006378 <finitef>
 8006360:	2800      	cmp	r0, #0
 8006362:	d0f2      	beq.n	800634a <powf+0x72>
 8006364:	4620      	mov	r0, r4
 8006366:	f000 f807 	bl	8006378 <finitef>
 800636a:	e7d3      	b.n	8006314 <powf+0x3c>
 800636c:	f04f 557e 	mov.w	r5, #1065353216	; 0x3f800000
 8006370:	e7eb      	b.n	800634a <powf+0x72>

08006372 <fabsf>:
 8006372:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8006376:	4770      	bx	lr

08006378 <finitef>:
 8006378:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800637c:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8006380:	bfac      	ite	ge
 8006382:	2000      	movge	r0, #0
 8006384:	2001      	movlt	r0, #1
 8006386:	4770      	bx	lr

08006388 <nanf>:
 8006388:	4800      	ldr	r0, [pc, #0]	; (800638c <nanf+0x4>)
 800638a:	4770      	bx	lr
 800638c:	7fc00000 	.word	0x7fc00000

08006390 <__ieee754_asinf>:
 8006390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006394:	f020 4800 	bic.w	r8, r0, #2147483648	; 0x80000000
 8006398:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800639c:	4604      	mov	r4, r0
 800639e:	4605      	mov	r5, r0
 80063a0:	d10c      	bne.n	80063bc <__ieee754_asinf+0x2c>
 80063a2:	498c      	ldr	r1, [pc, #560]	; (80065d4 <__ieee754_asinf+0x244>)
 80063a4:	f7fa fc7e 	bl	8000ca4 <__aeabi_fmul>
 80063a8:	498b      	ldr	r1, [pc, #556]	; (80065d8 <__ieee754_asinf+0x248>)
 80063aa:	4605      	mov	r5, r0
 80063ac:	4620      	mov	r0, r4
 80063ae:	f7fa fc79 	bl	8000ca4 <__aeabi_fmul>
 80063b2:	4601      	mov	r1, r0
 80063b4:	4628      	mov	r0, r5
 80063b6:	f7fa fb6d 	bl	8000a94 <__addsf3>
 80063ba:	e006      	b.n	80063ca <__ieee754_asinf+0x3a>
 80063bc:	dd09      	ble.n	80063d2 <__ieee754_asinf+0x42>
 80063be:	4601      	mov	r1, r0
 80063c0:	f7fa fb66 	bl	8000a90 <__aeabi_fsub>
 80063c4:	4601      	mov	r1, r0
 80063c6:	f7fa fd21 	bl	8000e0c <__aeabi_fdiv>
 80063ca:	4604      	mov	r4, r0
 80063cc:	4620      	mov	r0, r4
 80063ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063d2:	f1b8 5f7c 	cmp.w	r8, #1056964608	; 0x3f000000
 80063d6:	da0b      	bge.n	80063f0 <__ieee754_asinf+0x60>
 80063d8:	f1b8 5f48 	cmp.w	r8, #838860800	; 0x32000000
 80063dc:	da73      	bge.n	80064c6 <__ieee754_asinf+0x136>
 80063de:	497f      	ldr	r1, [pc, #508]	; (80065dc <__ieee754_asinf+0x24c>)
 80063e0:	f7fa fb58 	bl	8000a94 <__addsf3>
 80063e4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80063e8:	f7fa fe18 	bl	800101c <__aeabi_fcmpgt>
 80063ec:	2800      	cmp	r0, #0
 80063ee:	d1ed      	bne.n	80063cc <__ieee754_asinf+0x3c>
 80063f0:	4620      	mov	r0, r4
 80063f2:	f7ff ffbe 	bl	8006372 <fabsf>
 80063f6:	4601      	mov	r1, r0
 80063f8:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80063fc:	f7fa fb48 	bl	8000a90 <__aeabi_fsub>
 8006400:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8006404:	f7fa fc4e 	bl	8000ca4 <__aeabi_fmul>
 8006408:	4606      	mov	r6, r0
 800640a:	4975      	ldr	r1, [pc, #468]	; (80065e0 <__ieee754_asinf+0x250>)
 800640c:	f7fa fc4a 	bl	8000ca4 <__aeabi_fmul>
 8006410:	4974      	ldr	r1, [pc, #464]	; (80065e4 <__ieee754_asinf+0x254>)
 8006412:	f7fa fb3f 	bl	8000a94 <__addsf3>
 8006416:	4631      	mov	r1, r6
 8006418:	f7fa fc44 	bl	8000ca4 <__aeabi_fmul>
 800641c:	4972      	ldr	r1, [pc, #456]	; (80065e8 <__ieee754_asinf+0x258>)
 800641e:	f7fa fb37 	bl	8000a90 <__aeabi_fsub>
 8006422:	4631      	mov	r1, r6
 8006424:	f7fa fc3e 	bl	8000ca4 <__aeabi_fmul>
 8006428:	4970      	ldr	r1, [pc, #448]	; (80065ec <__ieee754_asinf+0x25c>)
 800642a:	f7fa fb33 	bl	8000a94 <__addsf3>
 800642e:	4631      	mov	r1, r6
 8006430:	f7fa fc38 	bl	8000ca4 <__aeabi_fmul>
 8006434:	496e      	ldr	r1, [pc, #440]	; (80065f0 <__ieee754_asinf+0x260>)
 8006436:	f7fa fb2b 	bl	8000a90 <__aeabi_fsub>
 800643a:	4631      	mov	r1, r6
 800643c:	f7fa fc32 	bl	8000ca4 <__aeabi_fmul>
 8006440:	496c      	ldr	r1, [pc, #432]	; (80065f4 <__ieee754_asinf+0x264>)
 8006442:	f7fa fb27 	bl	8000a94 <__addsf3>
 8006446:	4631      	mov	r1, r6
 8006448:	f7fa fc2c 	bl	8000ca4 <__aeabi_fmul>
 800644c:	496a      	ldr	r1, [pc, #424]	; (80065f8 <__ieee754_asinf+0x268>)
 800644e:	4681      	mov	r9, r0
 8006450:	4630      	mov	r0, r6
 8006452:	f7fa fc27 	bl	8000ca4 <__aeabi_fmul>
 8006456:	4969      	ldr	r1, [pc, #420]	; (80065fc <__ieee754_asinf+0x26c>)
 8006458:	f7fa fb1a 	bl	8000a90 <__aeabi_fsub>
 800645c:	4631      	mov	r1, r6
 800645e:	f7fa fc21 	bl	8000ca4 <__aeabi_fmul>
 8006462:	4967      	ldr	r1, [pc, #412]	; (8006600 <__ieee754_asinf+0x270>)
 8006464:	f7fa fb16 	bl	8000a94 <__addsf3>
 8006468:	4631      	mov	r1, r6
 800646a:	f7fa fc1b 	bl	8000ca4 <__aeabi_fmul>
 800646e:	4965      	ldr	r1, [pc, #404]	; (8006604 <__ieee754_asinf+0x274>)
 8006470:	f7fa fb0e 	bl	8000a90 <__aeabi_fsub>
 8006474:	4631      	mov	r1, r6
 8006476:	f7fa fc15 	bl	8000ca4 <__aeabi_fmul>
 800647a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800647e:	f7fa fb09 	bl	8000a94 <__addsf3>
 8006482:	4682      	mov	sl, r0
 8006484:	4630      	mov	r0, r6
 8006486:	f000 fe27 	bl	80070d8 <__ieee754_sqrtf>
 800648a:	4b5f      	ldr	r3, [pc, #380]	; (8006608 <__ieee754_asinf+0x278>)
 800648c:	4607      	mov	r7, r0
 800648e:	4598      	cmp	r8, r3
 8006490:	dd63      	ble.n	800655a <__ieee754_asinf+0x1ca>
 8006492:	4651      	mov	r1, sl
 8006494:	4648      	mov	r0, r9
 8006496:	f7fa fcb9 	bl	8000e0c <__aeabi_fdiv>
 800649a:	4639      	mov	r1, r7
 800649c:	f7fa fc02 	bl	8000ca4 <__aeabi_fmul>
 80064a0:	4639      	mov	r1, r7
 80064a2:	f7fa faf7 	bl	8000a94 <__addsf3>
 80064a6:	4601      	mov	r1, r0
 80064a8:	f7fa faf4 	bl	8000a94 <__addsf3>
 80064ac:	4957      	ldr	r1, [pc, #348]	; (800660c <__ieee754_asinf+0x27c>)
 80064ae:	f7fa faf1 	bl	8000a94 <__addsf3>
 80064b2:	4601      	mov	r1, r0
 80064b4:	4847      	ldr	r0, [pc, #284]	; (80065d4 <__ieee754_asinf+0x244>)
 80064b6:	f7fa faeb 	bl	8000a90 <__aeabi_fsub>
 80064ba:	2d00      	cmp	r5, #0
 80064bc:	4604      	mov	r4, r0
 80064be:	bfd8      	it	le
 80064c0:	f100 4400 	addle.w	r4, r0, #2147483648	; 0x80000000
 80064c4:	e782      	b.n	80063cc <__ieee754_asinf+0x3c>
 80064c6:	4601      	mov	r1, r0
 80064c8:	f7fa fbec 	bl	8000ca4 <__aeabi_fmul>
 80064cc:	4605      	mov	r5, r0
 80064ce:	4944      	ldr	r1, [pc, #272]	; (80065e0 <__ieee754_asinf+0x250>)
 80064d0:	f7fa fbe8 	bl	8000ca4 <__aeabi_fmul>
 80064d4:	4943      	ldr	r1, [pc, #268]	; (80065e4 <__ieee754_asinf+0x254>)
 80064d6:	f7fa fadd 	bl	8000a94 <__addsf3>
 80064da:	4629      	mov	r1, r5
 80064dc:	f7fa fbe2 	bl	8000ca4 <__aeabi_fmul>
 80064e0:	4941      	ldr	r1, [pc, #260]	; (80065e8 <__ieee754_asinf+0x258>)
 80064e2:	f7fa fad5 	bl	8000a90 <__aeabi_fsub>
 80064e6:	4629      	mov	r1, r5
 80064e8:	f7fa fbdc 	bl	8000ca4 <__aeabi_fmul>
 80064ec:	493f      	ldr	r1, [pc, #252]	; (80065ec <__ieee754_asinf+0x25c>)
 80064ee:	f7fa fad1 	bl	8000a94 <__addsf3>
 80064f2:	4629      	mov	r1, r5
 80064f4:	f7fa fbd6 	bl	8000ca4 <__aeabi_fmul>
 80064f8:	493d      	ldr	r1, [pc, #244]	; (80065f0 <__ieee754_asinf+0x260>)
 80064fa:	f7fa fac9 	bl	8000a90 <__aeabi_fsub>
 80064fe:	4629      	mov	r1, r5
 8006500:	f7fa fbd0 	bl	8000ca4 <__aeabi_fmul>
 8006504:	493b      	ldr	r1, [pc, #236]	; (80065f4 <__ieee754_asinf+0x264>)
 8006506:	f7fa fac5 	bl	8000a94 <__addsf3>
 800650a:	4629      	mov	r1, r5
 800650c:	f7fa fbca 	bl	8000ca4 <__aeabi_fmul>
 8006510:	4939      	ldr	r1, [pc, #228]	; (80065f8 <__ieee754_asinf+0x268>)
 8006512:	4606      	mov	r6, r0
 8006514:	4628      	mov	r0, r5
 8006516:	f7fa fbc5 	bl	8000ca4 <__aeabi_fmul>
 800651a:	4938      	ldr	r1, [pc, #224]	; (80065fc <__ieee754_asinf+0x26c>)
 800651c:	f7fa fab8 	bl	8000a90 <__aeabi_fsub>
 8006520:	4629      	mov	r1, r5
 8006522:	f7fa fbbf 	bl	8000ca4 <__aeabi_fmul>
 8006526:	4936      	ldr	r1, [pc, #216]	; (8006600 <__ieee754_asinf+0x270>)
 8006528:	f7fa fab4 	bl	8000a94 <__addsf3>
 800652c:	4629      	mov	r1, r5
 800652e:	f7fa fbb9 	bl	8000ca4 <__aeabi_fmul>
 8006532:	4934      	ldr	r1, [pc, #208]	; (8006604 <__ieee754_asinf+0x274>)
 8006534:	f7fa faac 	bl	8000a90 <__aeabi_fsub>
 8006538:	4629      	mov	r1, r5
 800653a:	f7fa fbb3 	bl	8000ca4 <__aeabi_fmul>
 800653e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8006542:	f7fa faa7 	bl	8000a94 <__addsf3>
 8006546:	4601      	mov	r1, r0
 8006548:	4630      	mov	r0, r6
 800654a:	f7fa fc5f 	bl	8000e0c <__aeabi_fdiv>
 800654e:	4621      	mov	r1, r4
 8006550:	f7fa fba8 	bl	8000ca4 <__aeabi_fmul>
 8006554:	4601      	mov	r1, r0
 8006556:	4620      	mov	r0, r4
 8006558:	e72d      	b.n	80063b6 <__ieee754_asinf+0x26>
 800655a:	4601      	mov	r1, r0
 800655c:	f420 687f 	bic.w	r8, r0, #4080	; 0xff0
 8006560:	f7fa fa98 	bl	8000a94 <__addsf3>
 8006564:	4651      	mov	r1, sl
 8006566:	4604      	mov	r4, r0
 8006568:	4648      	mov	r0, r9
 800656a:	f7fa fc4f 	bl	8000e0c <__aeabi_fdiv>
 800656e:	4601      	mov	r1, r0
 8006570:	4620      	mov	r0, r4
 8006572:	f7fa fb97 	bl	8000ca4 <__aeabi_fmul>
 8006576:	f028 080f 	bic.w	r8, r8, #15
 800657a:	4681      	mov	r9, r0
 800657c:	4641      	mov	r1, r8
 800657e:	4640      	mov	r0, r8
 8006580:	f7fa fb90 	bl	8000ca4 <__aeabi_fmul>
 8006584:	4601      	mov	r1, r0
 8006586:	4630      	mov	r0, r6
 8006588:	f7fa fa82 	bl	8000a90 <__aeabi_fsub>
 800658c:	4641      	mov	r1, r8
 800658e:	4604      	mov	r4, r0
 8006590:	4638      	mov	r0, r7
 8006592:	f7fa fa7f 	bl	8000a94 <__addsf3>
 8006596:	4601      	mov	r1, r0
 8006598:	4620      	mov	r0, r4
 800659a:	f7fa fc37 	bl	8000e0c <__aeabi_fdiv>
 800659e:	4601      	mov	r1, r0
 80065a0:	f7fa fa78 	bl	8000a94 <__addsf3>
 80065a4:	4601      	mov	r1, r0
 80065a6:	480c      	ldr	r0, [pc, #48]	; (80065d8 <__ieee754_asinf+0x248>)
 80065a8:	f7fa fa72 	bl	8000a90 <__aeabi_fsub>
 80065ac:	4601      	mov	r1, r0
 80065ae:	4648      	mov	r0, r9
 80065b0:	f7fa fa6e 	bl	8000a90 <__aeabi_fsub>
 80065b4:	4641      	mov	r1, r8
 80065b6:	4604      	mov	r4, r0
 80065b8:	4640      	mov	r0, r8
 80065ba:	f7fa fa6b 	bl	8000a94 <__addsf3>
 80065be:	4601      	mov	r1, r0
 80065c0:	4813      	ldr	r0, [pc, #76]	; (8006610 <__ieee754_asinf+0x280>)
 80065c2:	f7fa fa65 	bl	8000a90 <__aeabi_fsub>
 80065c6:	4601      	mov	r1, r0
 80065c8:	4620      	mov	r0, r4
 80065ca:	f7fa fa61 	bl	8000a90 <__aeabi_fsub>
 80065ce:	4601      	mov	r1, r0
 80065d0:	480f      	ldr	r0, [pc, #60]	; (8006610 <__ieee754_asinf+0x280>)
 80065d2:	e770      	b.n	80064b6 <__ieee754_asinf+0x126>
 80065d4:	3fc90fdb 	.word	0x3fc90fdb
 80065d8:	b33bbd2e 	.word	0xb33bbd2e
 80065dc:	7149f2ca 	.word	0x7149f2ca
 80065e0:	3811ef08 	.word	0x3811ef08
 80065e4:	3a4f7f04 	.word	0x3a4f7f04
 80065e8:	3d241146 	.word	0x3d241146
 80065ec:	3e4e0aa8 	.word	0x3e4e0aa8
 80065f0:	3ea6b090 	.word	0x3ea6b090
 80065f4:	3e2aaaab 	.word	0x3e2aaaab
 80065f8:	3d9dc62e 	.word	0x3d9dc62e
 80065fc:	3f303361 	.word	0x3f303361
 8006600:	4001572d 	.word	0x4001572d
 8006604:	4019d139 	.word	0x4019d139
 8006608:	3f799999 	.word	0x3f799999
 800660c:	333bbd2e 	.word	0x333bbd2e
 8006610:	3f490fdb 	.word	0x3f490fdb

08006614 <__ieee754_atan2f>:
 8006614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006616:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800661a:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800661e:	4603      	mov	r3, r0
 8006620:	dc05      	bgt.n	800662e <__ieee754_atan2f+0x1a>
 8006622:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8006626:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800662a:	4607      	mov	r7, r0
 800662c:	dd04      	ble.n	8006638 <__ieee754_atan2f+0x24>
 800662e:	4618      	mov	r0, r3
 8006630:	f7fa fa30 	bl	8000a94 <__addsf3>
 8006634:	4603      	mov	r3, r0
 8006636:	e011      	b.n	800665c <__ieee754_atan2f+0x48>
 8006638:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 800663c:	d103      	bne.n	8006646 <__ieee754_atan2f+0x32>
 800663e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006642:	f000 bbd3 	b.w	8006dec <atanf>
 8006646:	178c      	asrs	r4, r1, #30
 8006648:	f004 0402 	and.w	r4, r4, #2
 800664c:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8006650:	b932      	cbnz	r2, 8006660 <__ieee754_atan2f+0x4c>
 8006652:	2c02      	cmp	r4, #2
 8006654:	d04c      	beq.n	80066f0 <__ieee754_atan2f+0xdc>
 8006656:	2c03      	cmp	r4, #3
 8006658:	d100      	bne.n	800665c <__ieee754_atan2f+0x48>
 800665a:	4b29      	ldr	r3, [pc, #164]	; (8006700 <__ieee754_atan2f+0xec>)
 800665c:	4618      	mov	r0, r3
 800665e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006660:	b91e      	cbnz	r6, 800666a <__ieee754_atan2f+0x56>
 8006662:	2f00      	cmp	r7, #0
 8006664:	da4a      	bge.n	80066fc <__ieee754_atan2f+0xe8>
 8006666:	4b27      	ldr	r3, [pc, #156]	; (8006704 <__ieee754_atan2f+0xf0>)
 8006668:	e7f8      	b.n	800665c <__ieee754_atan2f+0x48>
 800666a:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800666e:	d10e      	bne.n	800668e <__ieee754_atan2f+0x7a>
 8006670:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8006674:	f104 34ff 	add.w	r4, r4, #4294967295
 8006678:	d105      	bne.n	8006686 <__ieee754_atan2f+0x72>
 800667a:	2c02      	cmp	r4, #2
 800667c:	d83a      	bhi.n	80066f4 <__ieee754_atan2f+0xe0>
 800667e:	4b22      	ldr	r3, [pc, #136]	; (8006708 <__ieee754_atan2f+0xf4>)
 8006680:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8006684:	e7ea      	b.n	800665c <__ieee754_atan2f+0x48>
 8006686:	2c02      	cmp	r4, #2
 8006688:	d836      	bhi.n	80066f8 <__ieee754_atan2f+0xe4>
 800668a:	4b20      	ldr	r3, [pc, #128]	; (800670c <__ieee754_atan2f+0xf8>)
 800668c:	e7f8      	b.n	8006680 <__ieee754_atan2f+0x6c>
 800668e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8006692:	d0e6      	beq.n	8006662 <__ieee754_atan2f+0x4e>
 8006694:	1b92      	subs	r2, r2, r6
 8006696:	f1b2 5ff4 	cmp.w	r2, #511705088	; 0x1e800000
 800669a:	ea4f 50e2 	mov.w	r0, r2, asr #23
 800669e:	da17      	bge.n	80066d0 <__ieee754_atan2f+0xbc>
 80066a0:	2900      	cmp	r1, #0
 80066a2:	da01      	bge.n	80066a8 <__ieee754_atan2f+0x94>
 80066a4:	303c      	adds	r0, #60	; 0x3c
 80066a6:	db15      	blt.n	80066d4 <__ieee754_atan2f+0xc0>
 80066a8:	4618      	mov	r0, r3
 80066aa:	f7fa fbaf 	bl	8000e0c <__aeabi_fdiv>
 80066ae:	f7ff fe60 	bl	8006372 <fabsf>
 80066b2:	f000 fb9b 	bl	8006dec <atanf>
 80066b6:	4603      	mov	r3, r0
 80066b8:	2c01      	cmp	r4, #1
 80066ba:	d00d      	beq.n	80066d8 <__ieee754_atan2f+0xc4>
 80066bc:	2c02      	cmp	r4, #2
 80066be:	d00e      	beq.n	80066de <__ieee754_atan2f+0xca>
 80066c0:	2c00      	cmp	r4, #0
 80066c2:	d0cb      	beq.n	800665c <__ieee754_atan2f+0x48>
 80066c4:	4912      	ldr	r1, [pc, #72]	; (8006710 <__ieee754_atan2f+0xfc>)
 80066c6:	4618      	mov	r0, r3
 80066c8:	f7fa f9e4 	bl	8000a94 <__addsf3>
 80066cc:	4911      	ldr	r1, [pc, #68]	; (8006714 <__ieee754_atan2f+0x100>)
 80066ce:	e00c      	b.n	80066ea <__ieee754_atan2f+0xd6>
 80066d0:	4b11      	ldr	r3, [pc, #68]	; (8006718 <__ieee754_atan2f+0x104>)
 80066d2:	e7f1      	b.n	80066b8 <__ieee754_atan2f+0xa4>
 80066d4:	2300      	movs	r3, #0
 80066d6:	e7ef      	b.n	80066b8 <__ieee754_atan2f+0xa4>
 80066d8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80066dc:	e7be      	b.n	800665c <__ieee754_atan2f+0x48>
 80066de:	490c      	ldr	r1, [pc, #48]	; (8006710 <__ieee754_atan2f+0xfc>)
 80066e0:	4618      	mov	r0, r3
 80066e2:	f7fa f9d7 	bl	8000a94 <__addsf3>
 80066e6:	4601      	mov	r1, r0
 80066e8:	480a      	ldr	r0, [pc, #40]	; (8006714 <__ieee754_atan2f+0x100>)
 80066ea:	f7fa f9d1 	bl	8000a90 <__aeabi_fsub>
 80066ee:	e7a1      	b.n	8006634 <__ieee754_atan2f+0x20>
 80066f0:	4b08      	ldr	r3, [pc, #32]	; (8006714 <__ieee754_atan2f+0x100>)
 80066f2:	e7b3      	b.n	800665c <__ieee754_atan2f+0x48>
 80066f4:	4b09      	ldr	r3, [pc, #36]	; (800671c <__ieee754_atan2f+0x108>)
 80066f6:	e7b1      	b.n	800665c <__ieee754_atan2f+0x48>
 80066f8:	2300      	movs	r3, #0
 80066fa:	e7af      	b.n	800665c <__ieee754_atan2f+0x48>
 80066fc:	4b06      	ldr	r3, [pc, #24]	; (8006718 <__ieee754_atan2f+0x104>)
 80066fe:	e7ad      	b.n	800665c <__ieee754_atan2f+0x48>
 8006700:	c0490fdb 	.word	0xc0490fdb
 8006704:	bfc90fdb 	.word	0xbfc90fdb
 8006708:	08007624 	.word	0x08007624
 800670c:	08007630 	.word	0x08007630
 8006710:	33bbbd2e 	.word	0x33bbbd2e
 8006714:	40490fdb 	.word	0x40490fdb
 8006718:	3fc90fdb 	.word	0x3fc90fdb
 800671c:	3f490fdb 	.word	0x3f490fdb

08006720 <__ieee754_powf>:
 8006720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006724:	f031 4a00 	bics.w	sl, r1, #2147483648	; 0x80000000
 8006728:	4681      	mov	r9, r0
 800672a:	460f      	mov	r7, r1
 800672c:	4680      	mov	r8, r0
 800672e:	460c      	mov	r4, r1
 8006730:	b087      	sub	sp, #28
 8006732:	d10d      	bne.n	8006750 <__ieee754_powf+0x30>
 8006734:	f480 0880 	eor.w	r8, r0, #4194304	; 0x400000
 8006738:	ea4f 0848 	mov.w	r8, r8, lsl #1
 800673c:	f518 0f00 	cmn.w	r8, #8388608	; 0x800000
 8006740:	f240 8336 	bls.w	8006db0 <__ieee754_powf+0x690>
 8006744:	4639      	mov	r1, r7
 8006746:	4648      	mov	r0, r9
 8006748:	f7fa f9a4 	bl	8000a94 <__addsf3>
 800674c:	4601      	mov	r1, r0
 800674e:	e040      	b.n	80067d2 <__ieee754_powf+0xb2>
 8006750:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 8006754:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8006758:	dcf4      	bgt.n	8006744 <__ieee754_powf+0x24>
 800675a:	f1ba 4fff 	cmp.w	sl, #2139095040	; 0x7f800000
 800675e:	dd08      	ble.n	8006772 <__ieee754_powf+0x52>
 8006760:	f1b0 5f7e 	cmp.w	r0, #1065353216	; 0x3f800000
 8006764:	d1ee      	bne.n	8006744 <__ieee754_powf+0x24>
 8006766:	f481 0480 	eor.w	r4, r1, #4194304	; 0x400000
 800676a:	0064      	lsls	r4, r4, #1
 800676c:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8006770:	e7e6      	b.n	8006740 <__ieee754_powf+0x20>
 8006772:	2800      	cmp	r0, #0
 8006774:	da20      	bge.n	80067b8 <__ieee754_powf+0x98>
 8006776:	f1ba 4f97 	cmp.w	sl, #1266679808	; 0x4b800000
 800677a:	da2e      	bge.n	80067da <__ieee754_powf+0xba>
 800677c:	f1ba 5f7e 	cmp.w	sl, #1065353216	; 0x3f800000
 8006780:	f2c0 831b 	blt.w	8006dba <__ieee754_powf+0x69a>
 8006784:	ea4f 53ea 	mov.w	r3, sl, asr #23
 8006788:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800678c:	fa4a f503 	asr.w	r5, sl, r3
 8006790:	fa05 f303 	lsl.w	r3, r5, r3
 8006794:	4553      	cmp	r3, sl
 8006796:	f040 8310 	bne.w	8006dba <__ieee754_powf+0x69a>
 800679a:	f005 0501 	and.w	r5, r5, #1
 800679e:	f1c5 0502 	rsb	r5, r5, #2
 80067a2:	f1ba 5f7e 	cmp.w	sl, #1065353216	; 0x3f800000
 80067a6:	d120      	bne.n	80067ea <__ieee754_powf+0xca>
 80067a8:	2c00      	cmp	r4, #0
 80067aa:	4649      	mov	r1, r9
 80067ac:	da11      	bge.n	80067d2 <__ieee754_powf+0xb2>
 80067ae:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80067b2:	f7fa fb2b 	bl	8000e0c <__aeabi_fdiv>
 80067b6:	e7c9      	b.n	800674c <__ieee754_powf+0x2c>
 80067b8:	2500      	movs	r5, #0
 80067ba:	f1ba 4fff 	cmp.w	sl, #2139095040	; 0x7f800000
 80067be:	d1f0      	bne.n	80067a2 <__ieee754_powf+0x82>
 80067c0:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 80067c4:	f000 82f4 	beq.w	8006db0 <__ieee754_powf+0x690>
 80067c8:	dd09      	ble.n	80067de <__ieee754_powf+0xbe>
 80067ca:	2c00      	cmp	r4, #0
 80067cc:	f2c0 82f3 	blt.w	8006db6 <__ieee754_powf+0x696>
 80067d0:	4639      	mov	r1, r7
 80067d2:	4608      	mov	r0, r1
 80067d4:	b007      	add	sp, #28
 80067d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067da:	2502      	movs	r5, #2
 80067dc:	e7ed      	b.n	80067ba <__ieee754_powf+0x9a>
 80067de:	2c00      	cmp	r4, #0
 80067e0:	f280 82e9 	bge.w	8006db6 <__ieee754_powf+0x696>
 80067e4:	f107 4100 	add.w	r1, r7, #2147483648	; 0x80000000
 80067e8:	e7f3      	b.n	80067d2 <__ieee754_powf+0xb2>
 80067ea:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 80067ee:	d104      	bne.n	80067fa <__ieee754_powf+0xda>
 80067f0:	4649      	mov	r1, r9
 80067f2:	4648      	mov	r0, r9
 80067f4:	f7fa fa56 	bl	8000ca4 <__aeabi_fmul>
 80067f8:	e7a8      	b.n	800674c <__ieee754_powf+0x2c>
 80067fa:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 80067fe:	4648      	mov	r0, r9
 8006800:	d107      	bne.n	8006812 <__ieee754_powf+0xf2>
 8006802:	f1b8 0f00 	cmp.w	r8, #0
 8006806:	db04      	blt.n	8006812 <__ieee754_powf+0xf2>
 8006808:	b007      	add	sp, #28
 800680a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800680e:	f000 bc63 	b.w	80070d8 <__ieee754_sqrtf>
 8006812:	f7ff fdae 	bl	8006372 <fabsf>
 8006816:	4601      	mov	r1, r0
 8006818:	b126      	cbz	r6, 8006824 <__ieee754_powf+0x104>
 800681a:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 800681e:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8006822:	d117      	bne.n	8006854 <__ieee754_powf+0x134>
 8006824:	2c00      	cmp	r4, #0
 8006826:	da04      	bge.n	8006832 <__ieee754_powf+0x112>
 8006828:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800682c:	f7fa faee 	bl	8000e0c <__aeabi_fdiv>
 8006830:	4601      	mov	r1, r0
 8006832:	f1b8 0f00 	cmp.w	r8, #0
 8006836:	dacc      	bge.n	80067d2 <__ieee754_powf+0xb2>
 8006838:	f1a6 567e 	sub.w	r6, r6, #1065353216	; 0x3f800000
 800683c:	432e      	orrs	r6, r5
 800683e:	d104      	bne.n	800684a <__ieee754_powf+0x12a>
 8006840:	4608      	mov	r0, r1
 8006842:	f7fa f925 	bl	8000a90 <__aeabi_fsub>
 8006846:	4601      	mov	r1, r0
 8006848:	e7b3      	b.n	80067b2 <__ieee754_powf+0x92>
 800684a:	2d01      	cmp	r5, #1
 800684c:	d1c1      	bne.n	80067d2 <__ieee754_powf+0xb2>
 800684e:	f101 4000 	add.w	r0, r1, #2147483648	; 0x80000000
 8006852:	e77b      	b.n	800674c <__ieee754_powf+0x2c>
 8006854:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 8006858:	3b01      	subs	r3, #1
 800685a:	9302      	str	r3, [sp, #8]
 800685c:	432b      	orrs	r3, r5
 800685e:	d101      	bne.n	8006864 <__ieee754_powf+0x144>
 8006860:	4649      	mov	r1, r9
 8006862:	e7ed      	b.n	8006840 <__ieee754_powf+0x120>
 8006864:	f1ba 4f9a 	cmp.w	sl, #1291845632	; 0x4d000000
 8006868:	f340 809e 	ble.w	80069a8 <__ieee754_powf+0x288>
 800686c:	4b47      	ldr	r3, [pc, #284]	; (800698c <__ieee754_powf+0x26c>)
 800686e:	429e      	cmp	r6, r3
 8006870:	dc07      	bgt.n	8006882 <__ieee754_powf+0x162>
 8006872:	2c00      	cmp	r4, #0
 8006874:	da0a      	bge.n	800688c <__ieee754_powf+0x16c>
 8006876:	2000      	movs	r0, #0
 8006878:	b007      	add	sp, #28
 800687a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800687e:	f000 bc26 	b.w	80070ce <__math_oflowf>
 8006882:	4b43      	ldr	r3, [pc, #268]	; (8006990 <__ieee754_powf+0x270>)
 8006884:	429e      	cmp	r6, r3
 8006886:	dd07      	ble.n	8006898 <__ieee754_powf+0x178>
 8006888:	2c00      	cmp	r4, #0
 800688a:	dcf4      	bgt.n	8006876 <__ieee754_powf+0x156>
 800688c:	2000      	movs	r0, #0
 800688e:	b007      	add	sp, #28
 8006890:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006894:	f000 bc17 	b.w	80070c6 <__math_uflowf>
 8006898:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800689c:	f7fa f8f8 	bl	8000a90 <__aeabi_fsub>
 80068a0:	493c      	ldr	r1, [pc, #240]	; (8006994 <__ieee754_powf+0x274>)
 80068a2:	4606      	mov	r6, r0
 80068a4:	f7fa f9fe 	bl	8000ca4 <__aeabi_fmul>
 80068a8:	493b      	ldr	r1, [pc, #236]	; (8006998 <__ieee754_powf+0x278>)
 80068aa:	4680      	mov	r8, r0
 80068ac:	4630      	mov	r0, r6
 80068ae:	f7fa f9f9 	bl	8000ca4 <__aeabi_fmul>
 80068b2:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 80068b6:	4681      	mov	r9, r0
 80068b8:	4630      	mov	r0, r6
 80068ba:	f7fa f9f3 	bl	8000ca4 <__aeabi_fmul>
 80068be:	4601      	mov	r1, r0
 80068c0:	4836      	ldr	r0, [pc, #216]	; (800699c <__ieee754_powf+0x27c>)
 80068c2:	f7fa f8e5 	bl	8000a90 <__aeabi_fsub>
 80068c6:	4631      	mov	r1, r6
 80068c8:	f7fa f9ec 	bl	8000ca4 <__aeabi_fmul>
 80068cc:	4601      	mov	r1, r0
 80068ce:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 80068d2:	f7fa f8dd 	bl	8000a90 <__aeabi_fsub>
 80068d6:	4631      	mov	r1, r6
 80068d8:	4682      	mov	sl, r0
 80068da:	4630      	mov	r0, r6
 80068dc:	f7fa f9e2 	bl	8000ca4 <__aeabi_fmul>
 80068e0:	4601      	mov	r1, r0
 80068e2:	4650      	mov	r0, sl
 80068e4:	f7fa f9de 	bl	8000ca4 <__aeabi_fmul>
 80068e8:	492d      	ldr	r1, [pc, #180]	; (80069a0 <__ieee754_powf+0x280>)
 80068ea:	f7fa f9db 	bl	8000ca4 <__aeabi_fmul>
 80068ee:	4601      	mov	r1, r0
 80068f0:	4648      	mov	r0, r9
 80068f2:	f7fa f8cd 	bl	8000a90 <__aeabi_fsub>
 80068f6:	4601      	mov	r1, r0
 80068f8:	4606      	mov	r6, r0
 80068fa:	4640      	mov	r0, r8
 80068fc:	f7fa f8ca 	bl	8000a94 <__addsf3>
 8006900:	f420 697f 	bic.w	r9, r0, #4080	; 0xff0
 8006904:	f029 090f 	bic.w	r9, r9, #15
 8006908:	4641      	mov	r1, r8
 800690a:	4648      	mov	r0, r9
 800690c:	f7fa f8c0 	bl	8000a90 <__aeabi_fsub>
 8006910:	4601      	mov	r1, r0
 8006912:	4630      	mov	r0, r6
 8006914:	f7fa f8bc 	bl	8000a90 <__aeabi_fsub>
 8006918:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 800691c:	9b02      	ldr	r3, [sp, #8]
 800691e:	3d01      	subs	r5, #1
 8006920:	f024 040f 	bic.w	r4, r4, #15
 8006924:	431d      	orrs	r5, r3
 8006926:	4606      	mov	r6, r0
 8006928:	4621      	mov	r1, r4
 800692a:	4638      	mov	r0, r7
 800692c:	bf14      	ite	ne
 800692e:	f04f 557e 	movne.w	r5, #1065353216	; 0x3f800000
 8006932:	4d1c      	ldreq	r5, [pc, #112]	; (80069a4 <__ieee754_powf+0x284>)
 8006934:	f7fa f8ac 	bl	8000a90 <__aeabi_fsub>
 8006938:	4649      	mov	r1, r9
 800693a:	f7fa f9b3 	bl	8000ca4 <__aeabi_fmul>
 800693e:	4639      	mov	r1, r7
 8006940:	4680      	mov	r8, r0
 8006942:	4630      	mov	r0, r6
 8006944:	f7fa f9ae 	bl	8000ca4 <__aeabi_fmul>
 8006948:	4601      	mov	r1, r0
 800694a:	4640      	mov	r0, r8
 800694c:	f7fa f8a2 	bl	8000a94 <__addsf3>
 8006950:	4621      	mov	r1, r4
 8006952:	4606      	mov	r6, r0
 8006954:	4648      	mov	r0, r9
 8006956:	f7fa f9a5 	bl	8000ca4 <__aeabi_fmul>
 800695a:	4601      	mov	r1, r0
 800695c:	4607      	mov	r7, r0
 800695e:	4681      	mov	r9, r0
 8006960:	4630      	mov	r0, r6
 8006962:	f7fa f897 	bl	8000a94 <__addsf3>
 8006966:	2800      	cmp	r0, #0
 8006968:	4682      	mov	sl, r0
 800696a:	4680      	mov	r8, r0
 800696c:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 8006970:	f340 8200 	ble.w	8006d74 <__ieee754_powf+0x654>
 8006974:	f1b4 4f86 	cmp.w	r4, #1124073472	; 0x43000000
 8006978:	f340 814e 	ble.w	8006c18 <__ieee754_powf+0x4f8>
 800697c:	2100      	movs	r1, #0
 800697e:	4628      	mov	r0, r5
 8006980:	f7fa fb2e 	bl	8000fe0 <__aeabi_fcmplt>
 8006984:	3800      	subs	r0, #0
 8006986:	bf18      	it	ne
 8006988:	2001      	movne	r0, #1
 800698a:	e775      	b.n	8006878 <__ieee754_powf+0x158>
 800698c:	3f7ffff3 	.word	0x3f7ffff3
 8006990:	3f800007 	.word	0x3f800007
 8006994:	3fb8aa00 	.word	0x3fb8aa00
 8006998:	36eca570 	.word	0x36eca570
 800699c:	3eaaaaab 	.word	0x3eaaaaab
 80069a0:	3fb8aa3b 	.word	0x3fb8aa3b
 80069a4:	bf800000 	.word	0xbf800000
 80069a8:	f018 4fff 	tst.w	r8, #2139095040	; 0x7f800000
 80069ac:	f040 8111 	bne.w	8006bd2 <__ieee754_powf+0x4b2>
 80069b0:	f04f 4197 	mov.w	r1, #1266679808	; 0x4b800000
 80069b4:	f7fa f976 	bl	8000ca4 <__aeabi_fmul>
 80069b8:	f06f 0217 	mvn.w	r2, #23
 80069bc:	4606      	mov	r6, r0
 80069be:	15f3      	asrs	r3, r6, #23
 80069c0:	3b7f      	subs	r3, #127	; 0x7f
 80069c2:	4413      	add	r3, r2
 80069c4:	4a85      	ldr	r2, [pc, #532]	; (8006bdc <__ieee754_powf+0x4bc>)
 80069c6:	9301      	str	r3, [sp, #4]
 80069c8:	f3c6 0316 	ubfx	r3, r6, #0, #23
 80069cc:	4293      	cmp	r3, r2
 80069ce:	f043 567e 	orr.w	r6, r3, #1065353216	; 0x3f800000
 80069d2:	dd08      	ble.n	80069e6 <__ieee754_powf+0x2c6>
 80069d4:	4a82      	ldr	r2, [pc, #520]	; (8006be0 <__ieee754_powf+0x4c0>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	f340 80fd 	ble.w	8006bd6 <__ieee754_powf+0x4b6>
 80069dc:	9b01      	ldr	r3, [sp, #4]
 80069de:	f5a6 0600 	sub.w	r6, r6, #8388608	; 0x800000
 80069e2:	3301      	adds	r3, #1
 80069e4:	9301      	str	r3, [sp, #4]
 80069e6:	2300      	movs	r3, #0
 80069e8:	9300      	str	r3, [sp, #0]
 80069ea:	9900      	ldr	r1, [sp, #0]
 80069ec:	4a7d      	ldr	r2, [pc, #500]	; (8006be4 <__ieee754_powf+0x4c4>)
 80069ee:	4630      	mov	r0, r6
 80069f0:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80069f4:	9603      	str	r6, [sp, #12]
 80069f6:	4611      	mov	r1, r2
 80069f8:	9205      	str	r2, [sp, #20]
 80069fa:	f7fa f849 	bl	8000a90 <__aeabi_fsub>
 80069fe:	9a05      	ldr	r2, [sp, #20]
 8006a00:	9b03      	ldr	r3, [sp, #12]
 8006a02:	4683      	mov	fp, r0
 8006a04:	4619      	mov	r1, r3
 8006a06:	4610      	mov	r0, r2
 8006a08:	9203      	str	r2, [sp, #12]
 8006a0a:	9304      	str	r3, [sp, #16]
 8006a0c:	f7fa f842 	bl	8000a94 <__addsf3>
 8006a10:	4601      	mov	r1, r0
 8006a12:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8006a16:	f7fa f9f9 	bl	8000e0c <__aeabi_fdiv>
 8006a1a:	4682      	mov	sl, r0
 8006a1c:	4601      	mov	r1, r0
 8006a1e:	4658      	mov	r0, fp
 8006a20:	f7fa f940 	bl	8000ca4 <__aeabi_fmul>
 8006a24:	1076      	asrs	r6, r6, #1
 8006a26:	9b00      	ldr	r3, [sp, #0]
 8006a28:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
 8006a2c:	f420 697f 	bic.w	r9, r0, #4080	; 0xff0
 8006a30:	f506 2680 	add.w	r6, r6, #262144	; 0x40000
 8006a34:	f029 090f 	bic.w	r9, r9, #15
 8006a38:	eb06 5643 	add.w	r6, r6, r3, lsl #21
 8006a3c:	4680      	mov	r8, r0
 8006a3e:	4631      	mov	r1, r6
 8006a40:	4648      	mov	r0, r9
 8006a42:	f7fa f92f 	bl	8000ca4 <__aeabi_fmul>
 8006a46:	4601      	mov	r1, r0
 8006a48:	4658      	mov	r0, fp
 8006a4a:	f7fa f821 	bl	8000a90 <__aeabi_fsub>
 8006a4e:	9a03      	ldr	r2, [sp, #12]
 8006a50:	4683      	mov	fp, r0
 8006a52:	4611      	mov	r1, r2
 8006a54:	4630      	mov	r0, r6
 8006a56:	f7fa f81b 	bl	8000a90 <__aeabi_fsub>
 8006a5a:	9b04      	ldr	r3, [sp, #16]
 8006a5c:	4601      	mov	r1, r0
 8006a5e:	4618      	mov	r0, r3
 8006a60:	f7fa f816 	bl	8000a90 <__aeabi_fsub>
 8006a64:	4649      	mov	r1, r9
 8006a66:	f7fa f91d 	bl	8000ca4 <__aeabi_fmul>
 8006a6a:	4601      	mov	r1, r0
 8006a6c:	4658      	mov	r0, fp
 8006a6e:	f7fa f80f 	bl	8000a90 <__aeabi_fsub>
 8006a72:	4651      	mov	r1, sl
 8006a74:	f7fa f916 	bl	8000ca4 <__aeabi_fmul>
 8006a78:	4641      	mov	r1, r8
 8006a7a:	4682      	mov	sl, r0
 8006a7c:	4640      	mov	r0, r8
 8006a7e:	f7fa f911 	bl	8000ca4 <__aeabi_fmul>
 8006a82:	4606      	mov	r6, r0
 8006a84:	4958      	ldr	r1, [pc, #352]	; (8006be8 <__ieee754_powf+0x4c8>)
 8006a86:	f7fa f90d 	bl	8000ca4 <__aeabi_fmul>
 8006a8a:	4958      	ldr	r1, [pc, #352]	; (8006bec <__ieee754_powf+0x4cc>)
 8006a8c:	f7fa f802 	bl	8000a94 <__addsf3>
 8006a90:	4631      	mov	r1, r6
 8006a92:	f7fa f907 	bl	8000ca4 <__aeabi_fmul>
 8006a96:	4956      	ldr	r1, [pc, #344]	; (8006bf0 <__ieee754_powf+0x4d0>)
 8006a98:	f7f9 fffc 	bl	8000a94 <__addsf3>
 8006a9c:	4631      	mov	r1, r6
 8006a9e:	f7fa f901 	bl	8000ca4 <__aeabi_fmul>
 8006aa2:	4954      	ldr	r1, [pc, #336]	; (8006bf4 <__ieee754_powf+0x4d4>)
 8006aa4:	f7f9 fff6 	bl	8000a94 <__addsf3>
 8006aa8:	4631      	mov	r1, r6
 8006aaa:	f7fa f8fb 	bl	8000ca4 <__aeabi_fmul>
 8006aae:	4952      	ldr	r1, [pc, #328]	; (8006bf8 <__ieee754_powf+0x4d8>)
 8006ab0:	f7f9 fff0 	bl	8000a94 <__addsf3>
 8006ab4:	4631      	mov	r1, r6
 8006ab6:	f7fa f8f5 	bl	8000ca4 <__aeabi_fmul>
 8006aba:	4950      	ldr	r1, [pc, #320]	; (8006bfc <__ieee754_powf+0x4dc>)
 8006abc:	f7f9 ffea 	bl	8000a94 <__addsf3>
 8006ac0:	4631      	mov	r1, r6
 8006ac2:	4683      	mov	fp, r0
 8006ac4:	4630      	mov	r0, r6
 8006ac6:	f7fa f8ed 	bl	8000ca4 <__aeabi_fmul>
 8006aca:	4601      	mov	r1, r0
 8006acc:	4658      	mov	r0, fp
 8006ace:	f7fa f8e9 	bl	8000ca4 <__aeabi_fmul>
 8006ad2:	4606      	mov	r6, r0
 8006ad4:	4649      	mov	r1, r9
 8006ad6:	4640      	mov	r0, r8
 8006ad8:	f7f9 ffdc 	bl	8000a94 <__addsf3>
 8006adc:	4651      	mov	r1, sl
 8006ade:	f7fa f8e1 	bl	8000ca4 <__aeabi_fmul>
 8006ae2:	4631      	mov	r1, r6
 8006ae4:	f7f9 ffd6 	bl	8000a94 <__addsf3>
 8006ae8:	4649      	mov	r1, r9
 8006aea:	4683      	mov	fp, r0
 8006aec:	4648      	mov	r0, r9
 8006aee:	f7fa f8d9 	bl	8000ca4 <__aeabi_fmul>
 8006af2:	4943      	ldr	r1, [pc, #268]	; (8006c00 <__ieee754_powf+0x4e0>)
 8006af4:	9003      	str	r0, [sp, #12]
 8006af6:	f7f9 ffcd 	bl	8000a94 <__addsf3>
 8006afa:	4659      	mov	r1, fp
 8006afc:	f7f9 ffca 	bl	8000a94 <__addsf3>
 8006b00:	f420 667f 	bic.w	r6, r0, #4080	; 0xff0
 8006b04:	f026 060f 	bic.w	r6, r6, #15
 8006b08:	4631      	mov	r1, r6
 8006b0a:	4648      	mov	r0, r9
 8006b0c:	f7fa f8ca 	bl	8000ca4 <__aeabi_fmul>
 8006b10:	493b      	ldr	r1, [pc, #236]	; (8006c00 <__ieee754_powf+0x4e0>)
 8006b12:	4681      	mov	r9, r0
 8006b14:	4630      	mov	r0, r6
 8006b16:	f7f9 ffbb 	bl	8000a90 <__aeabi_fsub>
 8006b1a:	9b03      	ldr	r3, [sp, #12]
 8006b1c:	4619      	mov	r1, r3
 8006b1e:	f7f9 ffb7 	bl	8000a90 <__aeabi_fsub>
 8006b22:	4601      	mov	r1, r0
 8006b24:	4658      	mov	r0, fp
 8006b26:	f7f9 ffb3 	bl	8000a90 <__aeabi_fsub>
 8006b2a:	4641      	mov	r1, r8
 8006b2c:	f7fa f8ba 	bl	8000ca4 <__aeabi_fmul>
 8006b30:	4631      	mov	r1, r6
 8006b32:	4680      	mov	r8, r0
 8006b34:	4650      	mov	r0, sl
 8006b36:	f7fa f8b5 	bl	8000ca4 <__aeabi_fmul>
 8006b3a:	4601      	mov	r1, r0
 8006b3c:	4640      	mov	r0, r8
 8006b3e:	f7f9 ffa9 	bl	8000a94 <__addsf3>
 8006b42:	4682      	mov	sl, r0
 8006b44:	4601      	mov	r1, r0
 8006b46:	4648      	mov	r0, r9
 8006b48:	f7f9 ffa4 	bl	8000a94 <__addsf3>
 8006b4c:	f420 667f 	bic.w	r6, r0, #4080	; 0xff0
 8006b50:	f026 060f 	bic.w	r6, r6, #15
 8006b54:	4630      	mov	r0, r6
 8006b56:	492b      	ldr	r1, [pc, #172]	; (8006c04 <__ieee754_powf+0x4e4>)
 8006b58:	f7fa f8a4 	bl	8000ca4 <__aeabi_fmul>
 8006b5c:	4649      	mov	r1, r9
 8006b5e:	4680      	mov	r8, r0
 8006b60:	4630      	mov	r0, r6
 8006b62:	f7f9 ff95 	bl	8000a90 <__aeabi_fsub>
 8006b66:	4601      	mov	r1, r0
 8006b68:	4650      	mov	r0, sl
 8006b6a:	f7f9 ff91 	bl	8000a90 <__aeabi_fsub>
 8006b6e:	4926      	ldr	r1, [pc, #152]	; (8006c08 <__ieee754_powf+0x4e8>)
 8006b70:	f7fa f898 	bl	8000ca4 <__aeabi_fmul>
 8006b74:	4925      	ldr	r1, [pc, #148]	; (8006c0c <__ieee754_powf+0x4ec>)
 8006b76:	4681      	mov	r9, r0
 8006b78:	4630      	mov	r0, r6
 8006b7a:	f7fa f893 	bl	8000ca4 <__aeabi_fmul>
 8006b7e:	4601      	mov	r1, r0
 8006b80:	4648      	mov	r0, r9
 8006b82:	f7f9 ff87 	bl	8000a94 <__addsf3>
 8006b86:	4b22      	ldr	r3, [pc, #136]	; (8006c10 <__ieee754_powf+0x4f0>)
 8006b88:	9a00      	ldr	r2, [sp, #0]
 8006b8a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006b8e:	f7f9 ff81 	bl	8000a94 <__addsf3>
 8006b92:	4606      	mov	r6, r0
 8006b94:	9801      	ldr	r0, [sp, #4]
 8006b96:	f7fa f831 	bl	8000bfc <__aeabi_i2f>
 8006b9a:	4682      	mov	sl, r0
 8006b9c:	4b1d      	ldr	r3, [pc, #116]	; (8006c14 <__ieee754_powf+0x4f4>)
 8006b9e:	9a00      	ldr	r2, [sp, #0]
 8006ba0:	4631      	mov	r1, r6
 8006ba2:	f853 b022 	ldr.w	fp, [r3, r2, lsl #2]
 8006ba6:	4640      	mov	r0, r8
 8006ba8:	f7f9 ff74 	bl	8000a94 <__addsf3>
 8006bac:	4659      	mov	r1, fp
 8006bae:	f7f9 ff71 	bl	8000a94 <__addsf3>
 8006bb2:	4651      	mov	r1, sl
 8006bb4:	f7f9 ff6e 	bl	8000a94 <__addsf3>
 8006bb8:	f420 697f 	bic.w	r9, r0, #4080	; 0xff0
 8006bbc:	f029 090f 	bic.w	r9, r9, #15
 8006bc0:	4651      	mov	r1, sl
 8006bc2:	4648      	mov	r0, r9
 8006bc4:	f7f9 ff64 	bl	8000a90 <__aeabi_fsub>
 8006bc8:	4659      	mov	r1, fp
 8006bca:	f7f9 ff61 	bl	8000a90 <__aeabi_fsub>
 8006bce:	4641      	mov	r1, r8
 8006bd0:	e69c      	b.n	800690c <__ieee754_powf+0x1ec>
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	e6f3      	b.n	80069be <__ieee754_powf+0x29e>
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	e706      	b.n	80069e8 <__ieee754_powf+0x2c8>
 8006bda:	bf00      	nop
 8006bdc:	001cc471 	.word	0x001cc471
 8006be0:	005db3d6 	.word	0x005db3d6
 8006be4:	0800763c 	.word	0x0800763c
 8006be8:	3e53f142 	.word	0x3e53f142
 8006bec:	3e6c3255 	.word	0x3e6c3255
 8006bf0:	3e8ba305 	.word	0x3e8ba305
 8006bf4:	3eaaaaab 	.word	0x3eaaaaab
 8006bf8:	3edb6db7 	.word	0x3edb6db7
 8006bfc:	3f19999a 	.word	0x3f19999a
 8006c00:	40400000 	.word	0x40400000
 8006c04:	3f763800 	.word	0x3f763800
 8006c08:	3f76384f 	.word	0x3f76384f
 8006c0c:	369dc3a0 	.word	0x369dc3a0
 8006c10:	0800764c 	.word	0x0800764c
 8006c14:	08007644 	.word	0x08007644
 8006c18:	f040 80c2 	bne.w	8006da0 <__ieee754_powf+0x680>
 8006c1c:	4968      	ldr	r1, [pc, #416]	; (8006dc0 <__ieee754_powf+0x6a0>)
 8006c1e:	4630      	mov	r0, r6
 8006c20:	f7f9 ff38 	bl	8000a94 <__addsf3>
 8006c24:	4639      	mov	r1, r7
 8006c26:	4681      	mov	r9, r0
 8006c28:	4650      	mov	r0, sl
 8006c2a:	f7f9 ff31 	bl	8000a90 <__aeabi_fsub>
 8006c2e:	4601      	mov	r1, r0
 8006c30:	4648      	mov	r0, r9
 8006c32:	f7fa f9f3 	bl	800101c <__aeabi_fcmpgt>
 8006c36:	2800      	cmp	r0, #0
 8006c38:	f47f aea0 	bne.w	800697c <__ieee754_powf+0x25c>
 8006c3c:	15e4      	asrs	r4, r4, #23
 8006c3e:	f1a4 037e 	sub.w	r3, r4, #126	; 0x7e
 8006c42:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
 8006c46:	411c      	asrs	r4, r3
 8006c48:	4444      	add	r4, r8
 8006c4a:	f3c4 53c7 	ubfx	r3, r4, #23, #8
 8006c4e:	495d      	ldr	r1, [pc, #372]	; (8006dc4 <__ieee754_powf+0x6a4>)
 8006c50:	3b7f      	subs	r3, #127	; 0x7f
 8006c52:	4119      	asrs	r1, r3
 8006c54:	4021      	ands	r1, r4
 8006c56:	f3c4 0416 	ubfx	r4, r4, #0, #23
 8006c5a:	f1c3 0317 	rsb	r3, r3, #23
 8006c5e:	f444 0400 	orr.w	r4, r4, #8388608	; 0x800000
 8006c62:	411c      	asrs	r4, r3
 8006c64:	f1b8 0f00 	cmp.w	r8, #0
 8006c68:	4638      	mov	r0, r7
 8006c6a:	bfb8      	it	lt
 8006c6c:	4264      	neglt	r4, r4
 8006c6e:	f7f9 ff0f 	bl	8000a90 <__aeabi_fsub>
 8006c72:	4681      	mov	r9, r0
 8006c74:	4631      	mov	r1, r6
 8006c76:	4648      	mov	r0, r9
 8006c78:	f7f9 ff0c 	bl	8000a94 <__addsf3>
 8006c7c:	f420 677f 	bic.w	r7, r0, #4080	; 0xff0
 8006c80:	f027 070f 	bic.w	r7, r7, #15
 8006c84:	4638      	mov	r0, r7
 8006c86:	4950      	ldr	r1, [pc, #320]	; (8006dc8 <__ieee754_powf+0x6a8>)
 8006c88:	f7fa f80c 	bl	8000ca4 <__aeabi_fmul>
 8006c8c:	4649      	mov	r1, r9
 8006c8e:	4680      	mov	r8, r0
 8006c90:	4638      	mov	r0, r7
 8006c92:	f7f9 fefd 	bl	8000a90 <__aeabi_fsub>
 8006c96:	4601      	mov	r1, r0
 8006c98:	4630      	mov	r0, r6
 8006c9a:	f7f9 fef9 	bl	8000a90 <__aeabi_fsub>
 8006c9e:	494b      	ldr	r1, [pc, #300]	; (8006dcc <__ieee754_powf+0x6ac>)
 8006ca0:	f7fa f800 	bl	8000ca4 <__aeabi_fmul>
 8006ca4:	494a      	ldr	r1, [pc, #296]	; (8006dd0 <__ieee754_powf+0x6b0>)
 8006ca6:	4606      	mov	r6, r0
 8006ca8:	4638      	mov	r0, r7
 8006caa:	f7f9 fffb 	bl	8000ca4 <__aeabi_fmul>
 8006cae:	4601      	mov	r1, r0
 8006cb0:	4630      	mov	r0, r6
 8006cb2:	f7f9 feef 	bl	8000a94 <__addsf3>
 8006cb6:	4607      	mov	r7, r0
 8006cb8:	4601      	mov	r1, r0
 8006cba:	4640      	mov	r0, r8
 8006cbc:	f7f9 feea 	bl	8000a94 <__addsf3>
 8006cc0:	4641      	mov	r1, r8
 8006cc2:	4606      	mov	r6, r0
 8006cc4:	f7f9 fee4 	bl	8000a90 <__aeabi_fsub>
 8006cc8:	4601      	mov	r1, r0
 8006cca:	4638      	mov	r0, r7
 8006ccc:	f7f9 fee0 	bl	8000a90 <__aeabi_fsub>
 8006cd0:	4631      	mov	r1, r6
 8006cd2:	4680      	mov	r8, r0
 8006cd4:	4630      	mov	r0, r6
 8006cd6:	f7f9 ffe5 	bl	8000ca4 <__aeabi_fmul>
 8006cda:	4607      	mov	r7, r0
 8006cdc:	493d      	ldr	r1, [pc, #244]	; (8006dd4 <__ieee754_powf+0x6b4>)
 8006cde:	f7f9 ffe1 	bl	8000ca4 <__aeabi_fmul>
 8006ce2:	493d      	ldr	r1, [pc, #244]	; (8006dd8 <__ieee754_powf+0x6b8>)
 8006ce4:	f7f9 fed4 	bl	8000a90 <__aeabi_fsub>
 8006ce8:	4639      	mov	r1, r7
 8006cea:	f7f9 ffdb 	bl	8000ca4 <__aeabi_fmul>
 8006cee:	493b      	ldr	r1, [pc, #236]	; (8006ddc <__ieee754_powf+0x6bc>)
 8006cf0:	f7f9 fed0 	bl	8000a94 <__addsf3>
 8006cf4:	4639      	mov	r1, r7
 8006cf6:	f7f9 ffd5 	bl	8000ca4 <__aeabi_fmul>
 8006cfa:	4939      	ldr	r1, [pc, #228]	; (8006de0 <__ieee754_powf+0x6c0>)
 8006cfc:	f7f9 fec8 	bl	8000a90 <__aeabi_fsub>
 8006d00:	4639      	mov	r1, r7
 8006d02:	f7f9 ffcf 	bl	8000ca4 <__aeabi_fmul>
 8006d06:	4937      	ldr	r1, [pc, #220]	; (8006de4 <__ieee754_powf+0x6c4>)
 8006d08:	f7f9 fec4 	bl	8000a94 <__addsf3>
 8006d0c:	4639      	mov	r1, r7
 8006d0e:	f7f9 ffc9 	bl	8000ca4 <__aeabi_fmul>
 8006d12:	4601      	mov	r1, r0
 8006d14:	4630      	mov	r0, r6
 8006d16:	f7f9 febb 	bl	8000a90 <__aeabi_fsub>
 8006d1a:	4607      	mov	r7, r0
 8006d1c:	4601      	mov	r1, r0
 8006d1e:	4630      	mov	r0, r6
 8006d20:	f7f9 ffc0 	bl	8000ca4 <__aeabi_fmul>
 8006d24:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8006d28:	4681      	mov	r9, r0
 8006d2a:	4638      	mov	r0, r7
 8006d2c:	f7f9 feb0 	bl	8000a90 <__aeabi_fsub>
 8006d30:	4601      	mov	r1, r0
 8006d32:	4648      	mov	r0, r9
 8006d34:	f7fa f86a 	bl	8000e0c <__aeabi_fdiv>
 8006d38:	4641      	mov	r1, r8
 8006d3a:	4607      	mov	r7, r0
 8006d3c:	4630      	mov	r0, r6
 8006d3e:	f7f9 ffb1 	bl	8000ca4 <__aeabi_fmul>
 8006d42:	4641      	mov	r1, r8
 8006d44:	f7f9 fea6 	bl	8000a94 <__addsf3>
 8006d48:	4601      	mov	r1, r0
 8006d4a:	4638      	mov	r0, r7
 8006d4c:	f7f9 fea0 	bl	8000a90 <__aeabi_fsub>
 8006d50:	4631      	mov	r1, r6
 8006d52:	f7f9 fe9d 	bl	8000a90 <__aeabi_fsub>
 8006d56:	4601      	mov	r1, r0
 8006d58:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8006d5c:	f7f9 fe98 	bl	8000a90 <__aeabi_fsub>
 8006d60:	eb00 53c4 	add.w	r3, r0, r4, lsl #23
 8006d64:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006d68:	da20      	bge.n	8006dac <__ieee754_powf+0x68c>
 8006d6a:	4621      	mov	r1, r4
 8006d6c:	f000 f94a 	bl	8007004 <scalbnf>
 8006d70:	4629      	mov	r1, r5
 8006d72:	e53f      	b.n	80067f4 <__ieee754_powf+0xd4>
 8006d74:	4b1c      	ldr	r3, [pc, #112]	; (8006de8 <__ieee754_powf+0x6c8>)
 8006d76:	429c      	cmp	r4, r3
 8006d78:	dd07      	ble.n	8006d8a <__ieee754_powf+0x66a>
 8006d7a:	2100      	movs	r1, #0
 8006d7c:	4628      	mov	r0, r5
 8006d7e:	f7fa f92f 	bl	8000fe0 <__aeabi_fcmplt>
 8006d82:	3800      	subs	r0, #0
 8006d84:	bf18      	it	ne
 8006d86:	2001      	movne	r0, #1
 8006d88:	e581      	b.n	800688e <__ieee754_powf+0x16e>
 8006d8a:	d109      	bne.n	8006da0 <__ieee754_powf+0x680>
 8006d8c:	4639      	mov	r1, r7
 8006d8e:	f7f9 fe7f 	bl	8000a90 <__aeabi_fsub>
 8006d92:	4631      	mov	r1, r6
 8006d94:	f7fa f938 	bl	8001008 <__aeabi_fcmpge>
 8006d98:	2800      	cmp	r0, #0
 8006d9a:	f43f af4f 	beq.w	8006c3c <__ieee754_powf+0x51c>
 8006d9e:	e7ec      	b.n	8006d7a <__ieee754_powf+0x65a>
 8006da0:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8006da4:	f73f af4a 	bgt.w	8006c3c <__ieee754_powf+0x51c>
 8006da8:	2400      	movs	r4, #0
 8006daa:	e763      	b.n	8006c74 <__ieee754_powf+0x554>
 8006dac:	4618      	mov	r0, r3
 8006dae:	e7df      	b.n	8006d70 <__ieee754_powf+0x650>
 8006db0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8006db4:	e50d      	b.n	80067d2 <__ieee754_powf+0xb2>
 8006db6:	2100      	movs	r1, #0
 8006db8:	e50b      	b.n	80067d2 <__ieee754_powf+0xb2>
 8006dba:	2500      	movs	r5, #0
 8006dbc:	e4f1      	b.n	80067a2 <__ieee754_powf+0x82>
 8006dbe:	bf00      	nop
 8006dc0:	3338aa3c 	.word	0x3338aa3c
 8006dc4:	ff800000 	.word	0xff800000
 8006dc8:	3f317200 	.word	0x3f317200
 8006dcc:	3f317218 	.word	0x3f317218
 8006dd0:	35bfbe8c 	.word	0x35bfbe8c
 8006dd4:	3331bb4c 	.word	0x3331bb4c
 8006dd8:	35ddea0e 	.word	0x35ddea0e
 8006ddc:	388ab355 	.word	0x388ab355
 8006de0:	3b360b61 	.word	0x3b360b61
 8006de4:	3e2aaaab 	.word	0x3e2aaaab
 8006de8:	43160000 	.word	0x43160000

08006dec <atanf>:
 8006dec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006df0:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 8006df4:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
 8006df8:	4604      	mov	r4, r0
 8006dfa:	4680      	mov	r8, r0
 8006dfc:	db0e      	blt.n	8006e1c <atanf+0x30>
 8006dfe:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8006e02:	dd04      	ble.n	8006e0e <atanf+0x22>
 8006e04:	4601      	mov	r1, r0
 8006e06:	f7f9 fe45 	bl	8000a94 <__addsf3>
 8006e0a:	4604      	mov	r4, r0
 8006e0c:	e003      	b.n	8006e16 <atanf+0x2a>
 8006e0e:	2800      	cmp	r0, #0
 8006e10:	f300 80ce 	bgt.w	8006fb0 <atanf+0x1c4>
 8006e14:	4c67      	ldr	r4, [pc, #412]	; (8006fb4 <atanf+0x1c8>)
 8006e16:	4620      	mov	r0, r4
 8006e18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e1c:	4b66      	ldr	r3, [pc, #408]	; (8006fb8 <atanf+0x1cc>)
 8006e1e:	429d      	cmp	r5, r3
 8006e20:	dc0e      	bgt.n	8006e40 <atanf+0x54>
 8006e22:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
 8006e26:	da08      	bge.n	8006e3a <atanf+0x4e>
 8006e28:	4964      	ldr	r1, [pc, #400]	; (8006fbc <atanf+0x1d0>)
 8006e2a:	f7f9 fe33 	bl	8000a94 <__addsf3>
 8006e2e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8006e32:	f7fa f8f3 	bl	800101c <__aeabi_fcmpgt>
 8006e36:	2800      	cmp	r0, #0
 8006e38:	d1ed      	bne.n	8006e16 <atanf+0x2a>
 8006e3a:	f04f 36ff 	mov.w	r6, #4294967295
 8006e3e:	e01c      	b.n	8006e7a <atanf+0x8e>
 8006e40:	f7ff fa97 	bl	8006372 <fabsf>
 8006e44:	4b5e      	ldr	r3, [pc, #376]	; (8006fc0 <atanf+0x1d4>)
 8006e46:	4604      	mov	r4, r0
 8006e48:	429d      	cmp	r5, r3
 8006e4a:	dc7c      	bgt.n	8006f46 <atanf+0x15a>
 8006e4c:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8006e50:	429d      	cmp	r5, r3
 8006e52:	dc67      	bgt.n	8006f24 <atanf+0x138>
 8006e54:	4601      	mov	r1, r0
 8006e56:	f7f9 fe1d 	bl	8000a94 <__addsf3>
 8006e5a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8006e5e:	f7f9 fe17 	bl	8000a90 <__aeabi_fsub>
 8006e62:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8006e66:	4605      	mov	r5, r0
 8006e68:	4620      	mov	r0, r4
 8006e6a:	f7f9 fe13 	bl	8000a94 <__addsf3>
 8006e6e:	4601      	mov	r1, r0
 8006e70:	4628      	mov	r0, r5
 8006e72:	f7f9 ffcb 	bl	8000e0c <__aeabi_fdiv>
 8006e76:	2600      	movs	r6, #0
 8006e78:	4604      	mov	r4, r0
 8006e7a:	4621      	mov	r1, r4
 8006e7c:	4620      	mov	r0, r4
 8006e7e:	f7f9 ff11 	bl	8000ca4 <__aeabi_fmul>
 8006e82:	4601      	mov	r1, r0
 8006e84:	4607      	mov	r7, r0
 8006e86:	f7f9 ff0d 	bl	8000ca4 <__aeabi_fmul>
 8006e8a:	4605      	mov	r5, r0
 8006e8c:	494d      	ldr	r1, [pc, #308]	; (8006fc4 <atanf+0x1d8>)
 8006e8e:	f7f9 ff09 	bl	8000ca4 <__aeabi_fmul>
 8006e92:	494d      	ldr	r1, [pc, #308]	; (8006fc8 <atanf+0x1dc>)
 8006e94:	f7f9 fdfe 	bl	8000a94 <__addsf3>
 8006e98:	4629      	mov	r1, r5
 8006e9a:	f7f9 ff03 	bl	8000ca4 <__aeabi_fmul>
 8006e9e:	494b      	ldr	r1, [pc, #300]	; (8006fcc <atanf+0x1e0>)
 8006ea0:	f7f9 fdf8 	bl	8000a94 <__addsf3>
 8006ea4:	4629      	mov	r1, r5
 8006ea6:	f7f9 fefd 	bl	8000ca4 <__aeabi_fmul>
 8006eaa:	4949      	ldr	r1, [pc, #292]	; (8006fd0 <atanf+0x1e4>)
 8006eac:	f7f9 fdf2 	bl	8000a94 <__addsf3>
 8006eb0:	4629      	mov	r1, r5
 8006eb2:	f7f9 fef7 	bl	8000ca4 <__aeabi_fmul>
 8006eb6:	4947      	ldr	r1, [pc, #284]	; (8006fd4 <atanf+0x1e8>)
 8006eb8:	f7f9 fdec 	bl	8000a94 <__addsf3>
 8006ebc:	4629      	mov	r1, r5
 8006ebe:	f7f9 fef1 	bl	8000ca4 <__aeabi_fmul>
 8006ec2:	4945      	ldr	r1, [pc, #276]	; (8006fd8 <atanf+0x1ec>)
 8006ec4:	f7f9 fde6 	bl	8000a94 <__addsf3>
 8006ec8:	4639      	mov	r1, r7
 8006eca:	f7f9 feeb 	bl	8000ca4 <__aeabi_fmul>
 8006ece:	4943      	ldr	r1, [pc, #268]	; (8006fdc <atanf+0x1f0>)
 8006ed0:	4607      	mov	r7, r0
 8006ed2:	4628      	mov	r0, r5
 8006ed4:	f7f9 fee6 	bl	8000ca4 <__aeabi_fmul>
 8006ed8:	4941      	ldr	r1, [pc, #260]	; (8006fe0 <atanf+0x1f4>)
 8006eda:	f7f9 fdd9 	bl	8000a90 <__aeabi_fsub>
 8006ede:	4629      	mov	r1, r5
 8006ee0:	f7f9 fee0 	bl	8000ca4 <__aeabi_fmul>
 8006ee4:	493f      	ldr	r1, [pc, #252]	; (8006fe4 <atanf+0x1f8>)
 8006ee6:	f7f9 fdd3 	bl	8000a90 <__aeabi_fsub>
 8006eea:	4629      	mov	r1, r5
 8006eec:	f7f9 feda 	bl	8000ca4 <__aeabi_fmul>
 8006ef0:	493d      	ldr	r1, [pc, #244]	; (8006fe8 <atanf+0x1fc>)
 8006ef2:	f7f9 fdcd 	bl	8000a90 <__aeabi_fsub>
 8006ef6:	4629      	mov	r1, r5
 8006ef8:	f7f9 fed4 	bl	8000ca4 <__aeabi_fmul>
 8006efc:	493b      	ldr	r1, [pc, #236]	; (8006fec <atanf+0x200>)
 8006efe:	f7f9 fdc7 	bl	8000a90 <__aeabi_fsub>
 8006f02:	4629      	mov	r1, r5
 8006f04:	f7f9 fece 	bl	8000ca4 <__aeabi_fmul>
 8006f08:	4601      	mov	r1, r0
 8006f0a:	4638      	mov	r0, r7
 8006f0c:	f7f9 fdc2 	bl	8000a94 <__addsf3>
 8006f10:	4621      	mov	r1, r4
 8006f12:	f7f9 fec7 	bl	8000ca4 <__aeabi_fmul>
 8006f16:	1c73      	adds	r3, r6, #1
 8006f18:	4601      	mov	r1, r0
 8006f1a:	d133      	bne.n	8006f84 <atanf+0x198>
 8006f1c:	4620      	mov	r0, r4
 8006f1e:	f7f9 fdb7 	bl	8000a90 <__aeabi_fsub>
 8006f22:	e772      	b.n	8006e0a <atanf+0x1e>
 8006f24:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8006f28:	f7f9 fdb2 	bl	8000a90 <__aeabi_fsub>
 8006f2c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8006f30:	4605      	mov	r5, r0
 8006f32:	4620      	mov	r0, r4
 8006f34:	f7f9 fdae 	bl	8000a94 <__addsf3>
 8006f38:	4601      	mov	r1, r0
 8006f3a:	4628      	mov	r0, r5
 8006f3c:	f7f9 ff66 	bl	8000e0c <__aeabi_fdiv>
 8006f40:	2601      	movs	r6, #1
 8006f42:	4604      	mov	r4, r0
 8006f44:	e799      	b.n	8006e7a <atanf+0x8e>
 8006f46:	4b2a      	ldr	r3, [pc, #168]	; (8006ff0 <atanf+0x204>)
 8006f48:	429d      	cmp	r5, r3
 8006f4a:	dc14      	bgt.n	8006f76 <atanf+0x18a>
 8006f4c:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8006f50:	f7f9 fd9e 	bl	8000a90 <__aeabi_fsub>
 8006f54:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8006f58:	4605      	mov	r5, r0
 8006f5a:	4620      	mov	r0, r4
 8006f5c:	f7f9 fea2 	bl	8000ca4 <__aeabi_fmul>
 8006f60:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8006f64:	f7f9 fd96 	bl	8000a94 <__addsf3>
 8006f68:	4601      	mov	r1, r0
 8006f6a:	4628      	mov	r0, r5
 8006f6c:	f7f9 ff4e 	bl	8000e0c <__aeabi_fdiv>
 8006f70:	2602      	movs	r6, #2
 8006f72:	4604      	mov	r4, r0
 8006f74:	e781      	b.n	8006e7a <atanf+0x8e>
 8006f76:	4601      	mov	r1, r0
 8006f78:	481e      	ldr	r0, [pc, #120]	; (8006ff4 <atanf+0x208>)
 8006f7a:	f7f9 ff47 	bl	8000e0c <__aeabi_fdiv>
 8006f7e:	2603      	movs	r6, #3
 8006f80:	4604      	mov	r4, r0
 8006f82:	e77a      	b.n	8006e7a <atanf+0x8e>
 8006f84:	4b1c      	ldr	r3, [pc, #112]	; (8006ff8 <atanf+0x20c>)
 8006f86:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 8006f8a:	f7f9 fd81 	bl	8000a90 <__aeabi_fsub>
 8006f8e:	4621      	mov	r1, r4
 8006f90:	f7f9 fd7e 	bl	8000a90 <__aeabi_fsub>
 8006f94:	4b19      	ldr	r3, [pc, #100]	; (8006ffc <atanf+0x210>)
 8006f96:	4601      	mov	r1, r0
 8006f98:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006f9c:	f7f9 fd78 	bl	8000a90 <__aeabi_fsub>
 8006fa0:	f1b8 0f00 	cmp.w	r8, #0
 8006fa4:	4604      	mov	r4, r0
 8006fa6:	f6bf af36 	bge.w	8006e16 <atanf+0x2a>
 8006faa:	f100 4400 	add.w	r4, r0, #2147483648	; 0x80000000
 8006fae:	e732      	b.n	8006e16 <atanf+0x2a>
 8006fb0:	4c13      	ldr	r4, [pc, #76]	; (8007000 <atanf+0x214>)
 8006fb2:	e730      	b.n	8006e16 <atanf+0x2a>
 8006fb4:	bfc90fdb 	.word	0xbfc90fdb
 8006fb8:	3edfffff 	.word	0x3edfffff
 8006fbc:	7149f2ca 	.word	0x7149f2ca
 8006fc0:	3f97ffff 	.word	0x3f97ffff
 8006fc4:	3c8569d7 	.word	0x3c8569d7
 8006fc8:	3d4bda59 	.word	0x3d4bda59
 8006fcc:	3d886b35 	.word	0x3d886b35
 8006fd0:	3dba2e6e 	.word	0x3dba2e6e
 8006fd4:	3e124925 	.word	0x3e124925
 8006fd8:	3eaaaaab 	.word	0x3eaaaaab
 8006fdc:	bd15a221 	.word	0xbd15a221
 8006fe0:	3d6ef16b 	.word	0x3d6ef16b
 8006fe4:	3d9d8795 	.word	0x3d9d8795
 8006fe8:	3de38e38 	.word	0x3de38e38
 8006fec:	3e4ccccd 	.word	0x3e4ccccd
 8006ff0:	401bffff 	.word	0x401bffff
 8006ff4:	bf800000 	.word	0xbf800000
 8006ff8:	08007664 	.word	0x08007664
 8006ffc:	08007654 	.word	0x08007654
 8007000:	3fc90fdb 	.word	0x3fc90fdb

08007004 <scalbnf>:
 8007004:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8007008:	b538      	push	{r3, r4, r5, lr}
 800700a:	4603      	mov	r3, r0
 800700c:	460d      	mov	r5, r1
 800700e:	4604      	mov	r4, r0
 8007010:	d02e      	beq.n	8007070 <scalbnf+0x6c>
 8007012:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8007016:	d304      	bcc.n	8007022 <scalbnf+0x1e>
 8007018:	4601      	mov	r1, r0
 800701a:	f7f9 fd3b 	bl	8000a94 <__addsf3>
 800701e:	4603      	mov	r3, r0
 8007020:	e026      	b.n	8007070 <scalbnf+0x6c>
 8007022:	f010 4fff 	tst.w	r0, #2139095040	; 0x7f800000
 8007026:	d118      	bne.n	800705a <scalbnf+0x56>
 8007028:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 800702c:	f7f9 fe3a 	bl	8000ca4 <__aeabi_fmul>
 8007030:	4a17      	ldr	r2, [pc, #92]	; (8007090 <scalbnf+0x8c>)
 8007032:	4603      	mov	r3, r0
 8007034:	4295      	cmp	r5, r2
 8007036:	db0c      	blt.n	8007052 <scalbnf+0x4e>
 8007038:	4604      	mov	r4, r0
 800703a:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800703e:	3a19      	subs	r2, #25
 8007040:	f24c 3150 	movw	r1, #50000	; 0xc350
 8007044:	428d      	cmp	r5, r1
 8007046:	dd0a      	ble.n	800705e <scalbnf+0x5a>
 8007048:	4912      	ldr	r1, [pc, #72]	; (8007094 <scalbnf+0x90>)
 800704a:	4618      	mov	r0, r3
 800704c:	f361 001e 	bfi	r0, r1, #0, #31
 8007050:	e000      	b.n	8007054 <scalbnf+0x50>
 8007052:	4911      	ldr	r1, [pc, #68]	; (8007098 <scalbnf+0x94>)
 8007054:	f7f9 fe26 	bl	8000ca4 <__aeabi_fmul>
 8007058:	e7e1      	b.n	800701e <scalbnf+0x1a>
 800705a:	0dd2      	lsrs	r2, r2, #23
 800705c:	e7f0      	b.n	8007040 <scalbnf+0x3c>
 800705e:	1951      	adds	r1, r2, r5
 8007060:	29fe      	cmp	r1, #254	; 0xfe
 8007062:	dcf1      	bgt.n	8007048 <scalbnf+0x44>
 8007064:	2900      	cmp	r1, #0
 8007066:	dd05      	ble.n	8007074 <scalbnf+0x70>
 8007068:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
 800706c:	ea44 53c1 	orr.w	r3, r4, r1, lsl #23
 8007070:	4618      	mov	r0, r3
 8007072:	bd38      	pop	{r3, r4, r5, pc}
 8007074:	f111 0f16 	cmn.w	r1, #22
 8007078:	da01      	bge.n	800707e <scalbnf+0x7a>
 800707a:	4907      	ldr	r1, [pc, #28]	; (8007098 <scalbnf+0x94>)
 800707c:	e7e5      	b.n	800704a <scalbnf+0x46>
 800707e:	f101 0019 	add.w	r0, r1, #25
 8007082:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
 8007086:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 800708a:	ea44 50c0 	orr.w	r0, r4, r0, lsl #23
 800708e:	e7e1      	b.n	8007054 <scalbnf+0x50>
 8007090:	ffff3cb0 	.word	0xffff3cb0
 8007094:	7149f2ca 	.word	0x7149f2ca
 8007098:	0da24260 	.word	0x0da24260

0800709c <with_errnof>:
 800709c:	b538      	push	{r3, r4, r5, lr}
 800709e:	4604      	mov	r4, r0
 80070a0:	460d      	mov	r5, r1
 80070a2:	f7fd fa9d 	bl	80045e0 <__errno>
 80070a6:	6005      	str	r5, [r0, #0]
 80070a8:	4620      	mov	r0, r4
 80070aa:	bd38      	pop	{r3, r4, r5, pc}

080070ac <xflowf>:
 80070ac:	b508      	push	{r3, lr}
 80070ae:	b140      	cbz	r0, 80070c2 <xflowf+0x16>
 80070b0:	f101 4000 	add.w	r0, r1, #2147483648	; 0x80000000
 80070b4:	f7f9 fdf6 	bl	8000ca4 <__aeabi_fmul>
 80070b8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80070bc:	2122      	movs	r1, #34	; 0x22
 80070be:	f7ff bfed 	b.w	800709c <with_errnof>
 80070c2:	4608      	mov	r0, r1
 80070c4:	e7f6      	b.n	80070b4 <xflowf+0x8>

080070c6 <__math_uflowf>:
 80070c6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
 80070ca:	f7ff bfef 	b.w	80070ac <xflowf>

080070ce <__math_oflowf>:
 80070ce:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
 80070d2:	f7ff bfeb 	b.w	80070ac <xflowf>
	...

080070d8 <__ieee754_sqrtf>:
 80070d8:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 80070dc:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80070e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070e4:	4603      	mov	r3, r0
 80070e6:	4604      	mov	r4, r0
 80070e8:	d30a      	bcc.n	8007100 <__ieee754_sqrtf+0x28>
 80070ea:	4601      	mov	r1, r0
 80070ec:	f7f9 fdda 	bl	8000ca4 <__aeabi_fmul>
 80070f0:	4601      	mov	r1, r0
 80070f2:	4620      	mov	r0, r4
 80070f4:	f7f9 fcce 	bl	8000a94 <__addsf3>
 80070f8:	4604      	mov	r4, r0
 80070fa:	4620      	mov	r0, r4
 80070fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007100:	2a00      	cmp	r2, #0
 8007102:	d0fa      	beq.n	80070fa <__ieee754_sqrtf+0x22>
 8007104:	2800      	cmp	r0, #0
 8007106:	da06      	bge.n	8007116 <__ieee754_sqrtf+0x3e>
 8007108:	4601      	mov	r1, r0
 800710a:	f7f9 fcc1 	bl	8000a90 <__aeabi_fsub>
 800710e:	4601      	mov	r1, r0
 8007110:	f7f9 fe7c 	bl	8000e0c <__aeabi_fdiv>
 8007114:	e7f0      	b.n	80070f8 <__ieee754_sqrtf+0x20>
 8007116:	f010 42ff 	ands.w	r2, r0, #2139095040	; 0x7f800000
 800711a:	ea4f 51e0 	mov.w	r1, r0, asr #23
 800711e:	d03e      	beq.n	800719e <__ieee754_sqrtf+0xc6>
 8007120:	2400      	movs	r4, #0
 8007122:	f1a1 057f 	sub.w	r5, r1, #127	; 0x7f
 8007126:	07ca      	lsls	r2, r1, #31
 8007128:	f04f 0019 	mov.w	r0, #25
 800712c:	4626      	mov	r6, r4
 800712e:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8007132:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8007136:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800713a:	bf58      	it	pl
 800713c:	005b      	lslpl	r3, r3, #1
 800713e:	106d      	asrs	r5, r5, #1
 8007140:	005b      	lsls	r3, r3, #1
 8007142:	1872      	adds	r2, r6, r1
 8007144:	429a      	cmp	r2, r3
 8007146:	bfcf      	iteee	gt
 8007148:	461a      	movgt	r2, r3
 800714a:	1856      	addle	r6, r2, r1
 800714c:	1864      	addle	r4, r4, r1
 800714e:	1a9a      	suble	r2, r3, r2
 8007150:	3801      	subs	r0, #1
 8007152:	ea4f 0342 	mov.w	r3, r2, lsl #1
 8007156:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800715a:	d1f2      	bne.n	8007142 <__ieee754_sqrtf+0x6a>
 800715c:	b1ba      	cbz	r2, 800718e <__ieee754_sqrtf+0xb6>
 800715e:	4e14      	ldr	r6, [pc, #80]	; (80071b0 <__ieee754_sqrtf+0xd8>)
 8007160:	4f14      	ldr	r7, [pc, #80]	; (80071b4 <__ieee754_sqrtf+0xdc>)
 8007162:	6830      	ldr	r0, [r6, #0]
 8007164:	6839      	ldr	r1, [r7, #0]
 8007166:	f7f9 fc93 	bl	8000a90 <__aeabi_fsub>
 800716a:	f8d6 8000 	ldr.w	r8, [r6]
 800716e:	4601      	mov	r1, r0
 8007170:	4640      	mov	r0, r8
 8007172:	f7f9 ff3f 	bl	8000ff4 <__aeabi_fcmple>
 8007176:	b150      	cbz	r0, 800718e <__ieee754_sqrtf+0xb6>
 8007178:	6830      	ldr	r0, [r6, #0]
 800717a:	6839      	ldr	r1, [r7, #0]
 800717c:	f7f9 fc8a 	bl	8000a94 <__addsf3>
 8007180:	6836      	ldr	r6, [r6, #0]
 8007182:	4601      	mov	r1, r0
 8007184:	4630      	mov	r0, r6
 8007186:	f7f9 ff2b 	bl	8000fe0 <__aeabi_fcmplt>
 800718a:	b168      	cbz	r0, 80071a8 <__ieee754_sqrtf+0xd0>
 800718c:	3402      	adds	r4, #2
 800718e:	1064      	asrs	r4, r4, #1
 8007190:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 8007194:	eb04 54c5 	add.w	r4, r4, r5, lsl #23
 8007198:	e7af      	b.n	80070fa <__ieee754_sqrtf+0x22>
 800719a:	005b      	lsls	r3, r3, #1
 800719c:	3201      	adds	r2, #1
 800719e:	0218      	lsls	r0, r3, #8
 80071a0:	d5fb      	bpl.n	800719a <__ieee754_sqrtf+0xc2>
 80071a2:	3a01      	subs	r2, #1
 80071a4:	1a89      	subs	r1, r1, r2
 80071a6:	e7bb      	b.n	8007120 <__ieee754_sqrtf+0x48>
 80071a8:	3401      	adds	r4, #1
 80071aa:	f024 0401 	bic.w	r4, r4, #1
 80071ae:	e7ee      	b.n	800718e <__ieee754_sqrtf+0xb6>
 80071b0:	200001d8 	.word	0x200001d8
 80071b4:	200001dc 	.word	0x200001dc

080071b8 <_init>:
 80071b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071ba:	bf00      	nop
 80071bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071be:	bc08      	pop	{r3}
 80071c0:	469e      	mov	lr, r3
 80071c2:	4770      	bx	lr

080071c4 <_fini>:
 80071c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071c6:	bf00      	nop
 80071c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071ca:	bc08      	pop	{r3}
 80071cc:	469e      	mov	lr, r3
 80071ce:	4770      	bx	lr
