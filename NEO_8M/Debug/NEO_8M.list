
NEO_8M.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003170  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  0800327c  0800327c  0001327c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080032fc  080032fc  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  080032fc  080032fc  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080032fc  080032fc  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080032fc  080032fc  000132fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003300  08003300  00013300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08003304  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000210  20000068  0800336c  00020068  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000278  0800336c  00020278  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008ca6  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001fdc  00000000  00000000  00028d7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000930  00000000  00000000  0002ad58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006e0  00000000  00000000  0002b688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001917d  00000000  00000000  0002bd68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ad1d  00000000  00000000  00044ee5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00089de2  00000000  00000000  0004fc02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002b58  00000000  00000000  000d99e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  000dc53c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08003264 	.word	0x08003264

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08003264 	.word	0x08003264

0800014c <M8N_UBX_CHKSUM_Check>:
	HAL_Delay(100);
	M8N_TransmitData(&UBX_CFG_CFG[0], sizeof(UBX_CFG_CFG));
}

unsigned char M8N_UBX_CHKSUM_Check(unsigned char* data, unsigned char len)
{
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	460b      	mov	r3, r1
 8000156:	70fb      	strb	r3, [r7, #3]
	unsigned char CK_A = 0, CK_B = 0;
 8000158:	2300      	movs	r3, #0
 800015a:	73fb      	strb	r3, [r7, #15]
 800015c:	2300      	movs	r3, #0
 800015e:	73bb      	strb	r3, [r7, #14]

	for(int i=2;i<len-2;i++)
 8000160:	2302      	movs	r3, #2
 8000162:	60bb      	str	r3, [r7, #8]
 8000164:	e00d      	b.n	8000182 <M8N_UBX_CHKSUM_Check+0x36>
	{
		CK_A = CK_A + data[i];
 8000166:	68bb      	ldr	r3, [r7, #8]
 8000168:	687a      	ldr	r2, [r7, #4]
 800016a:	4413      	add	r3, r2
 800016c:	781a      	ldrb	r2, [r3, #0]
 800016e:	7bfb      	ldrb	r3, [r7, #15]
 8000170:	4413      	add	r3, r2
 8000172:	73fb      	strb	r3, [r7, #15]
		CK_B = CK_B + CK_A;
 8000174:	7bba      	ldrb	r2, [r7, #14]
 8000176:	7bfb      	ldrb	r3, [r7, #15]
 8000178:	4413      	add	r3, r2
 800017a:	73bb      	strb	r3, [r7, #14]
	for(int i=2;i<len-2;i++)
 800017c:	68bb      	ldr	r3, [r7, #8]
 800017e:	3301      	adds	r3, #1
 8000180:	60bb      	str	r3, [r7, #8]
 8000182:	78fb      	ldrb	r3, [r7, #3]
 8000184:	3b02      	subs	r3, #2
 8000186:	68ba      	ldr	r2, [r7, #8]
 8000188:	429a      	cmp	r2, r3
 800018a:	dbec      	blt.n	8000166 <M8N_UBX_CHKSUM_Check+0x1a>
	}

	return ((CK_A == data[len-2]) && (CK_B == data[len-1]));
 800018c:	78fb      	ldrb	r3, [r7, #3]
 800018e:	3b02      	subs	r3, #2
 8000190:	687a      	ldr	r2, [r7, #4]
 8000192:	4413      	add	r3, r2
 8000194:	781b      	ldrb	r3, [r3, #0]
 8000196:	7bfa      	ldrb	r2, [r7, #15]
 8000198:	429a      	cmp	r2, r3
 800019a:	d109      	bne.n	80001b0 <M8N_UBX_CHKSUM_Check+0x64>
 800019c:	78fb      	ldrb	r3, [r7, #3]
 800019e:	3b01      	subs	r3, #1
 80001a0:	687a      	ldr	r2, [r7, #4]
 80001a2:	4413      	add	r3, r2
 80001a4:	781b      	ldrb	r3, [r3, #0]
 80001a6:	7bba      	ldrb	r2, [r7, #14]
 80001a8:	429a      	cmp	r2, r3
 80001aa:	d101      	bne.n	80001b0 <M8N_UBX_CHKSUM_Check+0x64>
 80001ac:	2301      	movs	r3, #1
 80001ae:	e000      	b.n	80001b2 <M8N_UBX_CHKSUM_Check+0x66>
 80001b0:	2300      	movs	r3, #0
 80001b2:	b2db      	uxtb	r3, r3
}
 80001b4:	4618      	mov	r0, r3
 80001b6:	3714      	adds	r7, #20
 80001b8:	46bd      	mov	sp, r7
 80001ba:	bc80      	pop	{r7}
 80001bc:	4770      	bx	lr

080001be <M8N_UBX_NAV_POSLLH_Parsing>:

void M8N_UBX_NAV_POSLLH_Parsing(unsigned char* data, M8N_UBX_NAV_POSLLH* posllh)
{
 80001be:	b480      	push	{r7}
 80001c0:	b083      	sub	sp, #12
 80001c2:	af00      	add	r7, sp, #0
 80001c4:	6078      	str	r0, [r7, #4]
 80001c6:	6039      	str	r1, [r7, #0]
	posllh->CLASS = data[2];
 80001c8:	687b      	ldr	r3, [r7, #4]
 80001ca:	789a      	ldrb	r2, [r3, #2]
 80001cc:	683b      	ldr	r3, [r7, #0]
 80001ce:	701a      	strb	r2, [r3, #0]
	posllh->ID = data[3];
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	78da      	ldrb	r2, [r3, #3]
 80001d4:	683b      	ldr	r3, [r7, #0]
 80001d6:	705a      	strb	r2, [r3, #1]
	posllh->length = data[4] | data[5]<<8;
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	3304      	adds	r3, #4
 80001dc:	781b      	ldrb	r3, [r3, #0]
 80001de:	b21a      	sxth	r2, r3
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	3305      	adds	r3, #5
 80001e4:	781b      	ldrb	r3, [r3, #0]
 80001e6:	021b      	lsls	r3, r3, #8
 80001e8:	b21b      	sxth	r3, r3
 80001ea:	4313      	orrs	r3, r2
 80001ec:	b21b      	sxth	r3, r3
 80001ee:	b29a      	uxth	r2, r3
 80001f0:	683b      	ldr	r3, [r7, #0]
 80001f2:	805a      	strh	r2, [r3, #2]

	posllh->iTOW = data[6] | data[7]<<8 | data[8]<<16 | data[9]<<24;
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	3306      	adds	r3, #6
 80001f8:	781b      	ldrb	r3, [r3, #0]
 80001fa:	461a      	mov	r2, r3
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	3307      	adds	r3, #7
 8000200:	781b      	ldrb	r3, [r3, #0]
 8000202:	021b      	lsls	r3, r3, #8
 8000204:	431a      	orrs	r2, r3
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	3308      	adds	r3, #8
 800020a:	781b      	ldrb	r3, [r3, #0]
 800020c:	041b      	lsls	r3, r3, #16
 800020e:	431a      	orrs	r2, r3
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	3309      	adds	r3, #9
 8000214:	781b      	ldrb	r3, [r3, #0]
 8000216:	061b      	lsls	r3, r3, #24
 8000218:	4313      	orrs	r3, r2
 800021a:	461a      	mov	r2, r3
 800021c:	683b      	ldr	r3, [r7, #0]
 800021e:	605a      	str	r2, [r3, #4]
	posllh->lon = data[10] | data[11]<<8 | data[12]<<16 | data[13]<<24;
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	330a      	adds	r3, #10
 8000224:	781b      	ldrb	r3, [r3, #0]
 8000226:	461a      	mov	r2, r3
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	330b      	adds	r3, #11
 800022c:	781b      	ldrb	r3, [r3, #0]
 800022e:	021b      	lsls	r3, r3, #8
 8000230:	431a      	orrs	r2, r3
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	330c      	adds	r3, #12
 8000236:	781b      	ldrb	r3, [r3, #0]
 8000238:	041b      	lsls	r3, r3, #16
 800023a:	431a      	orrs	r2, r3
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	330d      	adds	r3, #13
 8000240:	781b      	ldrb	r3, [r3, #0]
 8000242:	061b      	lsls	r3, r3, #24
 8000244:	431a      	orrs	r2, r3
 8000246:	683b      	ldr	r3, [r7, #0]
 8000248:	609a      	str	r2, [r3, #8]
	posllh->lat = data[14] | data[15]<<8 | data[16]<<16 | data[17]<<24;
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	330e      	adds	r3, #14
 800024e:	781b      	ldrb	r3, [r3, #0]
 8000250:	461a      	mov	r2, r3
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	330f      	adds	r3, #15
 8000256:	781b      	ldrb	r3, [r3, #0]
 8000258:	021b      	lsls	r3, r3, #8
 800025a:	431a      	orrs	r2, r3
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	3310      	adds	r3, #16
 8000260:	781b      	ldrb	r3, [r3, #0]
 8000262:	041b      	lsls	r3, r3, #16
 8000264:	431a      	orrs	r2, r3
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	3311      	adds	r3, #17
 800026a:	781b      	ldrb	r3, [r3, #0]
 800026c:	061b      	lsls	r3, r3, #24
 800026e:	431a      	orrs	r2, r3
 8000270:	683b      	ldr	r3, [r7, #0]
 8000272:	60da      	str	r2, [r3, #12]
	posllh->height = data[18] | data[19]<<8 | data[20]<<16 | data[21]<<24;
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	3312      	adds	r3, #18
 8000278:	781b      	ldrb	r3, [r3, #0]
 800027a:	461a      	mov	r2, r3
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	3313      	adds	r3, #19
 8000280:	781b      	ldrb	r3, [r3, #0]
 8000282:	021b      	lsls	r3, r3, #8
 8000284:	431a      	orrs	r2, r3
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	3314      	adds	r3, #20
 800028a:	781b      	ldrb	r3, [r3, #0]
 800028c:	041b      	lsls	r3, r3, #16
 800028e:	431a      	orrs	r2, r3
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	3315      	adds	r3, #21
 8000294:	781b      	ldrb	r3, [r3, #0]
 8000296:	061b      	lsls	r3, r3, #24
 8000298:	431a      	orrs	r2, r3
 800029a:	683b      	ldr	r3, [r7, #0]
 800029c:	611a      	str	r2, [r3, #16]
	posllh->hMSL = data[22] | data[23]<<8 | data[24]<<16 | data[25]<<24;
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	3316      	adds	r3, #22
 80002a2:	781b      	ldrb	r3, [r3, #0]
 80002a4:	461a      	mov	r2, r3
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	3317      	adds	r3, #23
 80002aa:	781b      	ldrb	r3, [r3, #0]
 80002ac:	021b      	lsls	r3, r3, #8
 80002ae:	431a      	orrs	r2, r3
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	3318      	adds	r3, #24
 80002b4:	781b      	ldrb	r3, [r3, #0]
 80002b6:	041b      	lsls	r3, r3, #16
 80002b8:	431a      	orrs	r2, r3
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	3319      	adds	r3, #25
 80002be:	781b      	ldrb	r3, [r3, #0]
 80002c0:	061b      	lsls	r3, r3, #24
 80002c2:	431a      	orrs	r2, r3
 80002c4:	683b      	ldr	r3, [r7, #0]
 80002c6:	615a      	str	r2, [r3, #20]
	posllh->hAcc = data[26] | data[27]<<8 | data[28]<<16 | data[29]<<24;
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	331a      	adds	r3, #26
 80002cc:	781b      	ldrb	r3, [r3, #0]
 80002ce:	461a      	mov	r2, r3
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	331b      	adds	r3, #27
 80002d4:	781b      	ldrb	r3, [r3, #0]
 80002d6:	021b      	lsls	r3, r3, #8
 80002d8:	431a      	orrs	r2, r3
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	331c      	adds	r3, #28
 80002de:	781b      	ldrb	r3, [r3, #0]
 80002e0:	041b      	lsls	r3, r3, #16
 80002e2:	431a      	orrs	r2, r3
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	331d      	adds	r3, #29
 80002e8:	781b      	ldrb	r3, [r3, #0]
 80002ea:	061b      	lsls	r3, r3, #24
 80002ec:	4313      	orrs	r3, r2
 80002ee:	461a      	mov	r2, r3
 80002f0:	683b      	ldr	r3, [r7, #0]
 80002f2:	619a      	str	r2, [r3, #24]
	posllh->vAcc = data[30] | data[31]<<8 | data[32]<<16 | data[33]<<24;
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	331e      	adds	r3, #30
 80002f8:	781b      	ldrb	r3, [r3, #0]
 80002fa:	461a      	mov	r2, r3
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	331f      	adds	r3, #31
 8000300:	781b      	ldrb	r3, [r3, #0]
 8000302:	021b      	lsls	r3, r3, #8
 8000304:	431a      	orrs	r2, r3
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	3320      	adds	r3, #32
 800030a:	781b      	ldrb	r3, [r3, #0]
 800030c:	041b      	lsls	r3, r3, #16
 800030e:	431a      	orrs	r2, r3
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	3321      	adds	r3, #33	; 0x21
 8000314:	781b      	ldrb	r3, [r3, #0]
 8000316:	061b      	lsls	r3, r3, #24
 8000318:	4313      	orrs	r3, r2
 800031a:	461a      	mov	r2, r3
 800031c:	683b      	ldr	r3, [r7, #0]
 800031e:	61da      	str	r2, [r3, #28]

//	posllh->lon_f64 = posllh->lon / 10000000.;
//	posllh->lat_f64 = posllh->lat / 10000000.;
}
 8000320:	bf00      	nop
 8000322:	370c      	adds	r7, #12
 8000324:	46bd      	mov	sp, r7
 8000326:	bc80      	pop	{r7}
 8000328:	4770      	bx	lr
	...

0800032c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800032c:	b480      	push	{r7}
 800032e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000330:	4b04      	ldr	r3, [pc, #16]	; (8000344 <__NVIC_GetPriorityGrouping+0x18>)
 8000332:	68db      	ldr	r3, [r3, #12]
 8000334:	0a1b      	lsrs	r3, r3, #8
 8000336:	f003 0307 	and.w	r3, r3, #7
}
 800033a:	4618      	mov	r0, r3
 800033c:	46bd      	mov	sp, r7
 800033e:	bc80      	pop	{r7}
 8000340:	4770      	bx	lr
 8000342:	bf00      	nop
 8000344:	e000ed00 	.word	0xe000ed00

08000348 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000348:	b480      	push	{r7}
 800034a:	b083      	sub	sp, #12
 800034c:	af00      	add	r7, sp, #0
 800034e:	4603      	mov	r3, r0
 8000350:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000356:	2b00      	cmp	r3, #0
 8000358:	db0b      	blt.n	8000372 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800035a:	79fb      	ldrb	r3, [r7, #7]
 800035c:	f003 021f 	and.w	r2, r3, #31
 8000360:	4906      	ldr	r1, [pc, #24]	; (800037c <__NVIC_EnableIRQ+0x34>)
 8000362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000366:	095b      	lsrs	r3, r3, #5
 8000368:	2001      	movs	r0, #1
 800036a:	fa00 f202 	lsl.w	r2, r0, r2
 800036e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000372:	bf00      	nop
 8000374:	370c      	adds	r7, #12
 8000376:	46bd      	mov	sp, r7
 8000378:	bc80      	pop	{r7}
 800037a:	4770      	bx	lr
 800037c:	e000e100 	.word	0xe000e100

08000380 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000380:	b480      	push	{r7}
 8000382:	b083      	sub	sp, #12
 8000384:	af00      	add	r7, sp, #0
 8000386:	4603      	mov	r3, r0
 8000388:	6039      	str	r1, [r7, #0]
 800038a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800038c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000390:	2b00      	cmp	r3, #0
 8000392:	db0a      	blt.n	80003aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000394:	683b      	ldr	r3, [r7, #0]
 8000396:	b2da      	uxtb	r2, r3
 8000398:	490c      	ldr	r1, [pc, #48]	; (80003cc <__NVIC_SetPriority+0x4c>)
 800039a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800039e:	0112      	lsls	r2, r2, #4
 80003a0:	b2d2      	uxtb	r2, r2
 80003a2:	440b      	add	r3, r1
 80003a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80003a8:	e00a      	b.n	80003c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003aa:	683b      	ldr	r3, [r7, #0]
 80003ac:	b2da      	uxtb	r2, r3
 80003ae:	4908      	ldr	r1, [pc, #32]	; (80003d0 <__NVIC_SetPriority+0x50>)
 80003b0:	79fb      	ldrb	r3, [r7, #7]
 80003b2:	f003 030f 	and.w	r3, r3, #15
 80003b6:	3b04      	subs	r3, #4
 80003b8:	0112      	lsls	r2, r2, #4
 80003ba:	b2d2      	uxtb	r2, r2
 80003bc:	440b      	add	r3, r1
 80003be:	761a      	strb	r2, [r3, #24]
}
 80003c0:	bf00      	nop
 80003c2:	370c      	adds	r7, #12
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bc80      	pop	{r7}
 80003c8:	4770      	bx	lr
 80003ca:	bf00      	nop
 80003cc:	e000e100 	.word	0xe000e100
 80003d0:	e000ed00 	.word	0xe000ed00

080003d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80003d4:	b480      	push	{r7}
 80003d6:	b089      	sub	sp, #36	; 0x24
 80003d8:	af00      	add	r7, sp, #0
 80003da:	60f8      	str	r0, [r7, #12]
 80003dc:	60b9      	str	r1, [r7, #8]
 80003de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80003e0:	68fb      	ldr	r3, [r7, #12]
 80003e2:	f003 0307 	and.w	r3, r3, #7
 80003e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80003e8:	69fb      	ldr	r3, [r7, #28]
 80003ea:	f1c3 0307 	rsb	r3, r3, #7
 80003ee:	2b04      	cmp	r3, #4
 80003f0:	bf28      	it	cs
 80003f2:	2304      	movcs	r3, #4
 80003f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80003f6:	69fb      	ldr	r3, [r7, #28]
 80003f8:	3304      	adds	r3, #4
 80003fa:	2b06      	cmp	r3, #6
 80003fc:	d902      	bls.n	8000404 <NVIC_EncodePriority+0x30>
 80003fe:	69fb      	ldr	r3, [r7, #28]
 8000400:	3b03      	subs	r3, #3
 8000402:	e000      	b.n	8000406 <NVIC_EncodePriority+0x32>
 8000404:	2300      	movs	r3, #0
 8000406:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000408:	f04f 32ff 	mov.w	r2, #4294967295
 800040c:	69bb      	ldr	r3, [r7, #24]
 800040e:	fa02 f303 	lsl.w	r3, r2, r3
 8000412:	43da      	mvns	r2, r3
 8000414:	68bb      	ldr	r3, [r7, #8]
 8000416:	401a      	ands	r2, r3
 8000418:	697b      	ldr	r3, [r7, #20]
 800041a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800041c:	f04f 31ff 	mov.w	r1, #4294967295
 8000420:	697b      	ldr	r3, [r7, #20]
 8000422:	fa01 f303 	lsl.w	r3, r1, r3
 8000426:	43d9      	mvns	r1, r3
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800042c:	4313      	orrs	r3, r2
         );
}
 800042e:	4618      	mov	r0, r3
 8000430:	3724      	adds	r7, #36	; 0x24
 8000432:	46bd      	mov	sp, r7
 8000434:	bc80      	pop	{r7}
 8000436:	4770      	bx	lr

08000438 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000438:	b480      	push	{r7}
 800043a:	b083      	sub	sp, #12
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	68db      	ldr	r3, [r3, #12]
 8000444:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	60da      	str	r2, [r3, #12]
}
 800044c:	bf00      	nop
 800044e:	370c      	adds	r7, #12
 8000450:	46bd      	mov	sp, r7
 8000452:	bc80      	pop	{r7}
 8000454:	4770      	bx	lr

08000456 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8000456:	b480      	push	{r7}
 8000458:	b083      	sub	sp, #12
 800045a:	af00      	add	r7, sp, #0
 800045c:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	691b      	ldr	r3, [r3, #16]
 8000462:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	695b      	ldr	r3, [r3, #20]
 800046e:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	615a      	str	r2, [r3, #20]
}
 8000476:	bf00      	nop
 8000478:	370c      	adds	r7, #12
 800047a:	46bd      	mov	sp, r7
 800047c:	bc80      	pop	{r7}
 800047e:	4770      	bx	lr

08000480 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8000480:	b480      	push	{r7}
 8000482:	b089      	sub	sp, #36	; 0x24
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	330c      	adds	r3, #12
 800048c:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800048e:	68fb      	ldr	r3, [r7, #12]
 8000490:	e853 3f00 	ldrex	r3, [r3]
 8000494:	60bb      	str	r3, [r7, #8]
   return(result);
 8000496:	68bb      	ldr	r3, [r7, #8]
 8000498:	f043 0320 	orr.w	r3, r3, #32
 800049c:	61fb      	str	r3, [r7, #28]
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	330c      	adds	r3, #12
 80004a2:	69fa      	ldr	r2, [r7, #28]
 80004a4:	61ba      	str	r2, [r7, #24]
 80004a6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80004a8:	6979      	ldr	r1, [r7, #20]
 80004aa:	69ba      	ldr	r2, [r7, #24]
 80004ac:	e841 2300 	strex	r3, r2, [r1]
 80004b0:	613b      	str	r3, [r7, #16]
   return(result);
 80004b2:	693b      	ldr	r3, [r7, #16]
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d1e7      	bne.n	8000488 <LL_USART_EnableIT_RXNE+0x8>
}
 80004b8:	bf00      	nop
 80004ba:	bf00      	nop
 80004bc:	3724      	adds	r7, #36	; 0x24
 80004be:	46bd      	mov	sp, r7
 80004c0:	bc80      	pop	{r7}
 80004c2:	4770      	bx	lr

080004c4 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004c4:	b480      	push	{r7}
 80004c6:	b085      	sub	sp, #20
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80004cc:	4b08      	ldr	r3, [pc, #32]	; (80004f0 <LL_APB2_GRP1_EnableClock+0x2c>)
 80004ce:	699a      	ldr	r2, [r3, #24]
 80004d0:	4907      	ldr	r1, [pc, #28]	; (80004f0 <LL_APB2_GRP1_EnableClock+0x2c>)
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	4313      	orrs	r3, r2
 80004d6:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80004d8:	4b05      	ldr	r3, [pc, #20]	; (80004f0 <LL_APB2_GRP1_EnableClock+0x2c>)
 80004da:	699a      	ldr	r2, [r3, #24]
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	4013      	ands	r3, r2
 80004e0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004e2:	68fb      	ldr	r3, [r7, #12]
}
 80004e4:	bf00      	nop
 80004e6:	3714      	adds	r7, #20
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bc80      	pop	{r7}
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop
 80004f0:	40021000 	.word	0x40021000

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f8:	f000 fb72 	bl	8000be0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fc:	f000 f834 	bl	8000568 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000500:	f000 f90a 	bl	8000718 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000504:	f000 f876 	bl	80005f4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000508:	f000 f8dc 	bl	80006c4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  LL_USART_EnableIT_RXNE(USART1);
 800050c:	4810      	ldr	r0, [pc, #64]	; (8000550 <main+0x5c>)
 800050e:	f7ff ffb7 	bl	8000480 <LL_USART_EnableIT_RXNE>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(m8n_rx_cplt_flag == 1)
 8000512:	4b10      	ldr	r3, [pc, #64]	; (8000554 <main+0x60>)
 8000514:	781b      	ldrb	r3, [r3, #0]
 8000516:	2b01      	cmp	r3, #1
 8000518:	d1fb      	bne.n	8000512 <main+0x1e>
	  {
		  m8n_rx_cplt_flag = 0;
 800051a:	4b0e      	ldr	r3, [pc, #56]	; (8000554 <main+0x60>)
 800051c:	2200      	movs	r2, #0
 800051e:	701a      	strb	r2, [r3, #0]

		  if(M8N_UBX_CHKSUM_Check(&m8n_rx_buf[0], 36) == 1)
 8000520:	2124      	movs	r1, #36	; 0x24
 8000522:	480d      	ldr	r0, [pc, #52]	; (8000558 <main+0x64>)
 8000524:	f7ff fe12 	bl	800014c <M8N_UBX_CHKSUM_Check>
 8000528:	4603      	mov	r3, r0
 800052a:	2b01      	cmp	r3, #1
 800052c:	d1f1      	bne.n	8000512 <main+0x1e>
		  {
			  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800052e:	2102      	movs	r1, #2
 8000530:	480a      	ldr	r0, [pc, #40]	; (800055c <main+0x68>)
 8000532:	f000 fe37 	bl	80011a4 <HAL_GPIO_TogglePin>
			  M8N_UBX_NAV_POSLLH_Parsing(&m8n_rx_buf[0], &posllh);
 8000536:	490a      	ldr	r1, [pc, #40]	; (8000560 <main+0x6c>)
 8000538:	4807      	ldr	r0, [pc, #28]	; (8000558 <main+0x64>)
 800053a:	f7ff fe40 	bl	80001be <M8N_UBX_NAV_POSLLH_Parsing>
			  printf("LAT: %ld\tLON: %ld\tHeight: %ld\n", posllh.lat, posllh.lon);
 800053e:	4b08      	ldr	r3, [pc, #32]	; (8000560 <main+0x6c>)
 8000540:	68db      	ldr	r3, [r3, #12]
 8000542:	4a07      	ldr	r2, [pc, #28]	; (8000560 <main+0x6c>)
 8000544:	6892      	ldr	r2, [r2, #8]
 8000546:	4619      	mov	r1, r3
 8000548:	4806      	ldr	r0, [pc, #24]	; (8000564 <main+0x70>)
 800054a:	f002 f80d 	bl	8002568 <iprintf>
	  if(m8n_rx_cplt_flag == 1)
 800054e:	e7e0      	b.n	8000512 <main+0x1e>
 8000550:	40013800 	.word	0x40013800
 8000554:	20000086 	.word	0x20000086
 8000558:	20000250 	.word	0x20000250
 800055c:	40010800 	.word	0x40010800
 8000560:	200001d8 	.word	0x200001d8
 8000564:	0800327c 	.word	0x0800327c

08000568 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b090      	sub	sp, #64	; 0x40
 800056c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056e:	f107 0318 	add.w	r3, r7, #24
 8000572:	2228      	movs	r2, #40	; 0x28
 8000574:	2100      	movs	r1, #0
 8000576:	4618      	mov	r0, r3
 8000578:	f002 f84b 	bl	8002612 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800057c:	1d3b      	adds	r3, r7, #4
 800057e:	2200      	movs	r2, #0
 8000580:	601a      	str	r2, [r3, #0]
 8000582:	605a      	str	r2, [r3, #4]
 8000584:	609a      	str	r2, [r3, #8]
 8000586:	60da      	str	r2, [r3, #12]
 8000588:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800058a:	2301      	movs	r3, #1
 800058c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800058e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000592:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000594:	2300      	movs	r3, #0
 8000596:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000598:	2301      	movs	r3, #1
 800059a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800059c:	2302      	movs	r3, #2
 800059e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80005a6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80005aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ac:	f107 0318 	add.w	r3, r7, #24
 80005b0:	4618      	mov	r0, r3
 80005b2:	f000 fe11 	bl	80011d8 <HAL_RCC_OscConfig>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80005bc:	f000 f8fc 	bl	80007b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c0:	230f      	movs	r3, #15
 80005c2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c4:	2302      	movs	r3, #2
 80005c6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c8:	2300      	movs	r3, #0
 80005ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005d2:	2300      	movs	r3, #0
 80005d4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005d6:	1d3b      	adds	r3, r7, #4
 80005d8:	2102      	movs	r1, #2
 80005da:	4618      	mov	r0, r3
 80005dc:	f001 f87e 	bl	80016dc <HAL_RCC_ClockConfig>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <SystemClock_Config+0x82>
  {
    Error_Handler();
 80005e6:	f000 f8e7 	bl	80007b8 <Error_Handler>
  }
}
 80005ea:	bf00      	nop
 80005ec:	3740      	adds	r7, #64	; 0x40
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
	...

080005f4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b08c      	sub	sp, #48	; 0x30
 80005f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80005fa:	f107 0314 	add.w	r3, r7, #20
 80005fe:	2200      	movs	r2, #0
 8000600:	601a      	str	r2, [r3, #0]
 8000602:	605a      	str	r2, [r3, #4]
 8000604:	609a      	str	r2, [r3, #8]
 8000606:	60da      	str	r2, [r3, #12]
 8000608:	611a      	str	r2, [r3, #16]
 800060a:	615a      	str	r2, [r3, #20]
 800060c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800060e:	463b      	mov	r3, r7
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	60da      	str	r2, [r3, #12]
 800061a:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 800061c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000620:	f7ff ff50 	bl	80004c4 <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8000624:	2004      	movs	r0, #4
 8000626:	f7ff ff4d 	bl	80004c4 <LL_APB2_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 800062a:	4b22      	ldr	r3, [pc, #136]	; (80006b4 <MX_USART1_UART_Init+0xc0>)
 800062c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800062e:	2309      	movs	r3, #9
 8000630:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8000632:	2303      	movs	r3, #3
 8000634:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000636:	2300      	movs	r3, #0
 8000638:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800063a:	463b      	mov	r3, r7
 800063c:	4619      	mov	r1, r3
 800063e:	481e      	ldr	r0, [pc, #120]	; (80006b8 <MX_USART1_UART_Init+0xc4>)
 8000640:	f001 fc62 	bl	8001f08 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8000644:	4b1d      	ldr	r3, [pc, #116]	; (80006bc <MX_USART1_UART_Init+0xc8>)
 8000646:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8000648:	2304      	movs	r3, #4
 800064a:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800064c:	463b      	mov	r3, r7
 800064e:	4619      	mov	r1, r3
 8000650:	4819      	ldr	r0, [pc, #100]	; (80006b8 <MX_USART1_UART_Init+0xc4>)
 8000652:	f001 fc59 	bl	8001f08 <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000656:	f7ff fe69 	bl	800032c <__NVIC_GetPriorityGrouping>
 800065a:	4603      	mov	r3, r0
 800065c:	2200      	movs	r2, #0
 800065e:	2100      	movs	r1, #0
 8000660:	4618      	mov	r0, r3
 8000662:	f7ff feb7 	bl	80003d4 <NVIC_EncodePriority>
 8000666:	4603      	mov	r3, r0
 8000668:	4619      	mov	r1, r3
 800066a:	2025      	movs	r0, #37	; 0x25
 800066c:	f7ff fe88 	bl	8000380 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 8000670:	2025      	movs	r0, #37	; 0x25
 8000672:	f7ff fe69 	bl	8000348 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 9600;
 8000676:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 800067a:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800067c:	2300      	movs	r3, #0
 800067e:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000680:	2300      	movs	r3, #0
 8000682:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000684:	2300      	movs	r3, #0
 8000686:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000688:	230c      	movs	r3, #12
 800068a:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800068c:	2300      	movs	r3, #0
 800068e:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000690:	2300      	movs	r3, #0
 8000692:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_USART_Init(USART1, &USART_InitStruct);
 8000694:	f107 0314 	add.w	r3, r7, #20
 8000698:	4619      	mov	r1, r3
 800069a:	4809      	ldr	r0, [pc, #36]	; (80006c0 <MX_USART1_UART_Init+0xcc>)
 800069c:	f001 fe42 	bl	8002324 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 80006a0:	4807      	ldr	r0, [pc, #28]	; (80006c0 <MX_USART1_UART_Init+0xcc>)
 80006a2:	f7ff fed8 	bl	8000456 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 80006a6:	4806      	ldr	r0, [pc, #24]	; (80006c0 <MX_USART1_UART_Init+0xcc>)
 80006a8:	f7ff fec6 	bl	8000438 <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006ac:	bf00      	nop
 80006ae:	3730      	adds	r7, #48	; 0x30
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	04020002 	.word	0x04020002
 80006b8:	40010800 	.word	0x40010800
 80006bc:	04040004 	.word	0x04040004
 80006c0:	40013800 	.word	0x40013800

080006c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006c8:	4b11      	ldr	r3, [pc, #68]	; (8000710 <MX_USART2_UART_Init+0x4c>)
 80006ca:	4a12      	ldr	r2, [pc, #72]	; (8000714 <MX_USART2_UART_Init+0x50>)
 80006cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006ce:	4b10      	ldr	r3, [pc, #64]	; (8000710 <MX_USART2_UART_Init+0x4c>)
 80006d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006d6:	4b0e      	ldr	r3, [pc, #56]	; (8000710 <MX_USART2_UART_Init+0x4c>)
 80006d8:	2200      	movs	r2, #0
 80006da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006dc:	4b0c      	ldr	r3, [pc, #48]	; (8000710 <MX_USART2_UART_Init+0x4c>)
 80006de:	2200      	movs	r2, #0
 80006e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006e2:	4b0b      	ldr	r3, [pc, #44]	; (8000710 <MX_USART2_UART_Init+0x4c>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006e8:	4b09      	ldr	r3, [pc, #36]	; (8000710 <MX_USART2_UART_Init+0x4c>)
 80006ea:	220c      	movs	r2, #12
 80006ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ee:	4b08      	ldr	r3, [pc, #32]	; (8000710 <MX_USART2_UART_Init+0x4c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006f4:	4b06      	ldr	r3, [pc, #24]	; (8000710 <MX_USART2_UART_Init+0x4c>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006fa:	4805      	ldr	r0, [pc, #20]	; (8000710 <MX_USART2_UART_Init+0x4c>)
 80006fc:	f001 f97c 	bl	80019f8 <HAL_UART_Init>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000706:	f000 f857 	bl	80007b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800070a:	bf00      	nop
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	20000208 	.word	0x20000208
 8000714:	40004400 	.word	0x40004400

08000718 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b086      	sub	sp, #24
 800071c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071e:	f107 0308 	add.w	r3, r7, #8
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	605a      	str	r2, [r3, #4]
 8000728:	609a      	str	r2, [r3, #8]
 800072a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800072c:	4b17      	ldr	r3, [pc, #92]	; (800078c <MX_GPIO_Init+0x74>)
 800072e:	699b      	ldr	r3, [r3, #24]
 8000730:	4a16      	ldr	r2, [pc, #88]	; (800078c <MX_GPIO_Init+0x74>)
 8000732:	f043 0320 	orr.w	r3, r3, #32
 8000736:	6193      	str	r3, [r2, #24]
 8000738:	4b14      	ldr	r3, [pc, #80]	; (800078c <MX_GPIO_Init+0x74>)
 800073a:	699b      	ldr	r3, [r3, #24]
 800073c:	f003 0320 	and.w	r3, r3, #32
 8000740:	607b      	str	r3, [r7, #4]
 8000742:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000744:	4b11      	ldr	r3, [pc, #68]	; (800078c <MX_GPIO_Init+0x74>)
 8000746:	699b      	ldr	r3, [r3, #24]
 8000748:	4a10      	ldr	r2, [pc, #64]	; (800078c <MX_GPIO_Init+0x74>)
 800074a:	f043 0304 	orr.w	r3, r3, #4
 800074e:	6193      	str	r3, [r2, #24]
 8000750:	4b0e      	ldr	r3, [pc, #56]	; (800078c <MX_GPIO_Init+0x74>)
 8000752:	699b      	ldr	r3, [r3, #24]
 8000754:	f003 0304 	and.w	r3, r3, #4
 8000758:	603b      	str	r3, [r7, #0]
 800075a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800075c:	2200      	movs	r2, #0
 800075e:	2102      	movs	r1, #2
 8000760:	480b      	ldr	r0, [pc, #44]	; (8000790 <MX_GPIO_Init+0x78>)
 8000762:	f000 fd07 	bl	8001174 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000766:	2302      	movs	r3, #2
 8000768:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800076a:	2301      	movs	r3, #1
 800076c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076e:	2300      	movs	r3, #0
 8000770:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000772:	2302      	movs	r3, #2
 8000774:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000776:	f107 0308 	add.w	r3, r7, #8
 800077a:	4619      	mov	r1, r3
 800077c:	4804      	ldr	r0, [pc, #16]	; (8000790 <MX_GPIO_Init+0x78>)
 800077e:	f000 fb75 	bl	8000e6c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000782:	bf00      	nop
 8000784:	3718      	adds	r7, #24
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	40021000 	.word	0x40021000
 8000790:	40010800 	.word	0x40010800

08000794 <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 800079c:	1d39      	adds	r1, r7, #4
 800079e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007a2:	2201      	movs	r2, #1
 80007a4:	4803      	ldr	r0, [pc, #12]	; (80007b4 <__io_putchar+0x20>)
 80007a6:	f001 f977 	bl	8001a98 <HAL_UART_Transmit>

  return ch;
 80007aa:	687b      	ldr	r3, [r7, #4]
}
 80007ac:	4618      	mov	r0, r3
 80007ae:	3708      	adds	r7, #8
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	20000208 	.word	0x20000208

080007b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80007bc:	b672      	cpsid	i
}
 80007be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007c0:	e7fe      	b.n	80007c0 <Error_Handler+0x8>
	...

080007c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b085      	sub	sp, #20
 80007c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80007ca:	4b15      	ldr	r3, [pc, #84]	; (8000820 <HAL_MspInit+0x5c>)
 80007cc:	699b      	ldr	r3, [r3, #24]
 80007ce:	4a14      	ldr	r2, [pc, #80]	; (8000820 <HAL_MspInit+0x5c>)
 80007d0:	f043 0301 	orr.w	r3, r3, #1
 80007d4:	6193      	str	r3, [r2, #24]
 80007d6:	4b12      	ldr	r3, [pc, #72]	; (8000820 <HAL_MspInit+0x5c>)
 80007d8:	699b      	ldr	r3, [r3, #24]
 80007da:	f003 0301 	and.w	r3, r3, #1
 80007de:	60bb      	str	r3, [r7, #8]
 80007e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007e2:	4b0f      	ldr	r3, [pc, #60]	; (8000820 <HAL_MspInit+0x5c>)
 80007e4:	69db      	ldr	r3, [r3, #28]
 80007e6:	4a0e      	ldr	r2, [pc, #56]	; (8000820 <HAL_MspInit+0x5c>)
 80007e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007ec:	61d3      	str	r3, [r2, #28]
 80007ee:	4b0c      	ldr	r3, [pc, #48]	; (8000820 <HAL_MspInit+0x5c>)
 80007f0:	69db      	ldr	r3, [r3, #28]
 80007f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80007fa:	4b0a      	ldr	r3, [pc, #40]	; (8000824 <HAL_MspInit+0x60>)
 80007fc:	685b      	ldr	r3, [r3, #4]
 80007fe:	60fb      	str	r3, [r7, #12]
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000806:	60fb      	str	r3, [r7, #12]
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800080e:	60fb      	str	r3, [r7, #12]
 8000810:	4a04      	ldr	r2, [pc, #16]	; (8000824 <HAL_MspInit+0x60>)
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000816:	bf00      	nop
 8000818:	3714      	adds	r7, #20
 800081a:	46bd      	mov	sp, r7
 800081c:	bc80      	pop	{r7}
 800081e:	4770      	bx	lr
 8000820:	40021000 	.word	0x40021000
 8000824:	40010000 	.word	0x40010000

08000828 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b088      	sub	sp, #32
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000830:	f107 0310 	add.w	r3, r7, #16
 8000834:	2200      	movs	r2, #0
 8000836:	601a      	str	r2, [r3, #0]
 8000838:	605a      	str	r2, [r3, #4]
 800083a:	609a      	str	r2, [r3, #8]
 800083c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	4a1b      	ldr	r2, [pc, #108]	; (80008b0 <HAL_UART_MspInit+0x88>)
 8000844:	4293      	cmp	r3, r2
 8000846:	d12f      	bne.n	80008a8 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000848:	4b1a      	ldr	r3, [pc, #104]	; (80008b4 <HAL_UART_MspInit+0x8c>)
 800084a:	69db      	ldr	r3, [r3, #28]
 800084c:	4a19      	ldr	r2, [pc, #100]	; (80008b4 <HAL_UART_MspInit+0x8c>)
 800084e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000852:	61d3      	str	r3, [r2, #28]
 8000854:	4b17      	ldr	r3, [pc, #92]	; (80008b4 <HAL_UART_MspInit+0x8c>)
 8000856:	69db      	ldr	r3, [r3, #28]
 8000858:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800085c:	60fb      	str	r3, [r7, #12]
 800085e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000860:	4b14      	ldr	r3, [pc, #80]	; (80008b4 <HAL_UART_MspInit+0x8c>)
 8000862:	699b      	ldr	r3, [r3, #24]
 8000864:	4a13      	ldr	r2, [pc, #76]	; (80008b4 <HAL_UART_MspInit+0x8c>)
 8000866:	f043 0304 	orr.w	r3, r3, #4
 800086a:	6193      	str	r3, [r2, #24]
 800086c:	4b11      	ldr	r3, [pc, #68]	; (80008b4 <HAL_UART_MspInit+0x8c>)
 800086e:	699b      	ldr	r3, [r3, #24]
 8000870:	f003 0304 	and.w	r3, r3, #4
 8000874:	60bb      	str	r3, [r7, #8]
 8000876:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000878:	2304      	movs	r3, #4
 800087a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800087c:	2302      	movs	r3, #2
 800087e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000880:	2303      	movs	r3, #3
 8000882:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000884:	f107 0310 	add.w	r3, r7, #16
 8000888:	4619      	mov	r1, r3
 800088a:	480b      	ldr	r0, [pc, #44]	; (80008b8 <HAL_UART_MspInit+0x90>)
 800088c:	f000 faee 	bl	8000e6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000890:	2308      	movs	r3, #8
 8000892:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000894:	2300      	movs	r3, #0
 8000896:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000898:	2300      	movs	r3, #0
 800089a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800089c:	f107 0310 	add.w	r3, r7, #16
 80008a0:	4619      	mov	r1, r3
 80008a2:	4805      	ldr	r0, [pc, #20]	; (80008b8 <HAL_UART_MspInit+0x90>)
 80008a4:	f000 fae2 	bl	8000e6c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008a8:	bf00      	nop
 80008aa:	3720      	adds	r7, #32
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	40004400 	.word	0x40004400
 80008b4:	40021000 	.word	0x40021000
 80008b8:	40010800 	.word	0x40010800

080008bc <LL_USART_IsActiveFlag_RXNE>:
{
 80008bc:	b480      	push	{r7}
 80008be:	b083      	sub	sp, #12
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	f003 0320 	and.w	r3, r3, #32
 80008cc:	2b20      	cmp	r3, #32
 80008ce:	bf0c      	ite	eq
 80008d0:	2301      	moveq	r3, #1
 80008d2:	2300      	movne	r3, #0
 80008d4:	b2db      	uxtb	r3, r3
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	370c      	adds	r7, #12
 80008da:	46bd      	mov	sp, r7
 80008dc:	bc80      	pop	{r7}
 80008de:	4770      	bx	lr

080008e0 <LL_USART_ClearFlag_RXNE>:
{
 80008e0:	b480      	push	{r7}
 80008e2:	b083      	sub	sp, #12
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_RXNE));
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	f06f 0220 	mvn.w	r2, #32
 80008ee:	601a      	str	r2, [r3, #0]
}
 80008f0:	bf00      	nop
 80008f2:	370c      	adds	r7, #12
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bc80      	pop	{r7}
 80008f8:	4770      	bx	lr

080008fa <LL_USART_ReceiveData8>:
  * @rmtoll DR           DR            LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
 80008fa:	b480      	push	{r7}
 80008fc:	b083      	sub	sp, #12
 80008fe:	af00      	add	r7, sp, #0
 8000900:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	685b      	ldr	r3, [r3, #4]
 8000906:	b2db      	uxtb	r3, r3
}
 8000908:	4618      	mov	r0, r3
 800090a:	370c      	adds	r7, #12
 800090c:	46bd      	mov	sp, r7
 800090e:	bc80      	pop	{r7}
 8000910:	4770      	bx	lr

08000912 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000912:	b480      	push	{r7}
 8000914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000916:	e7fe      	b.n	8000916 <NMI_Handler+0x4>

08000918 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800091c:	e7fe      	b.n	800091c <HardFault_Handler+0x4>

0800091e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800091e:	b480      	push	{r7}
 8000920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000922:	e7fe      	b.n	8000922 <MemManage_Handler+0x4>

08000924 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000928:	e7fe      	b.n	8000928 <BusFault_Handler+0x4>

0800092a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800092a:	b480      	push	{r7}
 800092c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800092e:	e7fe      	b.n	800092e <UsageFault_Handler+0x4>

08000930 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000934:	bf00      	nop
 8000936:	46bd      	mov	sp, r7
 8000938:	bc80      	pop	{r7}
 800093a:	4770      	bx	lr

0800093c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000940:	bf00      	nop
 8000942:	46bd      	mov	sp, r7
 8000944:	bc80      	pop	{r7}
 8000946:	4770      	bx	lr

08000948 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800094c:	bf00      	nop
 800094e:	46bd      	mov	sp, r7
 8000950:	bc80      	pop	{r7}
 8000952:	4770      	bx	lr

08000954 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000958:	f000 f988 	bl	8000c6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800095c:	bf00      	nop
 800095e:	bd80      	pop	{r7, pc}

08000960 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	static unsigned char count = 0;

	if(LL_USART_IsActiveFlag_RXNE(USART1)){
 8000964:	4832      	ldr	r0, [pc, #200]	; (8000a30 <USART1_IRQHandler+0xd0>)
 8000966:	f7ff ffa9 	bl	80008bc <LL_USART_IsActiveFlag_RXNE>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d05c      	beq.n	8000a2a <USART1_IRQHandler+0xca>
		LL_USART_ClearFlag_RXNE(USART1);
 8000970:	482f      	ldr	r0, [pc, #188]	; (8000a30 <USART1_IRQHandler+0xd0>)
 8000972:	f7ff ffb5 	bl	80008e0 <LL_USART_ClearFlag_RXNE>
		uart1_rx_data = LL_USART_ReceiveData8(USART1);
 8000976:	482e      	ldr	r0, [pc, #184]	; (8000a30 <USART1_IRQHandler+0xd0>)
 8000978:	f7ff ffbf 	bl	80008fa <LL_USART_ReceiveData8>
 800097c:	4603      	mov	r3, r0
 800097e:	461a      	mov	r2, r3
 8000980:	4b2c      	ldr	r3, [pc, #176]	; (8000a34 <USART1_IRQHandler+0xd4>)
 8000982:	701a      	strb	r2, [r3, #0]
		uart1_rx_flag = 1;
 8000984:	4b2c      	ldr	r3, [pc, #176]	; (8000a38 <USART1_IRQHandler+0xd8>)
 8000986:	2201      	movs	r2, #1
 8000988:	701a      	strb	r2, [r3, #0]

		switch(count)
 800098a:	4b2c      	ldr	r3, [pc, #176]	; (8000a3c <USART1_IRQHandler+0xdc>)
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	2b23      	cmp	r3, #35	; 0x23
 8000990:	d02e      	beq.n	80009f0 <USART1_IRQHandler+0x90>
 8000992:	2b23      	cmp	r3, #35	; 0x23
 8000994:	dc3a      	bgt.n	8000a0c <USART1_IRQHandler+0xac>
 8000996:	2b00      	cmp	r3, #0
 8000998:	d002      	beq.n	80009a0 <USART1_IRQHandler+0x40>
 800099a:	2b01      	cmp	r3, #1
 800099c:	d012      	beq.n	80009c4 <USART1_IRQHandler+0x64>
 800099e:	e035      	b.n	8000a0c <USART1_IRQHandler+0xac>
		{
		case 0:
			if(uart1_rx_data == 0xb5){
 80009a0:	4b24      	ldr	r3, [pc, #144]	; (8000a34 <USART1_IRQHandler+0xd4>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	2bb5      	cmp	r3, #181	; 0xb5
 80009a6:	d13f      	bne.n	8000a28 <USART1_IRQHandler+0xc8>
				m8n_rx_buf[count] = uart1_rx_data;
 80009a8:	4b24      	ldr	r3, [pc, #144]	; (8000a3c <USART1_IRQHandler+0xdc>)
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	461a      	mov	r2, r3
 80009ae:	4b21      	ldr	r3, [pc, #132]	; (8000a34 <USART1_IRQHandler+0xd4>)
 80009b0:	7819      	ldrb	r1, [r3, #0]
 80009b2:	4b23      	ldr	r3, [pc, #140]	; (8000a40 <USART1_IRQHandler+0xe0>)
 80009b4:	5499      	strb	r1, [r3, r2]
				count++;
 80009b6:	4b21      	ldr	r3, [pc, #132]	; (8000a3c <USART1_IRQHandler+0xdc>)
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	3301      	adds	r3, #1
 80009bc:	b2da      	uxtb	r2, r3
 80009be:	4b1f      	ldr	r3, [pc, #124]	; (8000a3c <USART1_IRQHandler+0xdc>)
 80009c0:	701a      	strb	r2, [r3, #0]
			}
			break;
 80009c2:	e031      	b.n	8000a28 <USART1_IRQHandler+0xc8>
		case 1:
			if(uart1_rx_data == 0x62){
 80009c4:	4b1b      	ldr	r3, [pc, #108]	; (8000a34 <USART1_IRQHandler+0xd4>)
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	2b62      	cmp	r3, #98	; 0x62
 80009ca:	d10d      	bne.n	80009e8 <USART1_IRQHandler+0x88>
				m8n_rx_buf[count] = uart1_rx_data;
 80009cc:	4b1b      	ldr	r3, [pc, #108]	; (8000a3c <USART1_IRQHandler+0xdc>)
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	461a      	mov	r2, r3
 80009d2:	4b18      	ldr	r3, [pc, #96]	; (8000a34 <USART1_IRQHandler+0xd4>)
 80009d4:	7819      	ldrb	r1, [r3, #0]
 80009d6:	4b1a      	ldr	r3, [pc, #104]	; (8000a40 <USART1_IRQHandler+0xe0>)
 80009d8:	5499      	strb	r1, [r3, r2]
				count++;
 80009da:	4b18      	ldr	r3, [pc, #96]	; (8000a3c <USART1_IRQHandler+0xdc>)
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	3301      	adds	r3, #1
 80009e0:	b2da      	uxtb	r2, r3
 80009e2:	4b16      	ldr	r3, [pc, #88]	; (8000a3c <USART1_IRQHandler+0xdc>)
 80009e4:	701a      	strb	r2, [r3, #0]
			}
			else
				count = 0;
			break;
 80009e6:	e020      	b.n	8000a2a <USART1_IRQHandler+0xca>
				count = 0;
 80009e8:	4b14      	ldr	r3, [pc, #80]	; (8000a3c <USART1_IRQHandler+0xdc>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	701a      	strb	r2, [r3, #0]
			break;
 80009ee:	e01c      	b.n	8000a2a <USART1_IRQHandler+0xca>
		case 35:
			m8n_rx_buf[count] = uart1_rx_data;
 80009f0:	4b12      	ldr	r3, [pc, #72]	; (8000a3c <USART1_IRQHandler+0xdc>)
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	461a      	mov	r2, r3
 80009f6:	4b0f      	ldr	r3, [pc, #60]	; (8000a34 <USART1_IRQHandler+0xd4>)
 80009f8:	7819      	ldrb	r1, [r3, #0]
 80009fa:	4b11      	ldr	r3, [pc, #68]	; (8000a40 <USART1_IRQHandler+0xe0>)
 80009fc:	5499      	strb	r1, [r3, r2]
			count = 0;
 80009fe:	4b0f      	ldr	r3, [pc, #60]	; (8000a3c <USART1_IRQHandler+0xdc>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	701a      	strb	r2, [r3, #0]
			m8n_rx_cplt_flag = 1;
 8000a04:	4b0f      	ldr	r3, [pc, #60]	; (8000a44 <USART1_IRQHandler+0xe4>)
 8000a06:	2201      	movs	r2, #1
 8000a08:	701a      	strb	r2, [r3, #0]
			break;
 8000a0a:	e00e      	b.n	8000a2a <USART1_IRQHandler+0xca>
		default:
			m8n_rx_buf[count] = uart1_rx_data;
 8000a0c:	4b0b      	ldr	r3, [pc, #44]	; (8000a3c <USART1_IRQHandler+0xdc>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	461a      	mov	r2, r3
 8000a12:	4b08      	ldr	r3, [pc, #32]	; (8000a34 <USART1_IRQHandler+0xd4>)
 8000a14:	7819      	ldrb	r1, [r3, #0]
 8000a16:	4b0a      	ldr	r3, [pc, #40]	; (8000a40 <USART1_IRQHandler+0xe0>)
 8000a18:	5499      	strb	r1, [r3, r2]
			count++;
 8000a1a:	4b08      	ldr	r3, [pc, #32]	; (8000a3c <USART1_IRQHandler+0xdc>)
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	3301      	adds	r3, #1
 8000a20:	b2da      	uxtb	r2, r3
 8000a22:	4b06      	ldr	r3, [pc, #24]	; (8000a3c <USART1_IRQHandler+0xdc>)
 8000a24:	701a      	strb	r2, [r3, #0]
			break;
 8000a26:	e000      	b.n	8000a2a <USART1_IRQHandler+0xca>
			break;
 8000a28:	bf00      	nop
	}
  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000a2a:	bf00      	nop
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	40013800 	.word	0x40013800
 8000a34:	20000085 	.word	0x20000085
 8000a38:	20000084 	.word	0x20000084
 8000a3c:	20000087 	.word	0x20000087
 8000a40:	20000250 	.word	0x20000250
 8000a44:	20000086 	.word	0x20000086

08000a48 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b086      	sub	sp, #24
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	60f8      	str	r0, [r7, #12]
 8000a50:	60b9      	str	r1, [r7, #8]
 8000a52:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a54:	2300      	movs	r3, #0
 8000a56:	617b      	str	r3, [r7, #20]
 8000a58:	e00a      	b.n	8000a70 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a5a:	f3af 8000 	nop.w
 8000a5e:	4601      	mov	r1, r0
 8000a60:	68bb      	ldr	r3, [r7, #8]
 8000a62:	1c5a      	adds	r2, r3, #1
 8000a64:	60ba      	str	r2, [r7, #8]
 8000a66:	b2ca      	uxtb	r2, r1
 8000a68:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a6a:	697b      	ldr	r3, [r7, #20]
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	617b      	str	r3, [r7, #20]
 8000a70:	697a      	ldr	r2, [r7, #20]
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	429a      	cmp	r2, r3
 8000a76:	dbf0      	blt.n	8000a5a <_read+0x12>
  }

  return len;
 8000a78:	687b      	ldr	r3, [r7, #4]
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	3718      	adds	r7, #24
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}

08000a82 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a82:	b580      	push	{r7, lr}
 8000a84:	b086      	sub	sp, #24
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	60f8      	str	r0, [r7, #12]
 8000a8a:	60b9      	str	r1, [r7, #8]
 8000a8c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a8e:	2300      	movs	r3, #0
 8000a90:	617b      	str	r3, [r7, #20]
 8000a92:	e009      	b.n	8000aa8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a94:	68bb      	ldr	r3, [r7, #8]
 8000a96:	1c5a      	adds	r2, r3, #1
 8000a98:	60ba      	str	r2, [r7, #8]
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f7ff fe79 	bl	8000794 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aa2:	697b      	ldr	r3, [r7, #20]
 8000aa4:	3301      	adds	r3, #1
 8000aa6:	617b      	str	r3, [r7, #20]
 8000aa8:	697a      	ldr	r2, [r7, #20]
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	429a      	cmp	r2, r3
 8000aae:	dbf1      	blt.n	8000a94 <_write+0x12>
  }
  return len;
 8000ab0:	687b      	ldr	r3, [r7, #4]
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3718      	adds	r7, #24
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}

08000aba <_close>:

int _close(int file)
{
 8000aba:	b480      	push	{r7}
 8000abc:	b083      	sub	sp, #12
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ac2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	370c      	adds	r7, #12
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bc80      	pop	{r7}
 8000ace:	4770      	bx	lr

08000ad0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
 8000ad8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ae0:	605a      	str	r2, [r3, #4]
  return 0;
 8000ae2:	2300      	movs	r3, #0
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	370c      	adds	r7, #12
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bc80      	pop	{r7}
 8000aec:	4770      	bx	lr

08000aee <_isatty>:

int _isatty(int file)
{
 8000aee:	b480      	push	{r7}
 8000af0:	b083      	sub	sp, #12
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000af6:	2301      	movs	r3, #1
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	370c      	adds	r7, #12
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bc80      	pop	{r7}
 8000b00:	4770      	bx	lr

08000b02 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b02:	b480      	push	{r7}
 8000b04:	b085      	sub	sp, #20
 8000b06:	af00      	add	r7, sp, #0
 8000b08:	60f8      	str	r0, [r7, #12]
 8000b0a:	60b9      	str	r1, [r7, #8]
 8000b0c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b0e:	2300      	movs	r3, #0
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	3714      	adds	r7, #20
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bc80      	pop	{r7}
 8000b18:	4770      	bx	lr
	...

08000b1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b086      	sub	sp, #24
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b24:	4a14      	ldr	r2, [pc, #80]	; (8000b78 <_sbrk+0x5c>)
 8000b26:	4b15      	ldr	r3, [pc, #84]	; (8000b7c <_sbrk+0x60>)
 8000b28:	1ad3      	subs	r3, r2, r3
 8000b2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b30:	4b13      	ldr	r3, [pc, #76]	; (8000b80 <_sbrk+0x64>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d102      	bne.n	8000b3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b38:	4b11      	ldr	r3, [pc, #68]	; (8000b80 <_sbrk+0x64>)
 8000b3a:	4a12      	ldr	r2, [pc, #72]	; (8000b84 <_sbrk+0x68>)
 8000b3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b3e:	4b10      	ldr	r3, [pc, #64]	; (8000b80 <_sbrk+0x64>)
 8000b40:	681a      	ldr	r2, [r3, #0]
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	4413      	add	r3, r2
 8000b46:	693a      	ldr	r2, [r7, #16]
 8000b48:	429a      	cmp	r2, r3
 8000b4a:	d207      	bcs.n	8000b5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b4c:	f001 fdb0 	bl	80026b0 <__errno>
 8000b50:	4603      	mov	r3, r0
 8000b52:	220c      	movs	r2, #12
 8000b54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b56:	f04f 33ff 	mov.w	r3, #4294967295
 8000b5a:	e009      	b.n	8000b70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b5c:	4b08      	ldr	r3, [pc, #32]	; (8000b80 <_sbrk+0x64>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b62:	4b07      	ldr	r3, [pc, #28]	; (8000b80 <_sbrk+0x64>)
 8000b64:	681a      	ldr	r2, [r3, #0]
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	4413      	add	r3, r2
 8000b6a:	4a05      	ldr	r2, [pc, #20]	; (8000b80 <_sbrk+0x64>)
 8000b6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b6e:	68fb      	ldr	r3, [r7, #12]
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	3718      	adds	r7, #24
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	20005000 	.word	0x20005000
 8000b7c:	00000400 	.word	0x00000400
 8000b80:	20000088 	.word	0x20000088
 8000b84:	20000278 	.word	0x20000278

08000b88 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b8c:	bf00      	nop
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bc80      	pop	{r7}
 8000b92:	4770      	bx	lr

08000b94 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b94:	f7ff fff8 	bl	8000b88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b98:	480b      	ldr	r0, [pc, #44]	; (8000bc8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000b9a:	490c      	ldr	r1, [pc, #48]	; (8000bcc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000b9c:	4a0c      	ldr	r2, [pc, #48]	; (8000bd0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000b9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ba0:	e002      	b.n	8000ba8 <LoopCopyDataInit>

08000ba2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ba2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ba4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ba6:	3304      	adds	r3, #4

08000ba8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ba8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000baa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bac:	d3f9      	bcc.n	8000ba2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bae:	4a09      	ldr	r2, [pc, #36]	; (8000bd4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000bb0:	4c09      	ldr	r4, [pc, #36]	; (8000bd8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bb4:	e001      	b.n	8000bba <LoopFillZerobss>

08000bb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bb8:	3204      	adds	r2, #4

08000bba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bbc:	d3fb      	bcc.n	8000bb6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bbe:	f001 fd7d 	bl	80026bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bc2:	f7ff fc97 	bl	80004f4 <main>
  bx lr
 8000bc6:	4770      	bx	lr
  ldr r0, =_sdata
 8000bc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bcc:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000bd0:	08003304 	.word	0x08003304
  ldr r2, =_sbss
 8000bd4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000bd8:	20000278 	.word	0x20000278

08000bdc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bdc:	e7fe      	b.n	8000bdc <ADC1_2_IRQHandler>
	...

08000be0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000be4:	4b08      	ldr	r3, [pc, #32]	; (8000c08 <HAL_Init+0x28>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a07      	ldr	r2, [pc, #28]	; (8000c08 <HAL_Init+0x28>)
 8000bea:	f043 0310 	orr.w	r3, r3, #16
 8000bee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bf0:	2003      	movs	r0, #3
 8000bf2:	f000 f907 	bl	8000e04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bf6:	2000      	movs	r0, #0
 8000bf8:	f000 f808 	bl	8000c0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bfc:	f7ff fde2 	bl	80007c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c00:	2300      	movs	r3, #0
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	40022000 	.word	0x40022000

08000c0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c14:	4b12      	ldr	r3, [pc, #72]	; (8000c60 <HAL_InitTick+0x54>)
 8000c16:	681a      	ldr	r2, [r3, #0]
 8000c18:	4b12      	ldr	r3, [pc, #72]	; (8000c64 <HAL_InitTick+0x58>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c22:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f000 f911 	bl	8000e52 <HAL_SYSTICK_Config>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c36:	2301      	movs	r3, #1
 8000c38:	e00e      	b.n	8000c58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	2b0f      	cmp	r3, #15
 8000c3e:	d80a      	bhi.n	8000c56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c40:	2200      	movs	r2, #0
 8000c42:	6879      	ldr	r1, [r7, #4]
 8000c44:	f04f 30ff 	mov.w	r0, #4294967295
 8000c48:	f000 f8e7 	bl	8000e1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c4c:	4a06      	ldr	r2, [pc, #24]	; (8000c68 <HAL_InitTick+0x5c>)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c52:	2300      	movs	r3, #0
 8000c54:	e000      	b.n	8000c58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c56:	2301      	movs	r3, #1
}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	3708      	adds	r7, #8
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	20000000 	.word	0x20000000
 8000c64:	20000008 	.word	0x20000008
 8000c68:	20000004 	.word	0x20000004

08000c6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c70:	4b05      	ldr	r3, [pc, #20]	; (8000c88 <HAL_IncTick+0x1c>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	461a      	mov	r2, r3
 8000c76:	4b05      	ldr	r3, [pc, #20]	; (8000c8c <HAL_IncTick+0x20>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4413      	add	r3, r2
 8000c7c:	4a03      	ldr	r2, [pc, #12]	; (8000c8c <HAL_IncTick+0x20>)
 8000c7e:	6013      	str	r3, [r2, #0]
}
 8000c80:	bf00      	nop
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bc80      	pop	{r7}
 8000c86:	4770      	bx	lr
 8000c88:	20000008 	.word	0x20000008
 8000c8c:	20000274 	.word	0x20000274

08000c90 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  return uwTick;
 8000c94:	4b02      	ldr	r3, [pc, #8]	; (8000ca0 <HAL_GetTick+0x10>)
 8000c96:	681b      	ldr	r3, [r3, #0]
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bc80      	pop	{r7}
 8000c9e:	4770      	bx	lr
 8000ca0:	20000274 	.word	0x20000274

08000ca4 <__NVIC_SetPriorityGrouping>:
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b085      	sub	sp, #20
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	f003 0307 	and.w	r3, r3, #7
 8000cb2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cb4:	4b0c      	ldr	r3, [pc, #48]	; (8000ce8 <__NVIC_SetPriorityGrouping+0x44>)
 8000cb6:	68db      	ldr	r3, [r3, #12]
 8000cb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cba:	68ba      	ldr	r2, [r7, #8]
 8000cbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ccc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cd6:	4a04      	ldr	r2, [pc, #16]	; (8000ce8 <__NVIC_SetPriorityGrouping+0x44>)
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	60d3      	str	r3, [r2, #12]
}
 8000cdc:	bf00      	nop
 8000cde:	3714      	adds	r7, #20
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bc80      	pop	{r7}
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	e000ed00 	.word	0xe000ed00

08000cec <__NVIC_GetPriorityGrouping>:
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cf0:	4b04      	ldr	r3, [pc, #16]	; (8000d04 <__NVIC_GetPriorityGrouping+0x18>)
 8000cf2:	68db      	ldr	r3, [r3, #12]
 8000cf4:	0a1b      	lsrs	r3, r3, #8
 8000cf6:	f003 0307 	and.w	r3, r3, #7
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bc80      	pop	{r7}
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	e000ed00 	.word	0xe000ed00

08000d08 <__NVIC_SetPriority>:
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	4603      	mov	r3, r0
 8000d10:	6039      	str	r1, [r7, #0]
 8000d12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	db0a      	blt.n	8000d32 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	b2da      	uxtb	r2, r3
 8000d20:	490c      	ldr	r1, [pc, #48]	; (8000d54 <__NVIC_SetPriority+0x4c>)
 8000d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d26:	0112      	lsls	r2, r2, #4
 8000d28:	b2d2      	uxtb	r2, r2
 8000d2a:	440b      	add	r3, r1
 8000d2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000d30:	e00a      	b.n	8000d48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	b2da      	uxtb	r2, r3
 8000d36:	4908      	ldr	r1, [pc, #32]	; (8000d58 <__NVIC_SetPriority+0x50>)
 8000d38:	79fb      	ldrb	r3, [r7, #7]
 8000d3a:	f003 030f 	and.w	r3, r3, #15
 8000d3e:	3b04      	subs	r3, #4
 8000d40:	0112      	lsls	r2, r2, #4
 8000d42:	b2d2      	uxtb	r2, r2
 8000d44:	440b      	add	r3, r1
 8000d46:	761a      	strb	r2, [r3, #24]
}
 8000d48:	bf00      	nop
 8000d4a:	370c      	adds	r7, #12
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bc80      	pop	{r7}
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	e000e100 	.word	0xe000e100
 8000d58:	e000ed00 	.word	0xe000ed00

08000d5c <NVIC_EncodePriority>:
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b089      	sub	sp, #36	; 0x24
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	60f8      	str	r0, [r7, #12]
 8000d64:	60b9      	str	r1, [r7, #8]
 8000d66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	f003 0307 	and.w	r3, r3, #7
 8000d6e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d70:	69fb      	ldr	r3, [r7, #28]
 8000d72:	f1c3 0307 	rsb	r3, r3, #7
 8000d76:	2b04      	cmp	r3, #4
 8000d78:	bf28      	it	cs
 8000d7a:	2304      	movcs	r3, #4
 8000d7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	3304      	adds	r3, #4
 8000d82:	2b06      	cmp	r3, #6
 8000d84:	d902      	bls.n	8000d8c <NVIC_EncodePriority+0x30>
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	3b03      	subs	r3, #3
 8000d8a:	e000      	b.n	8000d8e <NVIC_EncodePriority+0x32>
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d90:	f04f 32ff 	mov.w	r2, #4294967295
 8000d94:	69bb      	ldr	r3, [r7, #24]
 8000d96:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9a:	43da      	mvns	r2, r3
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	401a      	ands	r2, r3
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000da4:	f04f 31ff 	mov.w	r1, #4294967295
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	fa01 f303 	lsl.w	r3, r1, r3
 8000dae:	43d9      	mvns	r1, r3
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db4:	4313      	orrs	r3, r2
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3724      	adds	r7, #36	; 0x24
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bc80      	pop	{r7}
 8000dbe:	4770      	bx	lr

08000dc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	3b01      	subs	r3, #1
 8000dcc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dd0:	d301      	bcc.n	8000dd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	e00f      	b.n	8000df6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dd6:	4a0a      	ldr	r2, [pc, #40]	; (8000e00 <SysTick_Config+0x40>)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	3b01      	subs	r3, #1
 8000ddc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dde:	210f      	movs	r1, #15
 8000de0:	f04f 30ff 	mov.w	r0, #4294967295
 8000de4:	f7ff ff90 	bl	8000d08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000de8:	4b05      	ldr	r3, [pc, #20]	; (8000e00 <SysTick_Config+0x40>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dee:	4b04      	ldr	r3, [pc, #16]	; (8000e00 <SysTick_Config+0x40>)
 8000df0:	2207      	movs	r2, #7
 8000df2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000df4:	2300      	movs	r3, #0
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3708      	adds	r7, #8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	e000e010 	.word	0xe000e010

08000e04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e0c:	6878      	ldr	r0, [r7, #4]
 8000e0e:	f7ff ff49 	bl	8000ca4 <__NVIC_SetPriorityGrouping>
}
 8000e12:	bf00      	nop
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b086      	sub	sp, #24
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	4603      	mov	r3, r0
 8000e22:	60b9      	str	r1, [r7, #8]
 8000e24:	607a      	str	r2, [r7, #4]
 8000e26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e2c:	f7ff ff5e 	bl	8000cec <__NVIC_GetPriorityGrouping>
 8000e30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e32:	687a      	ldr	r2, [r7, #4]
 8000e34:	68b9      	ldr	r1, [r7, #8]
 8000e36:	6978      	ldr	r0, [r7, #20]
 8000e38:	f7ff ff90 	bl	8000d5c <NVIC_EncodePriority>
 8000e3c:	4602      	mov	r2, r0
 8000e3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e42:	4611      	mov	r1, r2
 8000e44:	4618      	mov	r0, r3
 8000e46:	f7ff ff5f 	bl	8000d08 <__NVIC_SetPriority>
}
 8000e4a:	bf00      	nop
 8000e4c:	3718      	adds	r7, #24
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}

08000e52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e52:	b580      	push	{r7, lr}
 8000e54:	b082      	sub	sp, #8
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e5a:	6878      	ldr	r0, [r7, #4]
 8000e5c:	f7ff ffb0 	bl	8000dc0 <SysTick_Config>
 8000e60:	4603      	mov	r3, r0
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
	...

08000e6c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b08b      	sub	sp, #44	; 0x2c
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
 8000e74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e76:	2300      	movs	r3, #0
 8000e78:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e7e:	e169      	b.n	8001154 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000e80:	2201      	movs	r2, #1
 8000e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e84:	fa02 f303 	lsl.w	r3, r2, r3
 8000e88:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	69fa      	ldr	r2, [r7, #28]
 8000e90:	4013      	ands	r3, r2
 8000e92:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000e94:	69ba      	ldr	r2, [r7, #24]
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	429a      	cmp	r2, r3
 8000e9a:	f040 8158 	bne.w	800114e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	4a9a      	ldr	r2, [pc, #616]	; (800110c <HAL_GPIO_Init+0x2a0>)
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	d05e      	beq.n	8000f66 <HAL_GPIO_Init+0xfa>
 8000ea8:	4a98      	ldr	r2, [pc, #608]	; (800110c <HAL_GPIO_Init+0x2a0>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d875      	bhi.n	8000f9a <HAL_GPIO_Init+0x12e>
 8000eae:	4a98      	ldr	r2, [pc, #608]	; (8001110 <HAL_GPIO_Init+0x2a4>)
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	d058      	beq.n	8000f66 <HAL_GPIO_Init+0xfa>
 8000eb4:	4a96      	ldr	r2, [pc, #600]	; (8001110 <HAL_GPIO_Init+0x2a4>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d86f      	bhi.n	8000f9a <HAL_GPIO_Init+0x12e>
 8000eba:	4a96      	ldr	r2, [pc, #600]	; (8001114 <HAL_GPIO_Init+0x2a8>)
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	d052      	beq.n	8000f66 <HAL_GPIO_Init+0xfa>
 8000ec0:	4a94      	ldr	r2, [pc, #592]	; (8001114 <HAL_GPIO_Init+0x2a8>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d869      	bhi.n	8000f9a <HAL_GPIO_Init+0x12e>
 8000ec6:	4a94      	ldr	r2, [pc, #592]	; (8001118 <HAL_GPIO_Init+0x2ac>)
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d04c      	beq.n	8000f66 <HAL_GPIO_Init+0xfa>
 8000ecc:	4a92      	ldr	r2, [pc, #584]	; (8001118 <HAL_GPIO_Init+0x2ac>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d863      	bhi.n	8000f9a <HAL_GPIO_Init+0x12e>
 8000ed2:	4a92      	ldr	r2, [pc, #584]	; (800111c <HAL_GPIO_Init+0x2b0>)
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d046      	beq.n	8000f66 <HAL_GPIO_Init+0xfa>
 8000ed8:	4a90      	ldr	r2, [pc, #576]	; (800111c <HAL_GPIO_Init+0x2b0>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d85d      	bhi.n	8000f9a <HAL_GPIO_Init+0x12e>
 8000ede:	2b12      	cmp	r3, #18
 8000ee0:	d82a      	bhi.n	8000f38 <HAL_GPIO_Init+0xcc>
 8000ee2:	2b12      	cmp	r3, #18
 8000ee4:	d859      	bhi.n	8000f9a <HAL_GPIO_Init+0x12e>
 8000ee6:	a201      	add	r2, pc, #4	; (adr r2, 8000eec <HAL_GPIO_Init+0x80>)
 8000ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000eec:	08000f67 	.word	0x08000f67
 8000ef0:	08000f41 	.word	0x08000f41
 8000ef4:	08000f53 	.word	0x08000f53
 8000ef8:	08000f95 	.word	0x08000f95
 8000efc:	08000f9b 	.word	0x08000f9b
 8000f00:	08000f9b 	.word	0x08000f9b
 8000f04:	08000f9b 	.word	0x08000f9b
 8000f08:	08000f9b 	.word	0x08000f9b
 8000f0c:	08000f9b 	.word	0x08000f9b
 8000f10:	08000f9b 	.word	0x08000f9b
 8000f14:	08000f9b 	.word	0x08000f9b
 8000f18:	08000f9b 	.word	0x08000f9b
 8000f1c:	08000f9b 	.word	0x08000f9b
 8000f20:	08000f9b 	.word	0x08000f9b
 8000f24:	08000f9b 	.word	0x08000f9b
 8000f28:	08000f9b 	.word	0x08000f9b
 8000f2c:	08000f9b 	.word	0x08000f9b
 8000f30:	08000f49 	.word	0x08000f49
 8000f34:	08000f5d 	.word	0x08000f5d
 8000f38:	4a79      	ldr	r2, [pc, #484]	; (8001120 <HAL_GPIO_Init+0x2b4>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d013      	beq.n	8000f66 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000f3e:	e02c      	b.n	8000f9a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	68db      	ldr	r3, [r3, #12]
 8000f44:	623b      	str	r3, [r7, #32]
          break;
 8000f46:	e029      	b.n	8000f9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	68db      	ldr	r3, [r3, #12]
 8000f4c:	3304      	adds	r3, #4
 8000f4e:	623b      	str	r3, [r7, #32]
          break;
 8000f50:	e024      	b.n	8000f9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	68db      	ldr	r3, [r3, #12]
 8000f56:	3308      	adds	r3, #8
 8000f58:	623b      	str	r3, [r7, #32]
          break;
 8000f5a:	e01f      	b.n	8000f9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	330c      	adds	r3, #12
 8000f62:	623b      	str	r3, [r7, #32]
          break;
 8000f64:	e01a      	b.n	8000f9c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	689b      	ldr	r3, [r3, #8]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d102      	bne.n	8000f74 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f6e:	2304      	movs	r3, #4
 8000f70:	623b      	str	r3, [r7, #32]
          break;
 8000f72:	e013      	b.n	8000f9c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	689b      	ldr	r3, [r3, #8]
 8000f78:	2b01      	cmp	r3, #1
 8000f7a:	d105      	bne.n	8000f88 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f7c:	2308      	movs	r3, #8
 8000f7e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	69fa      	ldr	r2, [r7, #28]
 8000f84:	611a      	str	r2, [r3, #16]
          break;
 8000f86:	e009      	b.n	8000f9c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f88:	2308      	movs	r3, #8
 8000f8a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	69fa      	ldr	r2, [r7, #28]
 8000f90:	615a      	str	r2, [r3, #20]
          break;
 8000f92:	e003      	b.n	8000f9c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000f94:	2300      	movs	r3, #0
 8000f96:	623b      	str	r3, [r7, #32]
          break;
 8000f98:	e000      	b.n	8000f9c <HAL_GPIO_Init+0x130>
          break;
 8000f9a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f9c:	69bb      	ldr	r3, [r7, #24]
 8000f9e:	2bff      	cmp	r3, #255	; 0xff
 8000fa0:	d801      	bhi.n	8000fa6 <HAL_GPIO_Init+0x13a>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	e001      	b.n	8000faa <HAL_GPIO_Init+0x13e>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	3304      	adds	r3, #4
 8000faa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000fac:	69bb      	ldr	r3, [r7, #24]
 8000fae:	2bff      	cmp	r3, #255	; 0xff
 8000fb0:	d802      	bhi.n	8000fb8 <HAL_GPIO_Init+0x14c>
 8000fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fb4:	009b      	lsls	r3, r3, #2
 8000fb6:	e002      	b.n	8000fbe <HAL_GPIO_Init+0x152>
 8000fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fba:	3b08      	subs	r3, #8
 8000fbc:	009b      	lsls	r3, r3, #2
 8000fbe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	210f      	movs	r1, #15
 8000fc6:	693b      	ldr	r3, [r7, #16]
 8000fc8:	fa01 f303 	lsl.w	r3, r1, r3
 8000fcc:	43db      	mvns	r3, r3
 8000fce:	401a      	ands	r2, r3
 8000fd0:	6a39      	ldr	r1, [r7, #32]
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	fa01 f303 	lsl.w	r3, r1, r3
 8000fd8:	431a      	orrs	r2, r3
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	f000 80b1 	beq.w	800114e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000fec:	4b4d      	ldr	r3, [pc, #308]	; (8001124 <HAL_GPIO_Init+0x2b8>)
 8000fee:	699b      	ldr	r3, [r3, #24]
 8000ff0:	4a4c      	ldr	r2, [pc, #304]	; (8001124 <HAL_GPIO_Init+0x2b8>)
 8000ff2:	f043 0301 	orr.w	r3, r3, #1
 8000ff6:	6193      	str	r3, [r2, #24]
 8000ff8:	4b4a      	ldr	r3, [pc, #296]	; (8001124 <HAL_GPIO_Init+0x2b8>)
 8000ffa:	699b      	ldr	r3, [r3, #24]
 8000ffc:	f003 0301 	and.w	r3, r3, #1
 8001000:	60bb      	str	r3, [r7, #8]
 8001002:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001004:	4a48      	ldr	r2, [pc, #288]	; (8001128 <HAL_GPIO_Init+0x2bc>)
 8001006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001008:	089b      	lsrs	r3, r3, #2
 800100a:	3302      	adds	r3, #2
 800100c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001010:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001014:	f003 0303 	and.w	r3, r3, #3
 8001018:	009b      	lsls	r3, r3, #2
 800101a:	220f      	movs	r2, #15
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	43db      	mvns	r3, r3
 8001022:	68fa      	ldr	r2, [r7, #12]
 8001024:	4013      	ands	r3, r2
 8001026:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	4a40      	ldr	r2, [pc, #256]	; (800112c <HAL_GPIO_Init+0x2c0>)
 800102c:	4293      	cmp	r3, r2
 800102e:	d013      	beq.n	8001058 <HAL_GPIO_Init+0x1ec>
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	4a3f      	ldr	r2, [pc, #252]	; (8001130 <HAL_GPIO_Init+0x2c4>)
 8001034:	4293      	cmp	r3, r2
 8001036:	d00d      	beq.n	8001054 <HAL_GPIO_Init+0x1e8>
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	4a3e      	ldr	r2, [pc, #248]	; (8001134 <HAL_GPIO_Init+0x2c8>)
 800103c:	4293      	cmp	r3, r2
 800103e:	d007      	beq.n	8001050 <HAL_GPIO_Init+0x1e4>
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	4a3d      	ldr	r2, [pc, #244]	; (8001138 <HAL_GPIO_Init+0x2cc>)
 8001044:	4293      	cmp	r3, r2
 8001046:	d101      	bne.n	800104c <HAL_GPIO_Init+0x1e0>
 8001048:	2303      	movs	r3, #3
 800104a:	e006      	b.n	800105a <HAL_GPIO_Init+0x1ee>
 800104c:	2304      	movs	r3, #4
 800104e:	e004      	b.n	800105a <HAL_GPIO_Init+0x1ee>
 8001050:	2302      	movs	r3, #2
 8001052:	e002      	b.n	800105a <HAL_GPIO_Init+0x1ee>
 8001054:	2301      	movs	r3, #1
 8001056:	e000      	b.n	800105a <HAL_GPIO_Init+0x1ee>
 8001058:	2300      	movs	r3, #0
 800105a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800105c:	f002 0203 	and.w	r2, r2, #3
 8001060:	0092      	lsls	r2, r2, #2
 8001062:	4093      	lsls	r3, r2
 8001064:	68fa      	ldr	r2, [r7, #12]
 8001066:	4313      	orrs	r3, r2
 8001068:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800106a:	492f      	ldr	r1, [pc, #188]	; (8001128 <HAL_GPIO_Init+0x2bc>)
 800106c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800106e:	089b      	lsrs	r3, r3, #2
 8001070:	3302      	adds	r3, #2
 8001072:	68fa      	ldr	r2, [r7, #12]
 8001074:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001080:	2b00      	cmp	r3, #0
 8001082:	d006      	beq.n	8001092 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001084:	4b2d      	ldr	r3, [pc, #180]	; (800113c <HAL_GPIO_Init+0x2d0>)
 8001086:	689a      	ldr	r2, [r3, #8]
 8001088:	492c      	ldr	r1, [pc, #176]	; (800113c <HAL_GPIO_Init+0x2d0>)
 800108a:	69bb      	ldr	r3, [r7, #24]
 800108c:	4313      	orrs	r3, r2
 800108e:	608b      	str	r3, [r1, #8]
 8001090:	e006      	b.n	80010a0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001092:	4b2a      	ldr	r3, [pc, #168]	; (800113c <HAL_GPIO_Init+0x2d0>)
 8001094:	689a      	ldr	r2, [r3, #8]
 8001096:	69bb      	ldr	r3, [r7, #24]
 8001098:	43db      	mvns	r3, r3
 800109a:	4928      	ldr	r1, [pc, #160]	; (800113c <HAL_GPIO_Init+0x2d0>)
 800109c:	4013      	ands	r3, r2
 800109e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d006      	beq.n	80010ba <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80010ac:	4b23      	ldr	r3, [pc, #140]	; (800113c <HAL_GPIO_Init+0x2d0>)
 80010ae:	68da      	ldr	r2, [r3, #12]
 80010b0:	4922      	ldr	r1, [pc, #136]	; (800113c <HAL_GPIO_Init+0x2d0>)
 80010b2:	69bb      	ldr	r3, [r7, #24]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	60cb      	str	r3, [r1, #12]
 80010b8:	e006      	b.n	80010c8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80010ba:	4b20      	ldr	r3, [pc, #128]	; (800113c <HAL_GPIO_Init+0x2d0>)
 80010bc:	68da      	ldr	r2, [r3, #12]
 80010be:	69bb      	ldr	r3, [r7, #24]
 80010c0:	43db      	mvns	r3, r3
 80010c2:	491e      	ldr	r1, [pc, #120]	; (800113c <HAL_GPIO_Init+0x2d0>)
 80010c4:	4013      	ands	r3, r2
 80010c6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d006      	beq.n	80010e2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80010d4:	4b19      	ldr	r3, [pc, #100]	; (800113c <HAL_GPIO_Init+0x2d0>)
 80010d6:	685a      	ldr	r2, [r3, #4]
 80010d8:	4918      	ldr	r1, [pc, #96]	; (800113c <HAL_GPIO_Init+0x2d0>)
 80010da:	69bb      	ldr	r3, [r7, #24]
 80010dc:	4313      	orrs	r3, r2
 80010de:	604b      	str	r3, [r1, #4]
 80010e0:	e006      	b.n	80010f0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80010e2:	4b16      	ldr	r3, [pc, #88]	; (800113c <HAL_GPIO_Init+0x2d0>)
 80010e4:	685a      	ldr	r2, [r3, #4]
 80010e6:	69bb      	ldr	r3, [r7, #24]
 80010e8:	43db      	mvns	r3, r3
 80010ea:	4914      	ldr	r1, [pc, #80]	; (800113c <HAL_GPIO_Init+0x2d0>)
 80010ec:	4013      	ands	r3, r2
 80010ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d021      	beq.n	8001140 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80010fc:	4b0f      	ldr	r3, [pc, #60]	; (800113c <HAL_GPIO_Init+0x2d0>)
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	490e      	ldr	r1, [pc, #56]	; (800113c <HAL_GPIO_Init+0x2d0>)
 8001102:	69bb      	ldr	r3, [r7, #24]
 8001104:	4313      	orrs	r3, r2
 8001106:	600b      	str	r3, [r1, #0]
 8001108:	e021      	b.n	800114e <HAL_GPIO_Init+0x2e2>
 800110a:	bf00      	nop
 800110c:	10320000 	.word	0x10320000
 8001110:	10310000 	.word	0x10310000
 8001114:	10220000 	.word	0x10220000
 8001118:	10210000 	.word	0x10210000
 800111c:	10120000 	.word	0x10120000
 8001120:	10110000 	.word	0x10110000
 8001124:	40021000 	.word	0x40021000
 8001128:	40010000 	.word	0x40010000
 800112c:	40010800 	.word	0x40010800
 8001130:	40010c00 	.word	0x40010c00
 8001134:	40011000 	.word	0x40011000
 8001138:	40011400 	.word	0x40011400
 800113c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001140:	4b0b      	ldr	r3, [pc, #44]	; (8001170 <HAL_GPIO_Init+0x304>)
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	69bb      	ldr	r3, [r7, #24]
 8001146:	43db      	mvns	r3, r3
 8001148:	4909      	ldr	r1, [pc, #36]	; (8001170 <HAL_GPIO_Init+0x304>)
 800114a:	4013      	ands	r3, r2
 800114c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800114e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001150:	3301      	adds	r3, #1
 8001152:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800115a:	fa22 f303 	lsr.w	r3, r2, r3
 800115e:	2b00      	cmp	r3, #0
 8001160:	f47f ae8e 	bne.w	8000e80 <HAL_GPIO_Init+0x14>
  }
}
 8001164:	bf00      	nop
 8001166:	bf00      	nop
 8001168:	372c      	adds	r7, #44	; 0x2c
 800116a:	46bd      	mov	sp, r7
 800116c:	bc80      	pop	{r7}
 800116e:	4770      	bx	lr
 8001170:	40010400 	.word	0x40010400

08001174 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
 800117c:	460b      	mov	r3, r1
 800117e:	807b      	strh	r3, [r7, #2]
 8001180:	4613      	mov	r3, r2
 8001182:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001184:	787b      	ldrb	r3, [r7, #1]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d003      	beq.n	8001192 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800118a:	887a      	ldrh	r2, [r7, #2]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001190:	e003      	b.n	800119a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001192:	887b      	ldrh	r3, [r7, #2]
 8001194:	041a      	lsls	r2, r3, #16
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	611a      	str	r2, [r3, #16]
}
 800119a:	bf00      	nop
 800119c:	370c      	adds	r7, #12
 800119e:	46bd      	mov	sp, r7
 80011a0:	bc80      	pop	{r7}
 80011a2:	4770      	bx	lr

080011a4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b085      	sub	sp, #20
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	460b      	mov	r3, r1
 80011ae:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011b6:	887a      	ldrh	r2, [r7, #2]
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	4013      	ands	r3, r2
 80011bc:	041a      	lsls	r2, r3, #16
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	43d9      	mvns	r1, r3
 80011c2:	887b      	ldrh	r3, [r7, #2]
 80011c4:	400b      	ands	r3, r1
 80011c6:	431a      	orrs	r2, r3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	611a      	str	r2, [r3, #16]
}
 80011cc:	bf00      	nop
 80011ce:	3714      	adds	r7, #20
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bc80      	pop	{r7}
 80011d4:	4770      	bx	lr
	...

080011d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b086      	sub	sp, #24
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d101      	bne.n	80011ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	e272      	b.n	80016d0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f003 0301 	and.w	r3, r3, #1
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	f000 8087 	beq.w	8001306 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80011f8:	4b92      	ldr	r3, [pc, #584]	; (8001444 <HAL_RCC_OscConfig+0x26c>)
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f003 030c 	and.w	r3, r3, #12
 8001200:	2b04      	cmp	r3, #4
 8001202:	d00c      	beq.n	800121e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001204:	4b8f      	ldr	r3, [pc, #572]	; (8001444 <HAL_RCC_OscConfig+0x26c>)
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f003 030c 	and.w	r3, r3, #12
 800120c:	2b08      	cmp	r3, #8
 800120e:	d112      	bne.n	8001236 <HAL_RCC_OscConfig+0x5e>
 8001210:	4b8c      	ldr	r3, [pc, #560]	; (8001444 <HAL_RCC_OscConfig+0x26c>)
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001218:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800121c:	d10b      	bne.n	8001236 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800121e:	4b89      	ldr	r3, [pc, #548]	; (8001444 <HAL_RCC_OscConfig+0x26c>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001226:	2b00      	cmp	r3, #0
 8001228:	d06c      	beq.n	8001304 <HAL_RCC_OscConfig+0x12c>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d168      	bne.n	8001304 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
 8001234:	e24c      	b.n	80016d0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800123e:	d106      	bne.n	800124e <HAL_RCC_OscConfig+0x76>
 8001240:	4b80      	ldr	r3, [pc, #512]	; (8001444 <HAL_RCC_OscConfig+0x26c>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a7f      	ldr	r2, [pc, #508]	; (8001444 <HAL_RCC_OscConfig+0x26c>)
 8001246:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800124a:	6013      	str	r3, [r2, #0]
 800124c:	e02e      	b.n	80012ac <HAL_RCC_OscConfig+0xd4>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d10c      	bne.n	8001270 <HAL_RCC_OscConfig+0x98>
 8001256:	4b7b      	ldr	r3, [pc, #492]	; (8001444 <HAL_RCC_OscConfig+0x26c>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a7a      	ldr	r2, [pc, #488]	; (8001444 <HAL_RCC_OscConfig+0x26c>)
 800125c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001260:	6013      	str	r3, [r2, #0]
 8001262:	4b78      	ldr	r3, [pc, #480]	; (8001444 <HAL_RCC_OscConfig+0x26c>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a77      	ldr	r2, [pc, #476]	; (8001444 <HAL_RCC_OscConfig+0x26c>)
 8001268:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800126c:	6013      	str	r3, [r2, #0]
 800126e:	e01d      	b.n	80012ac <HAL_RCC_OscConfig+0xd4>
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001278:	d10c      	bne.n	8001294 <HAL_RCC_OscConfig+0xbc>
 800127a:	4b72      	ldr	r3, [pc, #456]	; (8001444 <HAL_RCC_OscConfig+0x26c>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a71      	ldr	r2, [pc, #452]	; (8001444 <HAL_RCC_OscConfig+0x26c>)
 8001280:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001284:	6013      	str	r3, [r2, #0]
 8001286:	4b6f      	ldr	r3, [pc, #444]	; (8001444 <HAL_RCC_OscConfig+0x26c>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a6e      	ldr	r2, [pc, #440]	; (8001444 <HAL_RCC_OscConfig+0x26c>)
 800128c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001290:	6013      	str	r3, [r2, #0]
 8001292:	e00b      	b.n	80012ac <HAL_RCC_OscConfig+0xd4>
 8001294:	4b6b      	ldr	r3, [pc, #428]	; (8001444 <HAL_RCC_OscConfig+0x26c>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a6a      	ldr	r2, [pc, #424]	; (8001444 <HAL_RCC_OscConfig+0x26c>)
 800129a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800129e:	6013      	str	r3, [r2, #0]
 80012a0:	4b68      	ldr	r3, [pc, #416]	; (8001444 <HAL_RCC_OscConfig+0x26c>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a67      	ldr	r2, [pc, #412]	; (8001444 <HAL_RCC_OscConfig+0x26c>)
 80012a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012aa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d013      	beq.n	80012dc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012b4:	f7ff fcec 	bl	8000c90 <HAL_GetTick>
 80012b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ba:	e008      	b.n	80012ce <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012bc:	f7ff fce8 	bl	8000c90 <HAL_GetTick>
 80012c0:	4602      	mov	r2, r0
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	2b64      	cmp	r3, #100	; 0x64
 80012c8:	d901      	bls.n	80012ce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80012ca:	2303      	movs	r3, #3
 80012cc:	e200      	b.n	80016d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ce:	4b5d      	ldr	r3, [pc, #372]	; (8001444 <HAL_RCC_OscConfig+0x26c>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d0f0      	beq.n	80012bc <HAL_RCC_OscConfig+0xe4>
 80012da:	e014      	b.n	8001306 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012dc:	f7ff fcd8 	bl	8000c90 <HAL_GetTick>
 80012e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012e2:	e008      	b.n	80012f6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012e4:	f7ff fcd4 	bl	8000c90 <HAL_GetTick>
 80012e8:	4602      	mov	r2, r0
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	1ad3      	subs	r3, r2, r3
 80012ee:	2b64      	cmp	r3, #100	; 0x64
 80012f0:	d901      	bls.n	80012f6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80012f2:	2303      	movs	r3, #3
 80012f4:	e1ec      	b.n	80016d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012f6:	4b53      	ldr	r3, [pc, #332]	; (8001444 <HAL_RCC_OscConfig+0x26c>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d1f0      	bne.n	80012e4 <HAL_RCC_OscConfig+0x10c>
 8001302:	e000      	b.n	8001306 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001304:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f003 0302 	and.w	r3, r3, #2
 800130e:	2b00      	cmp	r3, #0
 8001310:	d063      	beq.n	80013da <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001312:	4b4c      	ldr	r3, [pc, #304]	; (8001444 <HAL_RCC_OscConfig+0x26c>)
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	f003 030c 	and.w	r3, r3, #12
 800131a:	2b00      	cmp	r3, #0
 800131c:	d00b      	beq.n	8001336 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800131e:	4b49      	ldr	r3, [pc, #292]	; (8001444 <HAL_RCC_OscConfig+0x26c>)
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f003 030c 	and.w	r3, r3, #12
 8001326:	2b08      	cmp	r3, #8
 8001328:	d11c      	bne.n	8001364 <HAL_RCC_OscConfig+0x18c>
 800132a:	4b46      	ldr	r3, [pc, #280]	; (8001444 <HAL_RCC_OscConfig+0x26c>)
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001332:	2b00      	cmp	r3, #0
 8001334:	d116      	bne.n	8001364 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001336:	4b43      	ldr	r3, [pc, #268]	; (8001444 <HAL_RCC_OscConfig+0x26c>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f003 0302 	and.w	r3, r3, #2
 800133e:	2b00      	cmp	r3, #0
 8001340:	d005      	beq.n	800134e <HAL_RCC_OscConfig+0x176>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	691b      	ldr	r3, [r3, #16]
 8001346:	2b01      	cmp	r3, #1
 8001348:	d001      	beq.n	800134e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e1c0      	b.n	80016d0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800134e:	4b3d      	ldr	r3, [pc, #244]	; (8001444 <HAL_RCC_OscConfig+0x26c>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	695b      	ldr	r3, [r3, #20]
 800135a:	00db      	lsls	r3, r3, #3
 800135c:	4939      	ldr	r1, [pc, #228]	; (8001444 <HAL_RCC_OscConfig+0x26c>)
 800135e:	4313      	orrs	r3, r2
 8001360:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001362:	e03a      	b.n	80013da <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	691b      	ldr	r3, [r3, #16]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d020      	beq.n	80013ae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800136c:	4b36      	ldr	r3, [pc, #216]	; (8001448 <HAL_RCC_OscConfig+0x270>)
 800136e:	2201      	movs	r2, #1
 8001370:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001372:	f7ff fc8d 	bl	8000c90 <HAL_GetTick>
 8001376:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001378:	e008      	b.n	800138c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800137a:	f7ff fc89 	bl	8000c90 <HAL_GetTick>
 800137e:	4602      	mov	r2, r0
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	1ad3      	subs	r3, r2, r3
 8001384:	2b02      	cmp	r3, #2
 8001386:	d901      	bls.n	800138c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001388:	2303      	movs	r3, #3
 800138a:	e1a1      	b.n	80016d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800138c:	4b2d      	ldr	r3, [pc, #180]	; (8001444 <HAL_RCC_OscConfig+0x26c>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f003 0302 	and.w	r3, r3, #2
 8001394:	2b00      	cmp	r3, #0
 8001396:	d0f0      	beq.n	800137a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001398:	4b2a      	ldr	r3, [pc, #168]	; (8001444 <HAL_RCC_OscConfig+0x26c>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	695b      	ldr	r3, [r3, #20]
 80013a4:	00db      	lsls	r3, r3, #3
 80013a6:	4927      	ldr	r1, [pc, #156]	; (8001444 <HAL_RCC_OscConfig+0x26c>)
 80013a8:	4313      	orrs	r3, r2
 80013aa:	600b      	str	r3, [r1, #0]
 80013ac:	e015      	b.n	80013da <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013ae:	4b26      	ldr	r3, [pc, #152]	; (8001448 <HAL_RCC_OscConfig+0x270>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013b4:	f7ff fc6c 	bl	8000c90 <HAL_GetTick>
 80013b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013ba:	e008      	b.n	80013ce <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013bc:	f7ff fc68 	bl	8000c90 <HAL_GetTick>
 80013c0:	4602      	mov	r2, r0
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	2b02      	cmp	r3, #2
 80013c8:	d901      	bls.n	80013ce <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80013ca:	2303      	movs	r3, #3
 80013cc:	e180      	b.n	80016d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013ce:	4b1d      	ldr	r3, [pc, #116]	; (8001444 <HAL_RCC_OscConfig+0x26c>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f003 0302 	and.w	r3, r3, #2
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d1f0      	bne.n	80013bc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f003 0308 	and.w	r3, r3, #8
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d03a      	beq.n	800145c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	699b      	ldr	r3, [r3, #24]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d019      	beq.n	8001422 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013ee:	4b17      	ldr	r3, [pc, #92]	; (800144c <HAL_RCC_OscConfig+0x274>)
 80013f0:	2201      	movs	r2, #1
 80013f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013f4:	f7ff fc4c 	bl	8000c90 <HAL_GetTick>
 80013f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013fa:	e008      	b.n	800140e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013fc:	f7ff fc48 	bl	8000c90 <HAL_GetTick>
 8001400:	4602      	mov	r2, r0
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	2b02      	cmp	r3, #2
 8001408:	d901      	bls.n	800140e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800140a:	2303      	movs	r3, #3
 800140c:	e160      	b.n	80016d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800140e:	4b0d      	ldr	r3, [pc, #52]	; (8001444 <HAL_RCC_OscConfig+0x26c>)
 8001410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001412:	f003 0302 	and.w	r3, r3, #2
 8001416:	2b00      	cmp	r3, #0
 8001418:	d0f0      	beq.n	80013fc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800141a:	2001      	movs	r0, #1
 800141c:	f000 face 	bl	80019bc <RCC_Delay>
 8001420:	e01c      	b.n	800145c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001422:	4b0a      	ldr	r3, [pc, #40]	; (800144c <HAL_RCC_OscConfig+0x274>)
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001428:	f7ff fc32 	bl	8000c90 <HAL_GetTick>
 800142c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800142e:	e00f      	b.n	8001450 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001430:	f7ff fc2e 	bl	8000c90 <HAL_GetTick>
 8001434:	4602      	mov	r2, r0
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	2b02      	cmp	r3, #2
 800143c:	d908      	bls.n	8001450 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800143e:	2303      	movs	r3, #3
 8001440:	e146      	b.n	80016d0 <HAL_RCC_OscConfig+0x4f8>
 8001442:	bf00      	nop
 8001444:	40021000 	.word	0x40021000
 8001448:	42420000 	.word	0x42420000
 800144c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001450:	4b92      	ldr	r3, [pc, #584]	; (800169c <HAL_RCC_OscConfig+0x4c4>)
 8001452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001454:	f003 0302 	and.w	r3, r3, #2
 8001458:	2b00      	cmp	r3, #0
 800145a:	d1e9      	bne.n	8001430 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f003 0304 	and.w	r3, r3, #4
 8001464:	2b00      	cmp	r3, #0
 8001466:	f000 80a6 	beq.w	80015b6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800146a:	2300      	movs	r3, #0
 800146c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800146e:	4b8b      	ldr	r3, [pc, #556]	; (800169c <HAL_RCC_OscConfig+0x4c4>)
 8001470:	69db      	ldr	r3, [r3, #28]
 8001472:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d10d      	bne.n	8001496 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800147a:	4b88      	ldr	r3, [pc, #544]	; (800169c <HAL_RCC_OscConfig+0x4c4>)
 800147c:	69db      	ldr	r3, [r3, #28]
 800147e:	4a87      	ldr	r2, [pc, #540]	; (800169c <HAL_RCC_OscConfig+0x4c4>)
 8001480:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001484:	61d3      	str	r3, [r2, #28]
 8001486:	4b85      	ldr	r3, [pc, #532]	; (800169c <HAL_RCC_OscConfig+0x4c4>)
 8001488:	69db      	ldr	r3, [r3, #28]
 800148a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800148e:	60bb      	str	r3, [r7, #8]
 8001490:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001492:	2301      	movs	r3, #1
 8001494:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001496:	4b82      	ldr	r3, [pc, #520]	; (80016a0 <HAL_RCC_OscConfig+0x4c8>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d118      	bne.n	80014d4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014a2:	4b7f      	ldr	r3, [pc, #508]	; (80016a0 <HAL_RCC_OscConfig+0x4c8>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a7e      	ldr	r2, [pc, #504]	; (80016a0 <HAL_RCC_OscConfig+0x4c8>)
 80014a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014ae:	f7ff fbef 	bl	8000c90 <HAL_GetTick>
 80014b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014b4:	e008      	b.n	80014c8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014b6:	f7ff fbeb 	bl	8000c90 <HAL_GetTick>
 80014ba:	4602      	mov	r2, r0
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	1ad3      	subs	r3, r2, r3
 80014c0:	2b64      	cmp	r3, #100	; 0x64
 80014c2:	d901      	bls.n	80014c8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80014c4:	2303      	movs	r3, #3
 80014c6:	e103      	b.n	80016d0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014c8:	4b75      	ldr	r3, [pc, #468]	; (80016a0 <HAL_RCC_OscConfig+0x4c8>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d0f0      	beq.n	80014b6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d106      	bne.n	80014ea <HAL_RCC_OscConfig+0x312>
 80014dc:	4b6f      	ldr	r3, [pc, #444]	; (800169c <HAL_RCC_OscConfig+0x4c4>)
 80014de:	6a1b      	ldr	r3, [r3, #32]
 80014e0:	4a6e      	ldr	r2, [pc, #440]	; (800169c <HAL_RCC_OscConfig+0x4c4>)
 80014e2:	f043 0301 	orr.w	r3, r3, #1
 80014e6:	6213      	str	r3, [r2, #32]
 80014e8:	e02d      	b.n	8001546 <HAL_RCC_OscConfig+0x36e>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	68db      	ldr	r3, [r3, #12]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d10c      	bne.n	800150c <HAL_RCC_OscConfig+0x334>
 80014f2:	4b6a      	ldr	r3, [pc, #424]	; (800169c <HAL_RCC_OscConfig+0x4c4>)
 80014f4:	6a1b      	ldr	r3, [r3, #32]
 80014f6:	4a69      	ldr	r2, [pc, #420]	; (800169c <HAL_RCC_OscConfig+0x4c4>)
 80014f8:	f023 0301 	bic.w	r3, r3, #1
 80014fc:	6213      	str	r3, [r2, #32]
 80014fe:	4b67      	ldr	r3, [pc, #412]	; (800169c <HAL_RCC_OscConfig+0x4c4>)
 8001500:	6a1b      	ldr	r3, [r3, #32]
 8001502:	4a66      	ldr	r2, [pc, #408]	; (800169c <HAL_RCC_OscConfig+0x4c4>)
 8001504:	f023 0304 	bic.w	r3, r3, #4
 8001508:	6213      	str	r3, [r2, #32]
 800150a:	e01c      	b.n	8001546 <HAL_RCC_OscConfig+0x36e>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	2b05      	cmp	r3, #5
 8001512:	d10c      	bne.n	800152e <HAL_RCC_OscConfig+0x356>
 8001514:	4b61      	ldr	r3, [pc, #388]	; (800169c <HAL_RCC_OscConfig+0x4c4>)
 8001516:	6a1b      	ldr	r3, [r3, #32]
 8001518:	4a60      	ldr	r2, [pc, #384]	; (800169c <HAL_RCC_OscConfig+0x4c4>)
 800151a:	f043 0304 	orr.w	r3, r3, #4
 800151e:	6213      	str	r3, [r2, #32]
 8001520:	4b5e      	ldr	r3, [pc, #376]	; (800169c <HAL_RCC_OscConfig+0x4c4>)
 8001522:	6a1b      	ldr	r3, [r3, #32]
 8001524:	4a5d      	ldr	r2, [pc, #372]	; (800169c <HAL_RCC_OscConfig+0x4c4>)
 8001526:	f043 0301 	orr.w	r3, r3, #1
 800152a:	6213      	str	r3, [r2, #32]
 800152c:	e00b      	b.n	8001546 <HAL_RCC_OscConfig+0x36e>
 800152e:	4b5b      	ldr	r3, [pc, #364]	; (800169c <HAL_RCC_OscConfig+0x4c4>)
 8001530:	6a1b      	ldr	r3, [r3, #32]
 8001532:	4a5a      	ldr	r2, [pc, #360]	; (800169c <HAL_RCC_OscConfig+0x4c4>)
 8001534:	f023 0301 	bic.w	r3, r3, #1
 8001538:	6213      	str	r3, [r2, #32]
 800153a:	4b58      	ldr	r3, [pc, #352]	; (800169c <HAL_RCC_OscConfig+0x4c4>)
 800153c:	6a1b      	ldr	r3, [r3, #32]
 800153e:	4a57      	ldr	r2, [pc, #348]	; (800169c <HAL_RCC_OscConfig+0x4c4>)
 8001540:	f023 0304 	bic.w	r3, r3, #4
 8001544:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	68db      	ldr	r3, [r3, #12]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d015      	beq.n	800157a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800154e:	f7ff fb9f 	bl	8000c90 <HAL_GetTick>
 8001552:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001554:	e00a      	b.n	800156c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001556:	f7ff fb9b 	bl	8000c90 <HAL_GetTick>
 800155a:	4602      	mov	r2, r0
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	1ad3      	subs	r3, r2, r3
 8001560:	f241 3288 	movw	r2, #5000	; 0x1388
 8001564:	4293      	cmp	r3, r2
 8001566:	d901      	bls.n	800156c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001568:	2303      	movs	r3, #3
 800156a:	e0b1      	b.n	80016d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800156c:	4b4b      	ldr	r3, [pc, #300]	; (800169c <HAL_RCC_OscConfig+0x4c4>)
 800156e:	6a1b      	ldr	r3, [r3, #32]
 8001570:	f003 0302 	and.w	r3, r3, #2
 8001574:	2b00      	cmp	r3, #0
 8001576:	d0ee      	beq.n	8001556 <HAL_RCC_OscConfig+0x37e>
 8001578:	e014      	b.n	80015a4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800157a:	f7ff fb89 	bl	8000c90 <HAL_GetTick>
 800157e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001580:	e00a      	b.n	8001598 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001582:	f7ff fb85 	bl	8000c90 <HAL_GetTick>
 8001586:	4602      	mov	r2, r0
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001590:	4293      	cmp	r3, r2
 8001592:	d901      	bls.n	8001598 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001594:	2303      	movs	r3, #3
 8001596:	e09b      	b.n	80016d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001598:	4b40      	ldr	r3, [pc, #256]	; (800169c <HAL_RCC_OscConfig+0x4c4>)
 800159a:	6a1b      	ldr	r3, [r3, #32]
 800159c:	f003 0302 	and.w	r3, r3, #2
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d1ee      	bne.n	8001582 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80015a4:	7dfb      	ldrb	r3, [r7, #23]
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d105      	bne.n	80015b6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015aa:	4b3c      	ldr	r3, [pc, #240]	; (800169c <HAL_RCC_OscConfig+0x4c4>)
 80015ac:	69db      	ldr	r3, [r3, #28]
 80015ae:	4a3b      	ldr	r2, [pc, #236]	; (800169c <HAL_RCC_OscConfig+0x4c4>)
 80015b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015b4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	69db      	ldr	r3, [r3, #28]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	f000 8087 	beq.w	80016ce <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015c0:	4b36      	ldr	r3, [pc, #216]	; (800169c <HAL_RCC_OscConfig+0x4c4>)
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f003 030c 	and.w	r3, r3, #12
 80015c8:	2b08      	cmp	r3, #8
 80015ca:	d061      	beq.n	8001690 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	69db      	ldr	r3, [r3, #28]
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d146      	bne.n	8001662 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015d4:	4b33      	ldr	r3, [pc, #204]	; (80016a4 <HAL_RCC_OscConfig+0x4cc>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015da:	f7ff fb59 	bl	8000c90 <HAL_GetTick>
 80015de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015e0:	e008      	b.n	80015f4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015e2:	f7ff fb55 	bl	8000c90 <HAL_GetTick>
 80015e6:	4602      	mov	r2, r0
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	1ad3      	subs	r3, r2, r3
 80015ec:	2b02      	cmp	r3, #2
 80015ee:	d901      	bls.n	80015f4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80015f0:	2303      	movs	r3, #3
 80015f2:	e06d      	b.n	80016d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015f4:	4b29      	ldr	r3, [pc, #164]	; (800169c <HAL_RCC_OscConfig+0x4c4>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d1f0      	bne.n	80015e2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6a1b      	ldr	r3, [r3, #32]
 8001604:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001608:	d108      	bne.n	800161c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800160a:	4b24      	ldr	r3, [pc, #144]	; (800169c <HAL_RCC_OscConfig+0x4c4>)
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	4921      	ldr	r1, [pc, #132]	; (800169c <HAL_RCC_OscConfig+0x4c4>)
 8001618:	4313      	orrs	r3, r2
 800161a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800161c:	4b1f      	ldr	r3, [pc, #124]	; (800169c <HAL_RCC_OscConfig+0x4c4>)
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6a19      	ldr	r1, [r3, #32]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800162c:	430b      	orrs	r3, r1
 800162e:	491b      	ldr	r1, [pc, #108]	; (800169c <HAL_RCC_OscConfig+0x4c4>)
 8001630:	4313      	orrs	r3, r2
 8001632:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001634:	4b1b      	ldr	r3, [pc, #108]	; (80016a4 <HAL_RCC_OscConfig+0x4cc>)
 8001636:	2201      	movs	r2, #1
 8001638:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800163a:	f7ff fb29 	bl	8000c90 <HAL_GetTick>
 800163e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001640:	e008      	b.n	8001654 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001642:	f7ff fb25 	bl	8000c90 <HAL_GetTick>
 8001646:	4602      	mov	r2, r0
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	1ad3      	subs	r3, r2, r3
 800164c:	2b02      	cmp	r3, #2
 800164e:	d901      	bls.n	8001654 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001650:	2303      	movs	r3, #3
 8001652:	e03d      	b.n	80016d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001654:	4b11      	ldr	r3, [pc, #68]	; (800169c <HAL_RCC_OscConfig+0x4c4>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800165c:	2b00      	cmp	r3, #0
 800165e:	d0f0      	beq.n	8001642 <HAL_RCC_OscConfig+0x46a>
 8001660:	e035      	b.n	80016ce <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001662:	4b10      	ldr	r3, [pc, #64]	; (80016a4 <HAL_RCC_OscConfig+0x4cc>)
 8001664:	2200      	movs	r2, #0
 8001666:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001668:	f7ff fb12 	bl	8000c90 <HAL_GetTick>
 800166c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800166e:	e008      	b.n	8001682 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001670:	f7ff fb0e 	bl	8000c90 <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	2b02      	cmp	r3, #2
 800167c:	d901      	bls.n	8001682 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800167e:	2303      	movs	r3, #3
 8001680:	e026      	b.n	80016d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001682:	4b06      	ldr	r3, [pc, #24]	; (800169c <HAL_RCC_OscConfig+0x4c4>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d1f0      	bne.n	8001670 <HAL_RCC_OscConfig+0x498>
 800168e:	e01e      	b.n	80016ce <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	69db      	ldr	r3, [r3, #28]
 8001694:	2b01      	cmp	r3, #1
 8001696:	d107      	bne.n	80016a8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001698:	2301      	movs	r3, #1
 800169a:	e019      	b.n	80016d0 <HAL_RCC_OscConfig+0x4f8>
 800169c:	40021000 	.word	0x40021000
 80016a0:	40007000 	.word	0x40007000
 80016a4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80016a8:	4b0b      	ldr	r3, [pc, #44]	; (80016d8 <HAL_RCC_OscConfig+0x500>)
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6a1b      	ldr	r3, [r3, #32]
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d106      	bne.n	80016ca <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016c6:	429a      	cmp	r2, r3
 80016c8:	d001      	beq.n	80016ce <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e000      	b.n	80016d0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80016ce:	2300      	movs	r3, #0
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3718      	adds	r7, #24
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	40021000 	.word	0x40021000

080016dc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d101      	bne.n	80016f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	e0d0      	b.n	8001892 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80016f0:	4b6a      	ldr	r3, [pc, #424]	; (800189c <HAL_RCC_ClockConfig+0x1c0>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f003 0307 	and.w	r3, r3, #7
 80016f8:	683a      	ldr	r2, [r7, #0]
 80016fa:	429a      	cmp	r2, r3
 80016fc:	d910      	bls.n	8001720 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016fe:	4b67      	ldr	r3, [pc, #412]	; (800189c <HAL_RCC_ClockConfig+0x1c0>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f023 0207 	bic.w	r2, r3, #7
 8001706:	4965      	ldr	r1, [pc, #404]	; (800189c <HAL_RCC_ClockConfig+0x1c0>)
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	4313      	orrs	r3, r2
 800170c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800170e:	4b63      	ldr	r3, [pc, #396]	; (800189c <HAL_RCC_ClockConfig+0x1c0>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 0307 	and.w	r3, r3, #7
 8001716:	683a      	ldr	r2, [r7, #0]
 8001718:	429a      	cmp	r2, r3
 800171a:	d001      	beq.n	8001720 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	e0b8      	b.n	8001892 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f003 0302 	and.w	r3, r3, #2
 8001728:	2b00      	cmp	r3, #0
 800172a:	d020      	beq.n	800176e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 0304 	and.w	r3, r3, #4
 8001734:	2b00      	cmp	r3, #0
 8001736:	d005      	beq.n	8001744 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001738:	4b59      	ldr	r3, [pc, #356]	; (80018a0 <HAL_RCC_ClockConfig+0x1c4>)
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	4a58      	ldr	r2, [pc, #352]	; (80018a0 <HAL_RCC_ClockConfig+0x1c4>)
 800173e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001742:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f003 0308 	and.w	r3, r3, #8
 800174c:	2b00      	cmp	r3, #0
 800174e:	d005      	beq.n	800175c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001750:	4b53      	ldr	r3, [pc, #332]	; (80018a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	4a52      	ldr	r2, [pc, #328]	; (80018a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001756:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800175a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800175c:	4b50      	ldr	r3, [pc, #320]	; (80018a0 <HAL_RCC_ClockConfig+0x1c4>)
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	494d      	ldr	r1, [pc, #308]	; (80018a0 <HAL_RCC_ClockConfig+0x1c4>)
 800176a:	4313      	orrs	r3, r2
 800176c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 0301 	and.w	r3, r3, #1
 8001776:	2b00      	cmp	r3, #0
 8001778:	d040      	beq.n	80017fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	2b01      	cmp	r3, #1
 8001780:	d107      	bne.n	8001792 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001782:	4b47      	ldr	r3, [pc, #284]	; (80018a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800178a:	2b00      	cmp	r3, #0
 800178c:	d115      	bne.n	80017ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e07f      	b.n	8001892 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	2b02      	cmp	r3, #2
 8001798:	d107      	bne.n	80017aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800179a:	4b41      	ldr	r3, [pc, #260]	; (80018a0 <HAL_RCC_ClockConfig+0x1c4>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d109      	bne.n	80017ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e073      	b.n	8001892 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017aa:	4b3d      	ldr	r3, [pc, #244]	; (80018a0 <HAL_RCC_ClockConfig+0x1c4>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 0302 	and.w	r3, r3, #2
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d101      	bne.n	80017ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e06b      	b.n	8001892 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017ba:	4b39      	ldr	r3, [pc, #228]	; (80018a0 <HAL_RCC_ClockConfig+0x1c4>)
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	f023 0203 	bic.w	r2, r3, #3
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	4936      	ldr	r1, [pc, #216]	; (80018a0 <HAL_RCC_ClockConfig+0x1c4>)
 80017c8:	4313      	orrs	r3, r2
 80017ca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017cc:	f7ff fa60 	bl	8000c90 <HAL_GetTick>
 80017d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017d2:	e00a      	b.n	80017ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017d4:	f7ff fa5c 	bl	8000c90 <HAL_GetTick>
 80017d8:	4602      	mov	r2, r0
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	f241 3288 	movw	r2, #5000	; 0x1388
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d901      	bls.n	80017ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017e6:	2303      	movs	r3, #3
 80017e8:	e053      	b.n	8001892 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017ea:	4b2d      	ldr	r3, [pc, #180]	; (80018a0 <HAL_RCC_ClockConfig+0x1c4>)
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	f003 020c 	and.w	r2, r3, #12
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	429a      	cmp	r2, r3
 80017fa:	d1eb      	bne.n	80017d4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80017fc:	4b27      	ldr	r3, [pc, #156]	; (800189c <HAL_RCC_ClockConfig+0x1c0>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f003 0307 	and.w	r3, r3, #7
 8001804:	683a      	ldr	r2, [r7, #0]
 8001806:	429a      	cmp	r2, r3
 8001808:	d210      	bcs.n	800182c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800180a:	4b24      	ldr	r3, [pc, #144]	; (800189c <HAL_RCC_ClockConfig+0x1c0>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f023 0207 	bic.w	r2, r3, #7
 8001812:	4922      	ldr	r1, [pc, #136]	; (800189c <HAL_RCC_ClockConfig+0x1c0>)
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	4313      	orrs	r3, r2
 8001818:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800181a:	4b20      	ldr	r3, [pc, #128]	; (800189c <HAL_RCC_ClockConfig+0x1c0>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 0307 	and.w	r3, r3, #7
 8001822:	683a      	ldr	r2, [r7, #0]
 8001824:	429a      	cmp	r2, r3
 8001826:	d001      	beq.n	800182c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001828:	2301      	movs	r3, #1
 800182a:	e032      	b.n	8001892 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f003 0304 	and.w	r3, r3, #4
 8001834:	2b00      	cmp	r3, #0
 8001836:	d008      	beq.n	800184a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001838:	4b19      	ldr	r3, [pc, #100]	; (80018a0 <HAL_RCC_ClockConfig+0x1c4>)
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	4916      	ldr	r1, [pc, #88]	; (80018a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001846:	4313      	orrs	r3, r2
 8001848:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 0308 	and.w	r3, r3, #8
 8001852:	2b00      	cmp	r3, #0
 8001854:	d009      	beq.n	800186a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001856:	4b12      	ldr	r3, [pc, #72]	; (80018a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	691b      	ldr	r3, [r3, #16]
 8001862:	00db      	lsls	r3, r3, #3
 8001864:	490e      	ldr	r1, [pc, #56]	; (80018a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001866:	4313      	orrs	r3, r2
 8001868:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800186a:	f000 f821 	bl	80018b0 <HAL_RCC_GetSysClockFreq>
 800186e:	4602      	mov	r2, r0
 8001870:	4b0b      	ldr	r3, [pc, #44]	; (80018a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	091b      	lsrs	r3, r3, #4
 8001876:	f003 030f 	and.w	r3, r3, #15
 800187a:	490a      	ldr	r1, [pc, #40]	; (80018a4 <HAL_RCC_ClockConfig+0x1c8>)
 800187c:	5ccb      	ldrb	r3, [r1, r3]
 800187e:	fa22 f303 	lsr.w	r3, r2, r3
 8001882:	4a09      	ldr	r2, [pc, #36]	; (80018a8 <HAL_RCC_ClockConfig+0x1cc>)
 8001884:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001886:	4b09      	ldr	r3, [pc, #36]	; (80018ac <HAL_RCC_ClockConfig+0x1d0>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4618      	mov	r0, r3
 800188c:	f7ff f9be 	bl	8000c0c <HAL_InitTick>

  return HAL_OK;
 8001890:	2300      	movs	r3, #0
}
 8001892:	4618      	mov	r0, r3
 8001894:	3710      	adds	r7, #16
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	40022000 	.word	0x40022000
 80018a0:	40021000 	.word	0x40021000
 80018a4:	0800329c 	.word	0x0800329c
 80018a8:	20000000 	.word	0x20000000
 80018ac:	20000004 	.word	0x20000004

080018b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b087      	sub	sp, #28
 80018b4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80018b6:	2300      	movs	r3, #0
 80018b8:	60fb      	str	r3, [r7, #12]
 80018ba:	2300      	movs	r3, #0
 80018bc:	60bb      	str	r3, [r7, #8]
 80018be:	2300      	movs	r3, #0
 80018c0:	617b      	str	r3, [r7, #20]
 80018c2:	2300      	movs	r3, #0
 80018c4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80018c6:	2300      	movs	r3, #0
 80018c8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80018ca:	4b1e      	ldr	r3, [pc, #120]	; (8001944 <HAL_RCC_GetSysClockFreq+0x94>)
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	f003 030c 	and.w	r3, r3, #12
 80018d6:	2b04      	cmp	r3, #4
 80018d8:	d002      	beq.n	80018e0 <HAL_RCC_GetSysClockFreq+0x30>
 80018da:	2b08      	cmp	r3, #8
 80018dc:	d003      	beq.n	80018e6 <HAL_RCC_GetSysClockFreq+0x36>
 80018de:	e027      	b.n	8001930 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80018e0:	4b19      	ldr	r3, [pc, #100]	; (8001948 <HAL_RCC_GetSysClockFreq+0x98>)
 80018e2:	613b      	str	r3, [r7, #16]
      break;
 80018e4:	e027      	b.n	8001936 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	0c9b      	lsrs	r3, r3, #18
 80018ea:	f003 030f 	and.w	r3, r3, #15
 80018ee:	4a17      	ldr	r2, [pc, #92]	; (800194c <HAL_RCC_GetSysClockFreq+0x9c>)
 80018f0:	5cd3      	ldrb	r3, [r2, r3]
 80018f2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d010      	beq.n	8001920 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80018fe:	4b11      	ldr	r3, [pc, #68]	; (8001944 <HAL_RCC_GetSysClockFreq+0x94>)
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	0c5b      	lsrs	r3, r3, #17
 8001904:	f003 0301 	and.w	r3, r3, #1
 8001908:	4a11      	ldr	r2, [pc, #68]	; (8001950 <HAL_RCC_GetSysClockFreq+0xa0>)
 800190a:	5cd3      	ldrb	r3, [r2, r3]
 800190c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4a0d      	ldr	r2, [pc, #52]	; (8001948 <HAL_RCC_GetSysClockFreq+0x98>)
 8001912:	fb03 f202 	mul.w	r2, r3, r2
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	fbb2 f3f3 	udiv	r3, r2, r3
 800191c:	617b      	str	r3, [r7, #20]
 800191e:	e004      	b.n	800192a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	4a0c      	ldr	r2, [pc, #48]	; (8001954 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001924:	fb02 f303 	mul.w	r3, r2, r3
 8001928:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	613b      	str	r3, [r7, #16]
      break;
 800192e:	e002      	b.n	8001936 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001930:	4b05      	ldr	r3, [pc, #20]	; (8001948 <HAL_RCC_GetSysClockFreq+0x98>)
 8001932:	613b      	str	r3, [r7, #16]
      break;
 8001934:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001936:	693b      	ldr	r3, [r7, #16]
}
 8001938:	4618      	mov	r0, r3
 800193a:	371c      	adds	r7, #28
 800193c:	46bd      	mov	sp, r7
 800193e:	bc80      	pop	{r7}
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	40021000 	.word	0x40021000
 8001948:	007a1200 	.word	0x007a1200
 800194c:	080032b4 	.word	0x080032b4
 8001950:	080032c4 	.word	0x080032c4
 8001954:	003d0900 	.word	0x003d0900

08001958 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800195c:	4b02      	ldr	r3, [pc, #8]	; (8001968 <HAL_RCC_GetHCLKFreq+0x10>)
 800195e:	681b      	ldr	r3, [r3, #0]
}
 8001960:	4618      	mov	r0, r3
 8001962:	46bd      	mov	sp, r7
 8001964:	bc80      	pop	{r7}
 8001966:	4770      	bx	lr
 8001968:	20000000 	.word	0x20000000

0800196c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001970:	f7ff fff2 	bl	8001958 <HAL_RCC_GetHCLKFreq>
 8001974:	4602      	mov	r2, r0
 8001976:	4b05      	ldr	r3, [pc, #20]	; (800198c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	0a1b      	lsrs	r3, r3, #8
 800197c:	f003 0307 	and.w	r3, r3, #7
 8001980:	4903      	ldr	r1, [pc, #12]	; (8001990 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001982:	5ccb      	ldrb	r3, [r1, r3]
 8001984:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001988:	4618      	mov	r0, r3
 800198a:	bd80      	pop	{r7, pc}
 800198c:	40021000 	.word	0x40021000
 8001990:	080032ac 	.word	0x080032ac

08001994 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001998:	f7ff ffde 	bl	8001958 <HAL_RCC_GetHCLKFreq>
 800199c:	4602      	mov	r2, r0
 800199e:	4b05      	ldr	r3, [pc, #20]	; (80019b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	0adb      	lsrs	r3, r3, #11
 80019a4:	f003 0307 	and.w	r3, r3, #7
 80019a8:	4903      	ldr	r1, [pc, #12]	; (80019b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80019aa:	5ccb      	ldrb	r3, [r1, r3]
 80019ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	40021000 	.word	0x40021000
 80019b8:	080032ac 	.word	0x080032ac

080019bc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80019bc:	b480      	push	{r7}
 80019be:	b085      	sub	sp, #20
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80019c4:	4b0a      	ldr	r3, [pc, #40]	; (80019f0 <RCC_Delay+0x34>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a0a      	ldr	r2, [pc, #40]	; (80019f4 <RCC_Delay+0x38>)
 80019ca:	fba2 2303 	umull	r2, r3, r2, r3
 80019ce:	0a5b      	lsrs	r3, r3, #9
 80019d0:	687a      	ldr	r2, [r7, #4]
 80019d2:	fb02 f303 	mul.w	r3, r2, r3
 80019d6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80019d8:	bf00      	nop
  }
  while (Delay --);
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	1e5a      	subs	r2, r3, #1
 80019de:	60fa      	str	r2, [r7, #12]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d1f9      	bne.n	80019d8 <RCC_Delay+0x1c>
}
 80019e4:	bf00      	nop
 80019e6:	bf00      	nop
 80019e8:	3714      	adds	r7, #20
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bc80      	pop	{r7}
 80019ee:	4770      	bx	lr
 80019f0:	20000000 	.word	0x20000000
 80019f4:	10624dd3 	.word	0x10624dd3

080019f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d101      	bne.n	8001a0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e042      	b.n	8001a90 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d106      	bne.n	8001a24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f7fe ff02 	bl	8000828 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2224      	movs	r2, #36	; 0x24
 8001a28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	68da      	ldr	r2, [r3, #12]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001a3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	f000 f91d 	bl	8001c7c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	691a      	ldr	r2, [r3, #16]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001a50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	695a      	ldr	r2, [r3, #20]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001a60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	68da      	ldr	r2, [r3, #12]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001a70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2200      	movs	r2, #0
 8001a76:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2220      	movs	r2, #32
 8001a7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2220      	movs	r2, #32
 8001a84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001a8e:	2300      	movs	r3, #0
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3708      	adds	r7, #8
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}

08001a98 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b08a      	sub	sp, #40	; 0x28
 8001a9c:	af02      	add	r7, sp, #8
 8001a9e:	60f8      	str	r0, [r7, #12]
 8001aa0:	60b9      	str	r1, [r7, #8]
 8001aa2:	603b      	str	r3, [r7, #0]
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	2b20      	cmp	r3, #32
 8001ab6:	d16d      	bne.n	8001b94 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d002      	beq.n	8001ac4 <HAL_UART_Transmit+0x2c>
 8001abe:	88fb      	ldrh	r3, [r7, #6]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d101      	bne.n	8001ac8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e066      	b.n	8001b96 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	2200      	movs	r2, #0
 8001acc:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	2221      	movs	r2, #33	; 0x21
 8001ad2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001ad6:	f7ff f8db 	bl	8000c90 <HAL_GetTick>
 8001ada:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	88fa      	ldrh	r2, [r7, #6]
 8001ae0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	88fa      	ldrh	r2, [r7, #6]
 8001ae6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001af0:	d108      	bne.n	8001b04 <HAL_UART_Transmit+0x6c>
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	691b      	ldr	r3, [r3, #16]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d104      	bne.n	8001b04 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001afa:	2300      	movs	r3, #0
 8001afc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	61bb      	str	r3, [r7, #24]
 8001b02:	e003      	b.n	8001b0c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001b0c:	e02a      	b.n	8001b64 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	9300      	str	r3, [sp, #0]
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	2200      	movs	r2, #0
 8001b16:	2180      	movs	r1, #128	; 0x80
 8001b18:	68f8      	ldr	r0, [r7, #12]
 8001b1a:	f000 f840 	bl	8001b9e <UART_WaitOnFlagUntilTimeout>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8001b24:	2303      	movs	r3, #3
 8001b26:	e036      	b.n	8001b96 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8001b28:	69fb      	ldr	r3, [r7, #28]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d10b      	bne.n	8001b46 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001b2e:	69bb      	ldr	r3, [r7, #24]
 8001b30:	881b      	ldrh	r3, [r3, #0]
 8001b32:	461a      	mov	r2, r3
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001b3c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001b3e:	69bb      	ldr	r3, [r7, #24]
 8001b40:	3302      	adds	r3, #2
 8001b42:	61bb      	str	r3, [r7, #24]
 8001b44:	e007      	b.n	8001b56 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	781a      	ldrb	r2, [r3, #0]
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	3301      	adds	r3, #1
 8001b54:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001b5a:	b29b      	uxth	r3, r3
 8001b5c:	3b01      	subs	r3, #1
 8001b5e:	b29a      	uxth	r2, r3
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001b68:	b29b      	uxth	r3, r3
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d1cf      	bne.n	8001b0e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	9300      	str	r3, [sp, #0]
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	2200      	movs	r2, #0
 8001b76:	2140      	movs	r1, #64	; 0x40
 8001b78:	68f8      	ldr	r0, [r7, #12]
 8001b7a:	f000 f810 	bl	8001b9e <UART_WaitOnFlagUntilTimeout>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d001      	beq.n	8001b88 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8001b84:	2303      	movs	r3, #3
 8001b86:	e006      	b.n	8001b96 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	2220      	movs	r2, #32
 8001b8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8001b90:	2300      	movs	r3, #0
 8001b92:	e000      	b.n	8001b96 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8001b94:	2302      	movs	r3, #2
  }
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3720      	adds	r7, #32
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}

08001b9e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001b9e:	b580      	push	{r7, lr}
 8001ba0:	b090      	sub	sp, #64	; 0x40
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	60f8      	str	r0, [r7, #12]
 8001ba6:	60b9      	str	r1, [r7, #8]
 8001ba8:	603b      	str	r3, [r7, #0]
 8001baa:	4613      	mov	r3, r2
 8001bac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001bae:	e050      	b.n	8001c52 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001bb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bb6:	d04c      	beq.n	8001c52 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001bb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d007      	beq.n	8001bce <UART_WaitOnFlagUntilTimeout+0x30>
 8001bbe:	f7ff f867 	bl	8000c90 <HAL_GetTick>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	1ad3      	subs	r3, r2, r3
 8001bc8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d241      	bcs.n	8001c52 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	330c      	adds	r3, #12
 8001bd4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bd8:	e853 3f00 	ldrex	r3, [r3]
 8001bdc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001be4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	330c      	adds	r3, #12
 8001bec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001bee:	637a      	str	r2, [r7, #52]	; 0x34
 8001bf0:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001bf2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001bf4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001bf6:	e841 2300 	strex	r3, r2, [r1]
 8001bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d1e5      	bne.n	8001bce <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	3314      	adds	r3, #20
 8001c08:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	e853 3f00 	ldrex	r3, [r3]
 8001c10:	613b      	str	r3, [r7, #16]
   return(result);
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	f023 0301 	bic.w	r3, r3, #1
 8001c18:	63bb      	str	r3, [r7, #56]	; 0x38
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	3314      	adds	r3, #20
 8001c20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001c22:	623a      	str	r2, [r7, #32]
 8001c24:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c26:	69f9      	ldr	r1, [r7, #28]
 8001c28:	6a3a      	ldr	r2, [r7, #32]
 8001c2a:	e841 2300 	strex	r3, r2, [r1]
 8001c2e:	61bb      	str	r3, [r7, #24]
   return(result);
 8001c30:	69bb      	ldr	r3, [r7, #24]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d1e5      	bne.n	8001c02 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	2220      	movs	r2, #32
 8001c3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	2220      	movs	r2, #32
 8001c42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e00f      	b.n	8001c72 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	68ba      	ldr	r2, [r7, #8]
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	bf0c      	ite	eq
 8001c62:	2301      	moveq	r3, #1
 8001c64:	2300      	movne	r3, #0
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	461a      	mov	r2, r3
 8001c6a:	79fb      	ldrb	r3, [r7, #7]
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d09f      	beq.n	8001bb0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001c70:	2300      	movs	r3, #0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3740      	adds	r7, #64	; 0x40
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
	...

08001c7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	691b      	ldr	r3, [r3, #16]
 8001c8a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	68da      	ldr	r2, [r3, #12]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	430a      	orrs	r2, r1
 8001c98:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	689a      	ldr	r2, [r3, #8]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	691b      	ldr	r3, [r3, #16]
 8001ca2:	431a      	orrs	r2, r3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	695b      	ldr	r3, [r3, #20]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	68db      	ldr	r3, [r3, #12]
 8001cb2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001cb6:	f023 030c 	bic.w	r3, r3, #12
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	6812      	ldr	r2, [r2, #0]
 8001cbe:	68b9      	ldr	r1, [r7, #8]
 8001cc0:	430b      	orrs	r3, r1
 8001cc2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	695b      	ldr	r3, [r3, #20]
 8001cca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	699a      	ldr	r2, [r3, #24]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	430a      	orrs	r2, r1
 8001cd8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a2c      	ldr	r2, [pc, #176]	; (8001d90 <UART_SetConfig+0x114>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d103      	bne.n	8001cec <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001ce4:	f7ff fe56 	bl	8001994 <HAL_RCC_GetPCLK2Freq>
 8001ce8:	60f8      	str	r0, [r7, #12]
 8001cea:	e002      	b.n	8001cf2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001cec:	f7ff fe3e 	bl	800196c <HAL_RCC_GetPCLK1Freq>
 8001cf0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001cf2:	68fa      	ldr	r2, [r7, #12]
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	4413      	add	r3, r2
 8001cfa:	009a      	lsls	r2, r3, #2
 8001cfc:	441a      	add	r2, r3
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d08:	4a22      	ldr	r2, [pc, #136]	; (8001d94 <UART_SetConfig+0x118>)
 8001d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d0e:	095b      	lsrs	r3, r3, #5
 8001d10:	0119      	lsls	r1, r3, #4
 8001d12:	68fa      	ldr	r2, [r7, #12]
 8001d14:	4613      	mov	r3, r2
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	4413      	add	r3, r2
 8001d1a:	009a      	lsls	r2, r3, #2
 8001d1c:	441a      	add	r2, r3
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d28:	4b1a      	ldr	r3, [pc, #104]	; (8001d94 <UART_SetConfig+0x118>)
 8001d2a:	fba3 0302 	umull	r0, r3, r3, r2
 8001d2e:	095b      	lsrs	r3, r3, #5
 8001d30:	2064      	movs	r0, #100	; 0x64
 8001d32:	fb00 f303 	mul.w	r3, r0, r3
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	011b      	lsls	r3, r3, #4
 8001d3a:	3332      	adds	r3, #50	; 0x32
 8001d3c:	4a15      	ldr	r2, [pc, #84]	; (8001d94 <UART_SetConfig+0x118>)
 8001d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d42:	095b      	lsrs	r3, r3, #5
 8001d44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d48:	4419      	add	r1, r3
 8001d4a:	68fa      	ldr	r2, [r7, #12]
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	4413      	add	r3, r2
 8001d52:	009a      	lsls	r2, r3, #2
 8001d54:	441a      	add	r2, r3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d60:	4b0c      	ldr	r3, [pc, #48]	; (8001d94 <UART_SetConfig+0x118>)
 8001d62:	fba3 0302 	umull	r0, r3, r3, r2
 8001d66:	095b      	lsrs	r3, r3, #5
 8001d68:	2064      	movs	r0, #100	; 0x64
 8001d6a:	fb00 f303 	mul.w	r3, r0, r3
 8001d6e:	1ad3      	subs	r3, r2, r3
 8001d70:	011b      	lsls	r3, r3, #4
 8001d72:	3332      	adds	r3, #50	; 0x32
 8001d74:	4a07      	ldr	r2, [pc, #28]	; (8001d94 <UART_SetConfig+0x118>)
 8001d76:	fba2 2303 	umull	r2, r3, r2, r3
 8001d7a:	095b      	lsrs	r3, r3, #5
 8001d7c:	f003 020f 	and.w	r2, r3, #15
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	440a      	add	r2, r1
 8001d86:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001d88:	bf00      	nop
 8001d8a:	3710      	adds	r7, #16
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	40013800 	.word	0x40013800
 8001d94:	51eb851f 	.word	0x51eb851f

08001d98 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_OUTPUT
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8001d98:	b490      	push	{r4, r7}
 8001d9a:	b088      	sub	sp, #32
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	60f8      	str	r0, [r7, #12]
 8001da0:	60b9      	str	r1, [r7, #8]
 8001da2:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	461a      	mov	r2, r3
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	0e1b      	lsrs	r3, r3, #24
 8001dac:	4413      	add	r3, r2
 8001dae:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8001db0:	6822      	ldr	r2, [r4, #0]
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	fa93 f3a3 	rbit	r3, r3
 8001dbc:	613b      	str	r3, [r7, #16]
  return result;
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	fab3 f383 	clz	r3, r3
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	210f      	movs	r1, #15
 8001dca:	fa01 f303 	lsl.w	r3, r1, r3
 8001dce:	43db      	mvns	r3, r3
 8001dd0:	401a      	ands	r2, r3
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	fa93 f3a3 	rbit	r3, r3
 8001ddc:	61bb      	str	r3, [r7, #24]
  return result;
 8001dde:	69bb      	ldr	r3, [r7, #24]
 8001de0:	fab3 f383 	clz	r3, r3
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	6879      	ldr	r1, [r7, #4]
 8001dea:	fa01 f303 	lsl.w	r3, r1, r3
 8001dee:	4313      	orrs	r3, r2
 8001df0:	6023      	str	r3, [r4, #0]
}
 8001df2:	bf00      	nop
 8001df4:	3720      	adds	r7, #32
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bc90      	pop	{r4, r7}
 8001dfa:	4770      	bx	lr

08001dfc <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8001dfc:	b490      	push	{r4, r7}
 8001dfe:	b088      	sub	sp, #32
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	60f8      	str	r0, [r7, #12]
 8001e04:	60b9      	str	r1, [r7, #8]
 8001e06:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	0e1b      	lsrs	r3, r3, #24
 8001e10:	4413      	add	r3, r2
 8001e12:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 8001e14:	6822      	ldr	r2, [r4, #0]
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	fa93 f3a3 	rbit	r3, r3
 8001e20:	613b      	str	r3, [r7, #16]
  return result;
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	fab3 f383 	clz	r3, r3
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	2103      	movs	r1, #3
 8001e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e32:	43db      	mvns	r3, r3
 8001e34:	401a      	ands	r2, r3
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	fa93 f3a3 	rbit	r3, r3
 8001e40:	61bb      	str	r3, [r7, #24]
  return result;
 8001e42:	69bb      	ldr	r3, [r7, #24]
 8001e44:	fab3 f383 	clz	r3, r3
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	6879      	ldr	r1, [r7, #4]
 8001e4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e52:	4313      	orrs	r3, r2
 8001e54:	6023      	str	r3, [r4, #0]
             (Speed << (POSITION_VAL(Pin) * 4U)));
}
 8001e56:	bf00      	nop
 8001e58:	3720      	adds	r7, #32
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bc90      	pop	{r4, r7}
 8001e5e:	4770      	bx	lr

08001e60 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t OutputType)
{
 8001e60:	b490      	push	{r4, r7}
 8001e62:	b088      	sub	sp, #32
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	60f8      	str	r0, [r7, #12]
 8001e68:	60b9      	str	r1, [r7, #8]
 8001e6a:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	461a      	mov	r2, r3
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	0e1b      	lsrs	r3, r3, #24
 8001e74:	4413      	add	r3, r2
 8001e76:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 8001e78:	6822      	ldr	r2, [r4, #0]
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	fa93 f3a3 	rbit	r3, r3
 8001e84:	613b      	str	r3, [r7, #16]
  return result;
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	fab3 f383 	clz	r3, r3
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	2104      	movs	r1, #4
 8001e92:	fa01 f303 	lsl.w	r3, r1, r3
 8001e96:	43db      	mvns	r3, r3
 8001e98:	401a      	ands	r2, r3
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	fa93 f3a3 	rbit	r3, r3
 8001ea4:	61bb      	str	r3, [r7, #24]
  return result;
 8001ea6:	69bb      	ldr	r3, [r7, #24]
 8001ea8:	fab3 f383 	clz	r3, r3
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	6879      	ldr	r1, [r7, #4]
 8001eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	6023      	str	r3, [r4, #0]
             (OutputType << (POSITION_VAL(Pin) * 4U)));
}
 8001eba:	bf00      	nop
 8001ebc:	3720      	adds	r7, #32
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bc90      	pop	{r4, r7}
 8001ec2:	4770      	bx	lr

08001ec4 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_DOWN
  *         @arg @ref LL_GPIO_PULL_UP
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b087      	sub	sp, #28
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	60f8      	str	r0, [r7, #12]
 8001ecc:	60b9      	str	r1, [r7, #8]
 8001ece:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	68da      	ldr	r2, [r3, #12]
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	0a1b      	lsrs	r3, r3, #8
 8001ed8:	43db      	mvns	r3, r3
 8001eda:	401a      	ands	r2, r3
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	0a1b      	lsrs	r3, r3, #8
 8001ee0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	fa93 f3a3 	rbit	r3, r3
 8001ee8:	613b      	str	r3, [r7, #16]
  return result;
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	fab3 f383 	clz	r3, r3
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	408b      	lsls	r3, r1
 8001ef8:	431a      	orrs	r2, r3
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	60da      	str	r2, [r3, #12]
}
 8001efe:	bf00      	nop
 8001f00:	371c      	adds	r7, #28
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bc80      	pop	{r7}
 8001f06:	4770      	bx	lr

08001f08 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b088      	sub	sp, #32
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	021b      	lsls	r3, r3, #8
 8001f18:	0c1b      	lsrs	r3, r3, #16
 8001f1a:	617b      	str	r3, [r7, #20]
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	fa93 f3a3 	rbit	r3, r3
 8001f26:	60fb      	str	r3, [r7, #12]
  return result;
 8001f28:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 8001f2a:	fab3 f383 	clz	r3, r3
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 8001f32:	e044      	b.n	8001fbe <LL_GPIO_Init+0xb6>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 8001f34:	2201      	movs	r2, #1
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	409a      	lsls	r2, r3
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d03a      	beq.n	8001fb8 <LL_GPIO_Init+0xb0>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	2b07      	cmp	r3, #7
 8001f46:	d806      	bhi.n	8001f56 <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 8001f48:	f240 1201 	movw	r2, #257	; 0x101
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f52:	61bb      	str	r3, [r7, #24]
 8001f54:	e008      	b.n	8001f68 <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	3b08      	subs	r3, #8
 8001f5a:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8001f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f62:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001f66:	61bb      	str	r3, [r7, #24]
      }

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_INPUT)
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	2b08      	cmp	r3, #8
 8001f6e:	d106      	bne.n	8001f7e <LL_GPIO_Init+0x76>
      {
        /* Check The Pull parameter */
        assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

        /* Pull-up Pull-down resistor configuration*/
        LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	691b      	ldr	r3, [r3, #16]
 8001f74:	461a      	mov	r2, r3
 8001f76:	69b9      	ldr	r1, [r7, #24]
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	f7ff ffa3 	bl	8001ec4 <LL_GPIO_SetPinPull>
      
      /* Check Pin Mode parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	461a      	mov	r2, r3
 8001f84:	69b9      	ldr	r1, [r7, #24]
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f7ff ff06 	bl	8001d98 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d003      	beq.n	8001f9c <LL_GPIO_Init+0x94>
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	2b09      	cmp	r3, #9
 8001f9a:	d10d      	bne.n	8001fb8 <LL_GPIO_Init+0xb0>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	69b9      	ldr	r1, [r7, #24]
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f7ff ff29 	bl	8001dfc <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	68db      	ldr	r3, [r3, #12]
 8001fae:	461a      	mov	r2, r3
 8001fb0:	69b9      	ldr	r1, [r7, #24]
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f7ff ff54 	bl	8001e60 <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	3301      	adds	r3, #1
 8001fbc:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 8001fbe:	697a      	ldr	r2, [r7, #20]
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	fa22 f303 	lsr.w	r3, r2, r3
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d1b4      	bne.n	8001f34 <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 8001fca:	2300      	movs	r3, #0
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3720      	adds	r7, #32
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001fd8:	4b03      	ldr	r3, [pc, #12]	; (8001fe8 <LL_RCC_GetSysClkSource+0x14>)
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f003 030c 	and.w	r3, r3, #12
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bc80      	pop	{r7}
 8001fe6:	4770      	bx	lr
 8001fe8:	40021000 	.word	0x40021000

08001fec <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001ff0:	4b03      	ldr	r3, [pc, #12]	; (8002000 <LL_RCC_GetAHBPrescaler+0x14>)
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bc80      	pop	{r7}
 8001ffe:	4770      	bx	lr
 8002000:	40021000 	.word	0x40021000

08002004 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002008:	4b03      	ldr	r3, [pc, #12]	; (8002018 <LL_RCC_GetAPB1Prescaler+0x14>)
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8002010:	4618      	mov	r0, r3
 8002012:	46bd      	mov	sp, r7
 8002014:	bc80      	pop	{r7}
 8002016:	4770      	bx	lr
 8002018:	40021000 	.word	0x40021000

0800201c <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002020:	4b03      	ldr	r3, [pc, #12]	; (8002030 <LL_RCC_GetAPB2Prescaler+0x14>)
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8002028:	4618      	mov	r0, r3
 800202a:	46bd      	mov	sp, r7
 800202c:	bc80      	pop	{r7}
 800202e:	4770      	bx	lr
 8002030:	40021000 	.word	0x40021000

08002034 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_PLL2 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
  uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
  return (uint32_t)(pllsrc | predivsrc);
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8002038:	4b03      	ldr	r3, [pc, #12]	; (8002048 <LL_RCC_PLL_GetMainSource+0x14>)
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
#endif /*RCC_CFGR2_PREDIV1SRC*/
}
 8002040:	4618      	mov	r0, r3
 8002042:	46bd      	mov	sp, r7
 8002044:	bc80      	pop	{r7}
 8002046:	4770      	bx	lr
 8002048:	40021000 	.word	0x40021000

0800204c <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 8002050:	4b03      	ldr	r3, [pc, #12]	; (8002060 <LL_RCC_PLL_GetMultiplicator+0x14>)
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 8002058:	4618      	mov	r0, r3
 800205a:	46bd      	mov	sp, r7
 800205c:	bc80      	pop	{r7}
 800205e:	4770      	bx	lr
 8002060:	40021000 	.word	0x40021000

08002064 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos);
 8002068:	4b04      	ldr	r3, [pc, #16]	; (800207c <LL_RCC_PLL_GetPrediv+0x18>)
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	0c5b      	lsrs	r3, r3, #17
 800206e:	f003 0301 	and.w	r3, r3, #1
#endif /*RCC_CFGR2_PREDIV1*/
}
 8002072:	4618      	mov	r0, r3
 8002074:	46bd      	mov	sp, r7
 8002076:	bc80      	pop	{r7}
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop
 800207c:	40021000 	.word	0x40021000

08002080 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8002088:	f000 f820 	bl	80020cc <RCC_GetSystemClockFreq>
 800208c:	4602      	mov	r2, r0
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4618      	mov	r0, r3
 8002098:	f000 f83e 	bl	8002118 <RCC_GetHCLKClockFreq>
 800209c:	4602      	mov	r2, r0
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	4618      	mov	r0, r3
 80020a8:	f000 f84c 	bl	8002144 <RCC_GetPCLK1ClockFreq>
 80020ac:	4602      	mov	r2, r0
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f000 f858 	bl	800216c <RCC_GetPCLK2ClockFreq>
 80020bc:	4602      	mov	r2, r0
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	60da      	str	r2, [r3, #12]
}
 80020c2:	bf00      	nop
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
	...

080020cc <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80020d2:	2300      	movs	r3, #0
 80020d4:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80020d6:	f7ff ff7d 	bl	8001fd4 <LL_RCC_GetSysClkSource>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b08      	cmp	r3, #8
 80020de:	d00c      	beq.n	80020fa <RCC_GetSystemClockFreq+0x2e>
 80020e0:	2b08      	cmp	r3, #8
 80020e2:	d80e      	bhi.n	8002102 <RCC_GetSystemClockFreq+0x36>
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d002      	beq.n	80020ee <RCC_GetSystemClockFreq+0x22>
 80020e8:	2b04      	cmp	r3, #4
 80020ea:	d003      	beq.n	80020f4 <RCC_GetSystemClockFreq+0x28>
 80020ec:	e009      	b.n	8002102 <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80020ee:	4b09      	ldr	r3, [pc, #36]	; (8002114 <RCC_GetSystemClockFreq+0x48>)
 80020f0:	607b      	str	r3, [r7, #4]
      break;
 80020f2:	e009      	b.n	8002108 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80020f4:	4b07      	ldr	r3, [pc, #28]	; (8002114 <RCC_GetSystemClockFreq+0x48>)
 80020f6:	607b      	str	r3, [r7, #4]
      break;
 80020f8:	e006      	b.n	8002108 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 80020fa:	f000 f84b 	bl	8002194 <RCC_PLL_GetFreqDomain_SYS>
 80020fe:	6078      	str	r0, [r7, #4]
      break;
 8002100:	e002      	b.n	8002108 <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 8002102:	4b04      	ldr	r3, [pc, #16]	; (8002114 <RCC_GetSystemClockFreq+0x48>)
 8002104:	607b      	str	r3, [r7, #4]
      break;
 8002106:	bf00      	nop
  }

  return frequency;
 8002108:	687b      	ldr	r3, [r7, #4]
}
 800210a:	4618      	mov	r0, r3
 800210c:	3708      	adds	r7, #8
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	007a1200 	.word	0x007a1200

08002118 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8002120:	f7ff ff64 	bl	8001fec <LL_RCC_GetAHBPrescaler>
 8002124:	4603      	mov	r3, r0
 8002126:	091b      	lsrs	r3, r3, #4
 8002128:	f003 030f 	and.w	r3, r3, #15
 800212c:	4a04      	ldr	r2, [pc, #16]	; (8002140 <RCC_GetHCLKClockFreq+0x28>)
 800212e:	5cd3      	ldrb	r3, [r2, r3]
 8002130:	461a      	mov	r2, r3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	40d3      	lsrs	r3, r2
}
 8002136:	4618      	mov	r0, r3
 8002138:	3708      	adds	r7, #8
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	0800329c 	.word	0x0800329c

08002144 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800214c:	f7ff ff5a 	bl	8002004 <LL_RCC_GetAPB1Prescaler>
 8002150:	4603      	mov	r3, r0
 8002152:	0a1b      	lsrs	r3, r3, #8
 8002154:	4a04      	ldr	r2, [pc, #16]	; (8002168 <RCC_GetPCLK1ClockFreq+0x24>)
 8002156:	5cd3      	ldrb	r3, [r2, r3]
 8002158:	461a      	mov	r2, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	40d3      	lsrs	r3, r2
}
 800215e:	4618      	mov	r0, r3
 8002160:	3708      	adds	r7, #8
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	080032ac 	.word	0x080032ac

0800216c <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8002174:	f7ff ff52 	bl	800201c <LL_RCC_GetAPB2Prescaler>
 8002178:	4603      	mov	r3, r0
 800217a:	0adb      	lsrs	r3, r3, #11
 800217c:	4a04      	ldr	r2, [pc, #16]	; (8002190 <RCC_GetPCLK2ClockFreq+0x24>)
 800217e:	5cd3      	ldrb	r3, [r2, r3]
 8002180:	461a      	mov	r2, r3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	40d3      	lsrs	r3, r2
}
 8002186:	4618      	mov	r0, r3
 8002188:	3708      	adds	r7, #8
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	080032ac 	.word	0x080032ac

08002194 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 800219a:	2300      	movs	r3, #0
 800219c:	607b      	str	r3, [r7, #4]
 800219e:	2300      	movs	r3, #0
 80021a0:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 80021a2:	f7ff ff47 	bl	8002034 <LL_RCC_PLL_GetMainSource>
 80021a6:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d004      	beq.n	80021b8 <RCC_PLL_GetFreqDomain_SYS+0x24>
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021b4:	d003      	beq.n	80021be <RCC_PLL_GetFreqDomain_SYS+0x2a>
 80021b6:	e00b      	b.n	80021d0 <RCC_PLL_GetFreqDomain_SYS+0x3c>
  {
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 80021b8:	4b0d      	ldr	r3, [pc, #52]	; (80021f0 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 80021ba:	607b      	str	r3, [r7, #4]
      break;
 80021bc:	e00b      	b.n	80021d6 <RCC_PLL_GetFreqDomain_SYS+0x42>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 80021be:	f7ff ff51 	bl	8002064 <LL_RCC_PLL_GetPrediv>
 80021c2:	4603      	mov	r3, r0
 80021c4:	3301      	adds	r3, #1
 80021c6:	4a0b      	ldr	r2, [pc, #44]	; (80021f4 <RCC_PLL_GetFreqDomain_SYS+0x60>)
 80021c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80021cc:	607b      	str	r3, [r7, #4]
      break;
 80021ce:	e002      	b.n	80021d6 <RCC_PLL_GetFreqDomain_SYS+0x42>
      pllinputfreq = RCC_PLL2_GetFreqClockFreq() / (LL_RCC_PLL_GetPrediv() + 1U);
      break;
#endif /* RCC_PLL2_SUPPORT */

    default:
      pllinputfreq = HSI_VALUE / 2U;
 80021d0:	4b07      	ldr	r3, [pc, #28]	; (80021f0 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 80021d2:	607b      	str	r3, [r7, #4]
      break;
 80021d4:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 80021d6:	f7ff ff39 	bl	800204c <LL_RCC_PLL_GetMultiplicator>
 80021da:	4603      	mov	r3, r0
 80021dc:	0c9b      	lsrs	r3, r3, #18
 80021de:	3302      	adds	r3, #2
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	fb02 f303 	mul.w	r3, r2, r3
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3708      	adds	r7, #8
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	003d0900 	.word	0x003d0900
 80021f4:	007a1200 	.word	0x007a1200

080021f8 <LL_USART_IsEnabled>:
{
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002208:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800220c:	bf0c      	ite	eq
 800220e:	2301      	moveq	r3, #1
 8002210:	2300      	movne	r3, #0
 8002212:	b2db      	uxtb	r3, r3
}
 8002214:	4618      	mov	r0, r3
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	bc80      	pop	{r7}
 800221c:	4770      	bx	lr

0800221e <LL_USART_SetStopBitsLength>:
{
 800221e:	b480      	push	{r7}
 8002220:	b083      	sub	sp, #12
 8002222:	af00      	add	r7, sp, #0
 8002224:	6078      	str	r0, [r7, #4]
 8002226:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	691b      	ldr	r3, [r3, #16]
 800222c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	431a      	orrs	r2, r3
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	611a      	str	r2, [r3, #16]
}
 8002238:	bf00      	nop
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	bc80      	pop	{r7}
 8002240:	4770      	bx	lr

08002242 <LL_USART_SetHWFlowCtrl>:
{
 8002242:	b480      	push	{r7}
 8002244:	b083      	sub	sp, #12
 8002246:	af00      	add	r7, sp, #0
 8002248:	6078      	str	r0, [r7, #4]
 800224a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	695b      	ldr	r3, [r3, #20]
 8002250:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	431a      	orrs	r2, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	615a      	str	r2, [r3, #20]
}
 800225c:	bf00      	nop
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	bc80      	pop	{r7}
 8002264:	4770      	bx	lr
	...

08002268 <LL_USART_SetBaudRate>:
{
 8002268:	b480      	push	{r7}
 800226a:	b085      	sub	sp, #20
 800226c:	af00      	add	r7, sp, #0
 800226e:	60f8      	str	r0, [r7, #12]
 8002270:	60b9      	str	r1, [r7, #8]
 8002272:	607a      	str	r2, [r7, #4]
  USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8002274:	68ba      	ldr	r2, [r7, #8]
 8002276:	4613      	mov	r3, r2
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	4413      	add	r3, r2
 800227c:	009a      	lsls	r2, r3, #2
 800227e:	441a      	add	r2, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	fbb2 f3f3 	udiv	r3, r2, r3
 8002288:	4a25      	ldr	r2, [pc, #148]	; (8002320 <LL_USART_SetBaudRate+0xb8>)
 800228a:	fba2 2303 	umull	r2, r3, r2, r3
 800228e:	095b      	lsrs	r3, r3, #5
 8002290:	b29b      	uxth	r3, r3
 8002292:	011b      	lsls	r3, r3, #4
 8002294:	b299      	uxth	r1, r3
 8002296:	68ba      	ldr	r2, [r7, #8]
 8002298:	4613      	mov	r3, r2
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	4413      	add	r3, r2
 800229e:	009a      	lsls	r2, r3, #2
 80022a0:	441a      	add	r2, r3
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	fbb2 f2f3 	udiv	r2, r2, r3
 80022aa:	4b1d      	ldr	r3, [pc, #116]	; (8002320 <LL_USART_SetBaudRate+0xb8>)
 80022ac:	fba3 0302 	umull	r0, r3, r3, r2
 80022b0:	095b      	lsrs	r3, r3, #5
 80022b2:	2064      	movs	r0, #100	; 0x64
 80022b4:	fb00 f303 	mul.w	r3, r0, r3
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	011b      	lsls	r3, r3, #4
 80022bc:	3332      	adds	r3, #50	; 0x32
 80022be:	4a18      	ldr	r2, [pc, #96]	; (8002320 <LL_USART_SetBaudRate+0xb8>)
 80022c0:	fba2 2303 	umull	r2, r3, r2, r3
 80022c4:	095b      	lsrs	r3, r3, #5
 80022c6:	b29b      	uxth	r3, r3
 80022c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022cc:	b29b      	uxth	r3, r3
 80022ce:	440b      	add	r3, r1
 80022d0:	b299      	uxth	r1, r3
 80022d2:	68ba      	ldr	r2, [r7, #8]
 80022d4:	4613      	mov	r3, r2
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	4413      	add	r3, r2
 80022da:	009a      	lsls	r2, r3, #2
 80022dc:	441a      	add	r2, r3
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	fbb2 f2f3 	udiv	r2, r2, r3
 80022e6:	4b0e      	ldr	r3, [pc, #56]	; (8002320 <LL_USART_SetBaudRate+0xb8>)
 80022e8:	fba3 0302 	umull	r0, r3, r3, r2
 80022ec:	095b      	lsrs	r3, r3, #5
 80022ee:	2064      	movs	r0, #100	; 0x64
 80022f0:	fb00 f303 	mul.w	r3, r0, r3
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	011b      	lsls	r3, r3, #4
 80022f8:	3332      	adds	r3, #50	; 0x32
 80022fa:	4a09      	ldr	r2, [pc, #36]	; (8002320 <LL_USART_SetBaudRate+0xb8>)
 80022fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002300:	095b      	lsrs	r3, r3, #5
 8002302:	b29b      	uxth	r3, r3
 8002304:	f003 030f 	and.w	r3, r3, #15
 8002308:	b29b      	uxth	r3, r3
 800230a:	440b      	add	r3, r1
 800230c:	b29b      	uxth	r3, r3
 800230e:	461a      	mov	r2, r3
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	609a      	str	r2, [r3, #8]
}
 8002314:	bf00      	nop
 8002316:	3714      	adds	r7, #20
 8002318:	46bd      	mov	sp, r7
 800231a:	bc80      	pop	{r7}
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	51eb851f 	.word	0x51eb851f

08002324 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b088      	sub	sp, #32
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8002332:	2300      	movs	r3, #0
 8002334:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
#endif /* USART_OverSampling_Feature */

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f7ff ff5e 	bl	80021f8 <LL_USART_IsEnabled>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d145      	bne.n	80023ce <LL_USART_Init+0xaa>
               (USART_CR1_M | USART_CR1_PCE | USART_CR1_PS |
                USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
               (USART_InitStruct->DataWidth | USART_InitStruct->Parity |
                USART_InitStruct->TransferDirection | USART_InitStruct->OverSampling));
#else
    MODIFY_REG(USARTx->CR1,
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	68db      	ldr	r3, [r3, #12]
 8002346:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800234a:	f023 030c 	bic.w	r3, r3, #12
 800234e:	683a      	ldr	r2, [r7, #0]
 8002350:	6851      	ldr	r1, [r2, #4]
 8002352:	683a      	ldr	r2, [r7, #0]
 8002354:	68d2      	ldr	r2, [r2, #12]
 8002356:	4311      	orrs	r1, r2
 8002358:	683a      	ldr	r2, [r7, #0]
 800235a:	6912      	ldr	r2, [r2, #16]
 800235c:	430a      	orrs	r2, r1
 800235e:	431a      	orrs	r2, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	4619      	mov	r1, r3
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f7ff ff57 	bl	800221e <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	695b      	ldr	r3, [r3, #20]
 8002374:	4619      	mov	r1, r3
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f7ff ff63 	bl	8002242 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 800237c:	f107 0308 	add.w	r3, r7, #8
 8002380:	4618      	mov	r0, r3
 8002382:	f7ff fe7d 	bl	8002080 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4a13      	ldr	r2, [pc, #76]	; (80023d8 <LL_USART_Init+0xb4>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d102      	bne.n	8002394 <LL_USART_Init+0x70>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	61bb      	str	r3, [r7, #24]
 8002392:	e00c      	b.n	80023ae <LL_USART_Init+0x8a>
    }
    else if (USARTx == USART2)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	4a11      	ldr	r2, [pc, #68]	; (80023dc <LL_USART_Init+0xb8>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d102      	bne.n	80023a2 <LL_USART_Init+0x7e>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	61bb      	str	r3, [r7, #24]
 80023a0:	e005      	b.n	80023ae <LL_USART_Init+0x8a>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4a0e      	ldr	r2, [pc, #56]	; (80023e0 <LL_USART_Init+0xbc>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d101      	bne.n	80023ae <LL_USART_Init+0x8a>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80023ae:	69bb      	ldr	r3, [r7, #24]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d00c      	beq.n	80023ce <LL_USART_Init+0xaa>
        && (USART_InitStruct->BaudRate != 0U))
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d008      	beq.n	80023ce <LL_USART_Init+0xaa>
    {
      status = SUCCESS;
 80023bc:	2300      	movs	r3, #0
 80023be:	77fb      	strb	r3, [r7, #31]
                           USART_InitStruct->OverSampling,
                           USART_InitStruct->BaudRate);
#else
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->BaudRate);
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 80023c4:	461a      	mov	r2, r3
 80023c6:	69b9      	ldr	r1, [r7, #24]
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f7ff ff4d 	bl	8002268 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80023ce:	7ffb      	ldrb	r3, [r7, #31]
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3720      	adds	r7, #32
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	40013800 	.word	0x40013800
 80023dc:	40004400 	.word	0x40004400
 80023e0:	40004800 	.word	0x40004800

080023e4 <std>:
 80023e4:	2300      	movs	r3, #0
 80023e6:	b510      	push	{r4, lr}
 80023e8:	4604      	mov	r4, r0
 80023ea:	e9c0 3300 	strd	r3, r3, [r0]
 80023ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80023f2:	6083      	str	r3, [r0, #8]
 80023f4:	8181      	strh	r1, [r0, #12]
 80023f6:	6643      	str	r3, [r0, #100]	; 0x64
 80023f8:	81c2      	strh	r2, [r0, #14]
 80023fa:	6183      	str	r3, [r0, #24]
 80023fc:	4619      	mov	r1, r3
 80023fe:	2208      	movs	r2, #8
 8002400:	305c      	adds	r0, #92	; 0x5c
 8002402:	f000 f906 	bl	8002612 <memset>
 8002406:	4b0d      	ldr	r3, [pc, #52]	; (800243c <std+0x58>)
 8002408:	6224      	str	r4, [r4, #32]
 800240a:	6263      	str	r3, [r4, #36]	; 0x24
 800240c:	4b0c      	ldr	r3, [pc, #48]	; (8002440 <std+0x5c>)
 800240e:	62a3      	str	r3, [r4, #40]	; 0x28
 8002410:	4b0c      	ldr	r3, [pc, #48]	; (8002444 <std+0x60>)
 8002412:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002414:	4b0c      	ldr	r3, [pc, #48]	; (8002448 <std+0x64>)
 8002416:	6323      	str	r3, [r4, #48]	; 0x30
 8002418:	4b0c      	ldr	r3, [pc, #48]	; (800244c <std+0x68>)
 800241a:	429c      	cmp	r4, r3
 800241c:	d006      	beq.n	800242c <std+0x48>
 800241e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8002422:	4294      	cmp	r4, r2
 8002424:	d002      	beq.n	800242c <std+0x48>
 8002426:	33d0      	adds	r3, #208	; 0xd0
 8002428:	429c      	cmp	r4, r3
 800242a:	d105      	bne.n	8002438 <std+0x54>
 800242c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002430:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002434:	f000 b966 	b.w	8002704 <__retarget_lock_init_recursive>
 8002438:	bd10      	pop	{r4, pc}
 800243a:	bf00      	nop
 800243c:	0800258d 	.word	0x0800258d
 8002440:	080025af 	.word	0x080025af
 8002444:	080025e7 	.word	0x080025e7
 8002448:	0800260b 	.word	0x0800260b
 800244c:	2000008c 	.word	0x2000008c

08002450 <stdio_exit_handler>:
 8002450:	4a02      	ldr	r2, [pc, #8]	; (800245c <stdio_exit_handler+0xc>)
 8002452:	4903      	ldr	r1, [pc, #12]	; (8002460 <stdio_exit_handler+0x10>)
 8002454:	4803      	ldr	r0, [pc, #12]	; (8002464 <stdio_exit_handler+0x14>)
 8002456:	f000 b869 	b.w	800252c <_fwalk_sglue>
 800245a:	bf00      	nop
 800245c:	2000000c 	.word	0x2000000c
 8002460:	08002fa5 	.word	0x08002fa5
 8002464:	20000018 	.word	0x20000018

08002468 <cleanup_stdio>:
 8002468:	6841      	ldr	r1, [r0, #4]
 800246a:	4b0c      	ldr	r3, [pc, #48]	; (800249c <cleanup_stdio+0x34>)
 800246c:	b510      	push	{r4, lr}
 800246e:	4299      	cmp	r1, r3
 8002470:	4604      	mov	r4, r0
 8002472:	d001      	beq.n	8002478 <cleanup_stdio+0x10>
 8002474:	f000 fd96 	bl	8002fa4 <_fflush_r>
 8002478:	68a1      	ldr	r1, [r4, #8]
 800247a:	4b09      	ldr	r3, [pc, #36]	; (80024a0 <cleanup_stdio+0x38>)
 800247c:	4299      	cmp	r1, r3
 800247e:	d002      	beq.n	8002486 <cleanup_stdio+0x1e>
 8002480:	4620      	mov	r0, r4
 8002482:	f000 fd8f 	bl	8002fa4 <_fflush_r>
 8002486:	68e1      	ldr	r1, [r4, #12]
 8002488:	4b06      	ldr	r3, [pc, #24]	; (80024a4 <cleanup_stdio+0x3c>)
 800248a:	4299      	cmp	r1, r3
 800248c:	d004      	beq.n	8002498 <cleanup_stdio+0x30>
 800248e:	4620      	mov	r0, r4
 8002490:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002494:	f000 bd86 	b.w	8002fa4 <_fflush_r>
 8002498:	bd10      	pop	{r4, pc}
 800249a:	bf00      	nop
 800249c:	2000008c 	.word	0x2000008c
 80024a0:	200000f4 	.word	0x200000f4
 80024a4:	2000015c 	.word	0x2000015c

080024a8 <global_stdio_init.part.0>:
 80024a8:	b510      	push	{r4, lr}
 80024aa:	4b0b      	ldr	r3, [pc, #44]	; (80024d8 <global_stdio_init.part.0+0x30>)
 80024ac:	4c0b      	ldr	r4, [pc, #44]	; (80024dc <global_stdio_init.part.0+0x34>)
 80024ae:	4a0c      	ldr	r2, [pc, #48]	; (80024e0 <global_stdio_init.part.0+0x38>)
 80024b0:	4620      	mov	r0, r4
 80024b2:	601a      	str	r2, [r3, #0]
 80024b4:	2104      	movs	r1, #4
 80024b6:	2200      	movs	r2, #0
 80024b8:	f7ff ff94 	bl	80023e4 <std>
 80024bc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80024c0:	2201      	movs	r2, #1
 80024c2:	2109      	movs	r1, #9
 80024c4:	f7ff ff8e 	bl	80023e4 <std>
 80024c8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80024cc:	2202      	movs	r2, #2
 80024ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80024d2:	2112      	movs	r1, #18
 80024d4:	f7ff bf86 	b.w	80023e4 <std>
 80024d8:	200001c4 	.word	0x200001c4
 80024dc:	2000008c 	.word	0x2000008c
 80024e0:	08002451 	.word	0x08002451

080024e4 <__sfp_lock_acquire>:
 80024e4:	4801      	ldr	r0, [pc, #4]	; (80024ec <__sfp_lock_acquire+0x8>)
 80024e6:	f000 b90e 	b.w	8002706 <__retarget_lock_acquire_recursive>
 80024ea:	bf00      	nop
 80024ec:	200001cd 	.word	0x200001cd

080024f0 <__sfp_lock_release>:
 80024f0:	4801      	ldr	r0, [pc, #4]	; (80024f8 <__sfp_lock_release+0x8>)
 80024f2:	f000 b909 	b.w	8002708 <__retarget_lock_release_recursive>
 80024f6:	bf00      	nop
 80024f8:	200001cd 	.word	0x200001cd

080024fc <__sinit>:
 80024fc:	b510      	push	{r4, lr}
 80024fe:	4604      	mov	r4, r0
 8002500:	f7ff fff0 	bl	80024e4 <__sfp_lock_acquire>
 8002504:	6a23      	ldr	r3, [r4, #32]
 8002506:	b11b      	cbz	r3, 8002510 <__sinit+0x14>
 8002508:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800250c:	f7ff bff0 	b.w	80024f0 <__sfp_lock_release>
 8002510:	4b04      	ldr	r3, [pc, #16]	; (8002524 <__sinit+0x28>)
 8002512:	6223      	str	r3, [r4, #32]
 8002514:	4b04      	ldr	r3, [pc, #16]	; (8002528 <__sinit+0x2c>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d1f5      	bne.n	8002508 <__sinit+0xc>
 800251c:	f7ff ffc4 	bl	80024a8 <global_stdio_init.part.0>
 8002520:	e7f2      	b.n	8002508 <__sinit+0xc>
 8002522:	bf00      	nop
 8002524:	08002469 	.word	0x08002469
 8002528:	200001c4 	.word	0x200001c4

0800252c <_fwalk_sglue>:
 800252c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002530:	4607      	mov	r7, r0
 8002532:	4688      	mov	r8, r1
 8002534:	4614      	mov	r4, r2
 8002536:	2600      	movs	r6, #0
 8002538:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800253c:	f1b9 0901 	subs.w	r9, r9, #1
 8002540:	d505      	bpl.n	800254e <_fwalk_sglue+0x22>
 8002542:	6824      	ldr	r4, [r4, #0]
 8002544:	2c00      	cmp	r4, #0
 8002546:	d1f7      	bne.n	8002538 <_fwalk_sglue+0xc>
 8002548:	4630      	mov	r0, r6
 800254a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800254e:	89ab      	ldrh	r3, [r5, #12]
 8002550:	2b01      	cmp	r3, #1
 8002552:	d907      	bls.n	8002564 <_fwalk_sglue+0x38>
 8002554:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002558:	3301      	adds	r3, #1
 800255a:	d003      	beq.n	8002564 <_fwalk_sglue+0x38>
 800255c:	4629      	mov	r1, r5
 800255e:	4638      	mov	r0, r7
 8002560:	47c0      	blx	r8
 8002562:	4306      	orrs	r6, r0
 8002564:	3568      	adds	r5, #104	; 0x68
 8002566:	e7e9      	b.n	800253c <_fwalk_sglue+0x10>

08002568 <iprintf>:
 8002568:	b40f      	push	{r0, r1, r2, r3}
 800256a:	b507      	push	{r0, r1, r2, lr}
 800256c:	4906      	ldr	r1, [pc, #24]	; (8002588 <iprintf+0x20>)
 800256e:	ab04      	add	r3, sp, #16
 8002570:	6808      	ldr	r0, [r1, #0]
 8002572:	f853 2b04 	ldr.w	r2, [r3], #4
 8002576:	6881      	ldr	r1, [r0, #8]
 8002578:	9301      	str	r3, [sp, #4]
 800257a:	f000 f9e3 	bl	8002944 <_vfiprintf_r>
 800257e:	b003      	add	sp, #12
 8002580:	f85d eb04 	ldr.w	lr, [sp], #4
 8002584:	b004      	add	sp, #16
 8002586:	4770      	bx	lr
 8002588:	20000064 	.word	0x20000064

0800258c <__sread>:
 800258c:	b510      	push	{r4, lr}
 800258e:	460c      	mov	r4, r1
 8002590:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002594:	f000 f868 	bl	8002668 <_read_r>
 8002598:	2800      	cmp	r0, #0
 800259a:	bfab      	itete	ge
 800259c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800259e:	89a3      	ldrhlt	r3, [r4, #12]
 80025a0:	181b      	addge	r3, r3, r0
 80025a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80025a6:	bfac      	ite	ge
 80025a8:	6563      	strge	r3, [r4, #84]	; 0x54
 80025aa:	81a3      	strhlt	r3, [r4, #12]
 80025ac:	bd10      	pop	{r4, pc}

080025ae <__swrite>:
 80025ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80025b2:	461f      	mov	r7, r3
 80025b4:	898b      	ldrh	r3, [r1, #12]
 80025b6:	4605      	mov	r5, r0
 80025b8:	05db      	lsls	r3, r3, #23
 80025ba:	460c      	mov	r4, r1
 80025bc:	4616      	mov	r6, r2
 80025be:	d505      	bpl.n	80025cc <__swrite+0x1e>
 80025c0:	2302      	movs	r3, #2
 80025c2:	2200      	movs	r2, #0
 80025c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80025c8:	f000 f83c 	bl	8002644 <_lseek_r>
 80025cc:	89a3      	ldrh	r3, [r4, #12]
 80025ce:	4632      	mov	r2, r6
 80025d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80025d4:	81a3      	strh	r3, [r4, #12]
 80025d6:	4628      	mov	r0, r5
 80025d8:	463b      	mov	r3, r7
 80025da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80025de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80025e2:	f000 b853 	b.w	800268c <_write_r>

080025e6 <__sseek>:
 80025e6:	b510      	push	{r4, lr}
 80025e8:	460c      	mov	r4, r1
 80025ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80025ee:	f000 f829 	bl	8002644 <_lseek_r>
 80025f2:	1c43      	adds	r3, r0, #1
 80025f4:	89a3      	ldrh	r3, [r4, #12]
 80025f6:	bf15      	itete	ne
 80025f8:	6560      	strne	r0, [r4, #84]	; 0x54
 80025fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80025fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002602:	81a3      	strheq	r3, [r4, #12]
 8002604:	bf18      	it	ne
 8002606:	81a3      	strhne	r3, [r4, #12]
 8002608:	bd10      	pop	{r4, pc}

0800260a <__sclose>:
 800260a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800260e:	f000 b809 	b.w	8002624 <_close_r>

08002612 <memset>:
 8002612:	4603      	mov	r3, r0
 8002614:	4402      	add	r2, r0
 8002616:	4293      	cmp	r3, r2
 8002618:	d100      	bne.n	800261c <memset+0xa>
 800261a:	4770      	bx	lr
 800261c:	f803 1b01 	strb.w	r1, [r3], #1
 8002620:	e7f9      	b.n	8002616 <memset+0x4>
	...

08002624 <_close_r>:
 8002624:	b538      	push	{r3, r4, r5, lr}
 8002626:	2300      	movs	r3, #0
 8002628:	4d05      	ldr	r5, [pc, #20]	; (8002640 <_close_r+0x1c>)
 800262a:	4604      	mov	r4, r0
 800262c:	4608      	mov	r0, r1
 800262e:	602b      	str	r3, [r5, #0]
 8002630:	f7fe fa43 	bl	8000aba <_close>
 8002634:	1c43      	adds	r3, r0, #1
 8002636:	d102      	bne.n	800263e <_close_r+0x1a>
 8002638:	682b      	ldr	r3, [r5, #0]
 800263a:	b103      	cbz	r3, 800263e <_close_r+0x1a>
 800263c:	6023      	str	r3, [r4, #0]
 800263e:	bd38      	pop	{r3, r4, r5, pc}
 8002640:	200001c8 	.word	0x200001c8

08002644 <_lseek_r>:
 8002644:	b538      	push	{r3, r4, r5, lr}
 8002646:	4604      	mov	r4, r0
 8002648:	4608      	mov	r0, r1
 800264a:	4611      	mov	r1, r2
 800264c:	2200      	movs	r2, #0
 800264e:	4d05      	ldr	r5, [pc, #20]	; (8002664 <_lseek_r+0x20>)
 8002650:	602a      	str	r2, [r5, #0]
 8002652:	461a      	mov	r2, r3
 8002654:	f7fe fa55 	bl	8000b02 <_lseek>
 8002658:	1c43      	adds	r3, r0, #1
 800265a:	d102      	bne.n	8002662 <_lseek_r+0x1e>
 800265c:	682b      	ldr	r3, [r5, #0]
 800265e:	b103      	cbz	r3, 8002662 <_lseek_r+0x1e>
 8002660:	6023      	str	r3, [r4, #0]
 8002662:	bd38      	pop	{r3, r4, r5, pc}
 8002664:	200001c8 	.word	0x200001c8

08002668 <_read_r>:
 8002668:	b538      	push	{r3, r4, r5, lr}
 800266a:	4604      	mov	r4, r0
 800266c:	4608      	mov	r0, r1
 800266e:	4611      	mov	r1, r2
 8002670:	2200      	movs	r2, #0
 8002672:	4d05      	ldr	r5, [pc, #20]	; (8002688 <_read_r+0x20>)
 8002674:	602a      	str	r2, [r5, #0]
 8002676:	461a      	mov	r2, r3
 8002678:	f7fe f9e6 	bl	8000a48 <_read>
 800267c:	1c43      	adds	r3, r0, #1
 800267e:	d102      	bne.n	8002686 <_read_r+0x1e>
 8002680:	682b      	ldr	r3, [r5, #0]
 8002682:	b103      	cbz	r3, 8002686 <_read_r+0x1e>
 8002684:	6023      	str	r3, [r4, #0]
 8002686:	bd38      	pop	{r3, r4, r5, pc}
 8002688:	200001c8 	.word	0x200001c8

0800268c <_write_r>:
 800268c:	b538      	push	{r3, r4, r5, lr}
 800268e:	4604      	mov	r4, r0
 8002690:	4608      	mov	r0, r1
 8002692:	4611      	mov	r1, r2
 8002694:	2200      	movs	r2, #0
 8002696:	4d05      	ldr	r5, [pc, #20]	; (80026ac <_write_r+0x20>)
 8002698:	602a      	str	r2, [r5, #0]
 800269a:	461a      	mov	r2, r3
 800269c:	f7fe f9f1 	bl	8000a82 <_write>
 80026a0:	1c43      	adds	r3, r0, #1
 80026a2:	d102      	bne.n	80026aa <_write_r+0x1e>
 80026a4:	682b      	ldr	r3, [r5, #0]
 80026a6:	b103      	cbz	r3, 80026aa <_write_r+0x1e>
 80026a8:	6023      	str	r3, [r4, #0]
 80026aa:	bd38      	pop	{r3, r4, r5, pc}
 80026ac:	200001c8 	.word	0x200001c8

080026b0 <__errno>:
 80026b0:	4b01      	ldr	r3, [pc, #4]	; (80026b8 <__errno+0x8>)
 80026b2:	6818      	ldr	r0, [r3, #0]
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop
 80026b8:	20000064 	.word	0x20000064

080026bc <__libc_init_array>:
 80026bc:	b570      	push	{r4, r5, r6, lr}
 80026be:	2600      	movs	r6, #0
 80026c0:	4d0c      	ldr	r5, [pc, #48]	; (80026f4 <__libc_init_array+0x38>)
 80026c2:	4c0d      	ldr	r4, [pc, #52]	; (80026f8 <__libc_init_array+0x3c>)
 80026c4:	1b64      	subs	r4, r4, r5
 80026c6:	10a4      	asrs	r4, r4, #2
 80026c8:	42a6      	cmp	r6, r4
 80026ca:	d109      	bne.n	80026e0 <__libc_init_array+0x24>
 80026cc:	f000 fdca 	bl	8003264 <_init>
 80026d0:	2600      	movs	r6, #0
 80026d2:	4d0a      	ldr	r5, [pc, #40]	; (80026fc <__libc_init_array+0x40>)
 80026d4:	4c0a      	ldr	r4, [pc, #40]	; (8002700 <__libc_init_array+0x44>)
 80026d6:	1b64      	subs	r4, r4, r5
 80026d8:	10a4      	asrs	r4, r4, #2
 80026da:	42a6      	cmp	r6, r4
 80026dc:	d105      	bne.n	80026ea <__libc_init_array+0x2e>
 80026de:	bd70      	pop	{r4, r5, r6, pc}
 80026e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80026e4:	4798      	blx	r3
 80026e6:	3601      	adds	r6, #1
 80026e8:	e7ee      	b.n	80026c8 <__libc_init_array+0xc>
 80026ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80026ee:	4798      	blx	r3
 80026f0:	3601      	adds	r6, #1
 80026f2:	e7f2      	b.n	80026da <__libc_init_array+0x1e>
 80026f4:	080032fc 	.word	0x080032fc
 80026f8:	080032fc 	.word	0x080032fc
 80026fc:	080032fc 	.word	0x080032fc
 8002700:	08003300 	.word	0x08003300

08002704 <__retarget_lock_init_recursive>:
 8002704:	4770      	bx	lr

08002706 <__retarget_lock_acquire_recursive>:
 8002706:	4770      	bx	lr

08002708 <__retarget_lock_release_recursive>:
 8002708:	4770      	bx	lr
	...

0800270c <_free_r>:
 800270c:	b538      	push	{r3, r4, r5, lr}
 800270e:	4605      	mov	r5, r0
 8002710:	2900      	cmp	r1, #0
 8002712:	d040      	beq.n	8002796 <_free_r+0x8a>
 8002714:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002718:	1f0c      	subs	r4, r1, #4
 800271a:	2b00      	cmp	r3, #0
 800271c:	bfb8      	it	lt
 800271e:	18e4      	addlt	r4, r4, r3
 8002720:	f000 f8dc 	bl	80028dc <__malloc_lock>
 8002724:	4a1c      	ldr	r2, [pc, #112]	; (8002798 <_free_r+0x8c>)
 8002726:	6813      	ldr	r3, [r2, #0]
 8002728:	b933      	cbnz	r3, 8002738 <_free_r+0x2c>
 800272a:	6063      	str	r3, [r4, #4]
 800272c:	6014      	str	r4, [r2, #0]
 800272e:	4628      	mov	r0, r5
 8002730:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002734:	f000 b8d8 	b.w	80028e8 <__malloc_unlock>
 8002738:	42a3      	cmp	r3, r4
 800273a:	d908      	bls.n	800274e <_free_r+0x42>
 800273c:	6820      	ldr	r0, [r4, #0]
 800273e:	1821      	adds	r1, r4, r0
 8002740:	428b      	cmp	r3, r1
 8002742:	bf01      	itttt	eq
 8002744:	6819      	ldreq	r1, [r3, #0]
 8002746:	685b      	ldreq	r3, [r3, #4]
 8002748:	1809      	addeq	r1, r1, r0
 800274a:	6021      	streq	r1, [r4, #0]
 800274c:	e7ed      	b.n	800272a <_free_r+0x1e>
 800274e:	461a      	mov	r2, r3
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	b10b      	cbz	r3, 8002758 <_free_r+0x4c>
 8002754:	42a3      	cmp	r3, r4
 8002756:	d9fa      	bls.n	800274e <_free_r+0x42>
 8002758:	6811      	ldr	r1, [r2, #0]
 800275a:	1850      	adds	r0, r2, r1
 800275c:	42a0      	cmp	r0, r4
 800275e:	d10b      	bne.n	8002778 <_free_r+0x6c>
 8002760:	6820      	ldr	r0, [r4, #0]
 8002762:	4401      	add	r1, r0
 8002764:	1850      	adds	r0, r2, r1
 8002766:	4283      	cmp	r3, r0
 8002768:	6011      	str	r1, [r2, #0]
 800276a:	d1e0      	bne.n	800272e <_free_r+0x22>
 800276c:	6818      	ldr	r0, [r3, #0]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	4408      	add	r0, r1
 8002772:	6010      	str	r0, [r2, #0]
 8002774:	6053      	str	r3, [r2, #4]
 8002776:	e7da      	b.n	800272e <_free_r+0x22>
 8002778:	d902      	bls.n	8002780 <_free_r+0x74>
 800277a:	230c      	movs	r3, #12
 800277c:	602b      	str	r3, [r5, #0]
 800277e:	e7d6      	b.n	800272e <_free_r+0x22>
 8002780:	6820      	ldr	r0, [r4, #0]
 8002782:	1821      	adds	r1, r4, r0
 8002784:	428b      	cmp	r3, r1
 8002786:	bf01      	itttt	eq
 8002788:	6819      	ldreq	r1, [r3, #0]
 800278a:	685b      	ldreq	r3, [r3, #4]
 800278c:	1809      	addeq	r1, r1, r0
 800278e:	6021      	streq	r1, [r4, #0]
 8002790:	6063      	str	r3, [r4, #4]
 8002792:	6054      	str	r4, [r2, #4]
 8002794:	e7cb      	b.n	800272e <_free_r+0x22>
 8002796:	bd38      	pop	{r3, r4, r5, pc}
 8002798:	200001d0 	.word	0x200001d0

0800279c <sbrk_aligned>:
 800279c:	b570      	push	{r4, r5, r6, lr}
 800279e:	4e0e      	ldr	r6, [pc, #56]	; (80027d8 <sbrk_aligned+0x3c>)
 80027a0:	460c      	mov	r4, r1
 80027a2:	6831      	ldr	r1, [r6, #0]
 80027a4:	4605      	mov	r5, r0
 80027a6:	b911      	cbnz	r1, 80027ae <sbrk_aligned+0x12>
 80027a8:	f000 fcba 	bl	8003120 <_sbrk_r>
 80027ac:	6030      	str	r0, [r6, #0]
 80027ae:	4621      	mov	r1, r4
 80027b0:	4628      	mov	r0, r5
 80027b2:	f000 fcb5 	bl	8003120 <_sbrk_r>
 80027b6:	1c43      	adds	r3, r0, #1
 80027b8:	d00a      	beq.n	80027d0 <sbrk_aligned+0x34>
 80027ba:	1cc4      	adds	r4, r0, #3
 80027bc:	f024 0403 	bic.w	r4, r4, #3
 80027c0:	42a0      	cmp	r0, r4
 80027c2:	d007      	beq.n	80027d4 <sbrk_aligned+0x38>
 80027c4:	1a21      	subs	r1, r4, r0
 80027c6:	4628      	mov	r0, r5
 80027c8:	f000 fcaa 	bl	8003120 <_sbrk_r>
 80027cc:	3001      	adds	r0, #1
 80027ce:	d101      	bne.n	80027d4 <sbrk_aligned+0x38>
 80027d0:	f04f 34ff 	mov.w	r4, #4294967295
 80027d4:	4620      	mov	r0, r4
 80027d6:	bd70      	pop	{r4, r5, r6, pc}
 80027d8:	200001d4 	.word	0x200001d4

080027dc <_malloc_r>:
 80027dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80027e0:	1ccd      	adds	r5, r1, #3
 80027e2:	f025 0503 	bic.w	r5, r5, #3
 80027e6:	3508      	adds	r5, #8
 80027e8:	2d0c      	cmp	r5, #12
 80027ea:	bf38      	it	cc
 80027ec:	250c      	movcc	r5, #12
 80027ee:	2d00      	cmp	r5, #0
 80027f0:	4607      	mov	r7, r0
 80027f2:	db01      	blt.n	80027f8 <_malloc_r+0x1c>
 80027f4:	42a9      	cmp	r1, r5
 80027f6:	d905      	bls.n	8002804 <_malloc_r+0x28>
 80027f8:	230c      	movs	r3, #12
 80027fa:	2600      	movs	r6, #0
 80027fc:	603b      	str	r3, [r7, #0]
 80027fe:	4630      	mov	r0, r6
 8002800:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002804:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80028d8 <_malloc_r+0xfc>
 8002808:	f000 f868 	bl	80028dc <__malloc_lock>
 800280c:	f8d8 3000 	ldr.w	r3, [r8]
 8002810:	461c      	mov	r4, r3
 8002812:	bb5c      	cbnz	r4, 800286c <_malloc_r+0x90>
 8002814:	4629      	mov	r1, r5
 8002816:	4638      	mov	r0, r7
 8002818:	f7ff ffc0 	bl	800279c <sbrk_aligned>
 800281c:	1c43      	adds	r3, r0, #1
 800281e:	4604      	mov	r4, r0
 8002820:	d155      	bne.n	80028ce <_malloc_r+0xf2>
 8002822:	f8d8 4000 	ldr.w	r4, [r8]
 8002826:	4626      	mov	r6, r4
 8002828:	2e00      	cmp	r6, #0
 800282a:	d145      	bne.n	80028b8 <_malloc_r+0xdc>
 800282c:	2c00      	cmp	r4, #0
 800282e:	d048      	beq.n	80028c2 <_malloc_r+0xe6>
 8002830:	6823      	ldr	r3, [r4, #0]
 8002832:	4631      	mov	r1, r6
 8002834:	4638      	mov	r0, r7
 8002836:	eb04 0903 	add.w	r9, r4, r3
 800283a:	f000 fc71 	bl	8003120 <_sbrk_r>
 800283e:	4581      	cmp	r9, r0
 8002840:	d13f      	bne.n	80028c2 <_malloc_r+0xe6>
 8002842:	6821      	ldr	r1, [r4, #0]
 8002844:	4638      	mov	r0, r7
 8002846:	1a6d      	subs	r5, r5, r1
 8002848:	4629      	mov	r1, r5
 800284a:	f7ff ffa7 	bl	800279c <sbrk_aligned>
 800284e:	3001      	adds	r0, #1
 8002850:	d037      	beq.n	80028c2 <_malloc_r+0xe6>
 8002852:	6823      	ldr	r3, [r4, #0]
 8002854:	442b      	add	r3, r5
 8002856:	6023      	str	r3, [r4, #0]
 8002858:	f8d8 3000 	ldr.w	r3, [r8]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d038      	beq.n	80028d2 <_malloc_r+0xf6>
 8002860:	685a      	ldr	r2, [r3, #4]
 8002862:	42a2      	cmp	r2, r4
 8002864:	d12b      	bne.n	80028be <_malloc_r+0xe2>
 8002866:	2200      	movs	r2, #0
 8002868:	605a      	str	r2, [r3, #4]
 800286a:	e00f      	b.n	800288c <_malloc_r+0xb0>
 800286c:	6822      	ldr	r2, [r4, #0]
 800286e:	1b52      	subs	r2, r2, r5
 8002870:	d41f      	bmi.n	80028b2 <_malloc_r+0xd6>
 8002872:	2a0b      	cmp	r2, #11
 8002874:	d917      	bls.n	80028a6 <_malloc_r+0xca>
 8002876:	1961      	adds	r1, r4, r5
 8002878:	42a3      	cmp	r3, r4
 800287a:	6025      	str	r5, [r4, #0]
 800287c:	bf18      	it	ne
 800287e:	6059      	strne	r1, [r3, #4]
 8002880:	6863      	ldr	r3, [r4, #4]
 8002882:	bf08      	it	eq
 8002884:	f8c8 1000 	streq.w	r1, [r8]
 8002888:	5162      	str	r2, [r4, r5]
 800288a:	604b      	str	r3, [r1, #4]
 800288c:	4638      	mov	r0, r7
 800288e:	f104 060b 	add.w	r6, r4, #11
 8002892:	f000 f829 	bl	80028e8 <__malloc_unlock>
 8002896:	f026 0607 	bic.w	r6, r6, #7
 800289a:	1d23      	adds	r3, r4, #4
 800289c:	1af2      	subs	r2, r6, r3
 800289e:	d0ae      	beq.n	80027fe <_malloc_r+0x22>
 80028a0:	1b9b      	subs	r3, r3, r6
 80028a2:	50a3      	str	r3, [r4, r2]
 80028a4:	e7ab      	b.n	80027fe <_malloc_r+0x22>
 80028a6:	42a3      	cmp	r3, r4
 80028a8:	6862      	ldr	r2, [r4, #4]
 80028aa:	d1dd      	bne.n	8002868 <_malloc_r+0x8c>
 80028ac:	f8c8 2000 	str.w	r2, [r8]
 80028b0:	e7ec      	b.n	800288c <_malloc_r+0xb0>
 80028b2:	4623      	mov	r3, r4
 80028b4:	6864      	ldr	r4, [r4, #4]
 80028b6:	e7ac      	b.n	8002812 <_malloc_r+0x36>
 80028b8:	4634      	mov	r4, r6
 80028ba:	6876      	ldr	r6, [r6, #4]
 80028bc:	e7b4      	b.n	8002828 <_malloc_r+0x4c>
 80028be:	4613      	mov	r3, r2
 80028c0:	e7cc      	b.n	800285c <_malloc_r+0x80>
 80028c2:	230c      	movs	r3, #12
 80028c4:	4638      	mov	r0, r7
 80028c6:	603b      	str	r3, [r7, #0]
 80028c8:	f000 f80e 	bl	80028e8 <__malloc_unlock>
 80028cc:	e797      	b.n	80027fe <_malloc_r+0x22>
 80028ce:	6025      	str	r5, [r4, #0]
 80028d0:	e7dc      	b.n	800288c <_malloc_r+0xb0>
 80028d2:	605b      	str	r3, [r3, #4]
 80028d4:	deff      	udf	#255	; 0xff
 80028d6:	bf00      	nop
 80028d8:	200001d0 	.word	0x200001d0

080028dc <__malloc_lock>:
 80028dc:	4801      	ldr	r0, [pc, #4]	; (80028e4 <__malloc_lock+0x8>)
 80028de:	f7ff bf12 	b.w	8002706 <__retarget_lock_acquire_recursive>
 80028e2:	bf00      	nop
 80028e4:	200001cc 	.word	0x200001cc

080028e8 <__malloc_unlock>:
 80028e8:	4801      	ldr	r0, [pc, #4]	; (80028f0 <__malloc_unlock+0x8>)
 80028ea:	f7ff bf0d 	b.w	8002708 <__retarget_lock_release_recursive>
 80028ee:	bf00      	nop
 80028f0:	200001cc 	.word	0x200001cc

080028f4 <__sfputc_r>:
 80028f4:	6893      	ldr	r3, [r2, #8]
 80028f6:	b410      	push	{r4}
 80028f8:	3b01      	subs	r3, #1
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	6093      	str	r3, [r2, #8]
 80028fe:	da07      	bge.n	8002910 <__sfputc_r+0x1c>
 8002900:	6994      	ldr	r4, [r2, #24]
 8002902:	42a3      	cmp	r3, r4
 8002904:	db01      	blt.n	800290a <__sfputc_r+0x16>
 8002906:	290a      	cmp	r1, #10
 8002908:	d102      	bne.n	8002910 <__sfputc_r+0x1c>
 800290a:	bc10      	pop	{r4}
 800290c:	f000 bb72 	b.w	8002ff4 <__swbuf_r>
 8002910:	6813      	ldr	r3, [r2, #0]
 8002912:	1c58      	adds	r0, r3, #1
 8002914:	6010      	str	r0, [r2, #0]
 8002916:	7019      	strb	r1, [r3, #0]
 8002918:	4608      	mov	r0, r1
 800291a:	bc10      	pop	{r4}
 800291c:	4770      	bx	lr

0800291e <__sfputs_r>:
 800291e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002920:	4606      	mov	r6, r0
 8002922:	460f      	mov	r7, r1
 8002924:	4614      	mov	r4, r2
 8002926:	18d5      	adds	r5, r2, r3
 8002928:	42ac      	cmp	r4, r5
 800292a:	d101      	bne.n	8002930 <__sfputs_r+0x12>
 800292c:	2000      	movs	r0, #0
 800292e:	e007      	b.n	8002940 <__sfputs_r+0x22>
 8002930:	463a      	mov	r2, r7
 8002932:	4630      	mov	r0, r6
 8002934:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002938:	f7ff ffdc 	bl	80028f4 <__sfputc_r>
 800293c:	1c43      	adds	r3, r0, #1
 800293e:	d1f3      	bne.n	8002928 <__sfputs_r+0xa>
 8002940:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002944 <_vfiprintf_r>:
 8002944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002948:	460d      	mov	r5, r1
 800294a:	4614      	mov	r4, r2
 800294c:	4698      	mov	r8, r3
 800294e:	4606      	mov	r6, r0
 8002950:	b09d      	sub	sp, #116	; 0x74
 8002952:	b118      	cbz	r0, 800295c <_vfiprintf_r+0x18>
 8002954:	6a03      	ldr	r3, [r0, #32]
 8002956:	b90b      	cbnz	r3, 800295c <_vfiprintf_r+0x18>
 8002958:	f7ff fdd0 	bl	80024fc <__sinit>
 800295c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800295e:	07d9      	lsls	r1, r3, #31
 8002960:	d405      	bmi.n	800296e <_vfiprintf_r+0x2a>
 8002962:	89ab      	ldrh	r3, [r5, #12]
 8002964:	059a      	lsls	r2, r3, #22
 8002966:	d402      	bmi.n	800296e <_vfiprintf_r+0x2a>
 8002968:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800296a:	f7ff fecc 	bl	8002706 <__retarget_lock_acquire_recursive>
 800296e:	89ab      	ldrh	r3, [r5, #12]
 8002970:	071b      	lsls	r3, r3, #28
 8002972:	d501      	bpl.n	8002978 <_vfiprintf_r+0x34>
 8002974:	692b      	ldr	r3, [r5, #16]
 8002976:	b99b      	cbnz	r3, 80029a0 <_vfiprintf_r+0x5c>
 8002978:	4629      	mov	r1, r5
 800297a:	4630      	mov	r0, r6
 800297c:	f000 fb78 	bl	8003070 <__swsetup_r>
 8002980:	b170      	cbz	r0, 80029a0 <_vfiprintf_r+0x5c>
 8002982:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002984:	07dc      	lsls	r4, r3, #31
 8002986:	d504      	bpl.n	8002992 <_vfiprintf_r+0x4e>
 8002988:	f04f 30ff 	mov.w	r0, #4294967295
 800298c:	b01d      	add	sp, #116	; 0x74
 800298e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002992:	89ab      	ldrh	r3, [r5, #12]
 8002994:	0598      	lsls	r0, r3, #22
 8002996:	d4f7      	bmi.n	8002988 <_vfiprintf_r+0x44>
 8002998:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800299a:	f7ff feb5 	bl	8002708 <__retarget_lock_release_recursive>
 800299e:	e7f3      	b.n	8002988 <_vfiprintf_r+0x44>
 80029a0:	2300      	movs	r3, #0
 80029a2:	9309      	str	r3, [sp, #36]	; 0x24
 80029a4:	2320      	movs	r3, #32
 80029a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80029aa:	2330      	movs	r3, #48	; 0x30
 80029ac:	f04f 0901 	mov.w	r9, #1
 80029b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80029b4:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8002b64 <_vfiprintf_r+0x220>
 80029b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80029bc:	4623      	mov	r3, r4
 80029be:	469a      	mov	sl, r3
 80029c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80029c4:	b10a      	cbz	r2, 80029ca <_vfiprintf_r+0x86>
 80029c6:	2a25      	cmp	r2, #37	; 0x25
 80029c8:	d1f9      	bne.n	80029be <_vfiprintf_r+0x7a>
 80029ca:	ebba 0b04 	subs.w	fp, sl, r4
 80029ce:	d00b      	beq.n	80029e8 <_vfiprintf_r+0xa4>
 80029d0:	465b      	mov	r3, fp
 80029d2:	4622      	mov	r2, r4
 80029d4:	4629      	mov	r1, r5
 80029d6:	4630      	mov	r0, r6
 80029d8:	f7ff ffa1 	bl	800291e <__sfputs_r>
 80029dc:	3001      	adds	r0, #1
 80029de:	f000 80a9 	beq.w	8002b34 <_vfiprintf_r+0x1f0>
 80029e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80029e4:	445a      	add	r2, fp
 80029e6:	9209      	str	r2, [sp, #36]	; 0x24
 80029e8:	f89a 3000 	ldrb.w	r3, [sl]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	f000 80a1 	beq.w	8002b34 <_vfiprintf_r+0x1f0>
 80029f2:	2300      	movs	r3, #0
 80029f4:	f04f 32ff 	mov.w	r2, #4294967295
 80029f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80029fc:	f10a 0a01 	add.w	sl, sl, #1
 8002a00:	9304      	str	r3, [sp, #16]
 8002a02:	9307      	str	r3, [sp, #28]
 8002a04:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002a08:	931a      	str	r3, [sp, #104]	; 0x68
 8002a0a:	4654      	mov	r4, sl
 8002a0c:	2205      	movs	r2, #5
 8002a0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002a12:	4854      	ldr	r0, [pc, #336]	; (8002b64 <_vfiprintf_r+0x220>)
 8002a14:	f000 fb94 	bl	8003140 <memchr>
 8002a18:	9a04      	ldr	r2, [sp, #16]
 8002a1a:	b9d8      	cbnz	r0, 8002a54 <_vfiprintf_r+0x110>
 8002a1c:	06d1      	lsls	r1, r2, #27
 8002a1e:	bf44      	itt	mi
 8002a20:	2320      	movmi	r3, #32
 8002a22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002a26:	0713      	lsls	r3, r2, #28
 8002a28:	bf44      	itt	mi
 8002a2a:	232b      	movmi	r3, #43	; 0x2b
 8002a2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002a30:	f89a 3000 	ldrb.w	r3, [sl]
 8002a34:	2b2a      	cmp	r3, #42	; 0x2a
 8002a36:	d015      	beq.n	8002a64 <_vfiprintf_r+0x120>
 8002a38:	4654      	mov	r4, sl
 8002a3a:	2000      	movs	r0, #0
 8002a3c:	f04f 0c0a 	mov.w	ip, #10
 8002a40:	9a07      	ldr	r2, [sp, #28]
 8002a42:	4621      	mov	r1, r4
 8002a44:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002a48:	3b30      	subs	r3, #48	; 0x30
 8002a4a:	2b09      	cmp	r3, #9
 8002a4c:	d94d      	bls.n	8002aea <_vfiprintf_r+0x1a6>
 8002a4e:	b1b0      	cbz	r0, 8002a7e <_vfiprintf_r+0x13a>
 8002a50:	9207      	str	r2, [sp, #28]
 8002a52:	e014      	b.n	8002a7e <_vfiprintf_r+0x13a>
 8002a54:	eba0 0308 	sub.w	r3, r0, r8
 8002a58:	fa09 f303 	lsl.w	r3, r9, r3
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	46a2      	mov	sl, r4
 8002a60:	9304      	str	r3, [sp, #16]
 8002a62:	e7d2      	b.n	8002a0a <_vfiprintf_r+0xc6>
 8002a64:	9b03      	ldr	r3, [sp, #12]
 8002a66:	1d19      	adds	r1, r3, #4
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	9103      	str	r1, [sp, #12]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	bfbb      	ittet	lt
 8002a70:	425b      	neglt	r3, r3
 8002a72:	f042 0202 	orrlt.w	r2, r2, #2
 8002a76:	9307      	strge	r3, [sp, #28]
 8002a78:	9307      	strlt	r3, [sp, #28]
 8002a7a:	bfb8      	it	lt
 8002a7c:	9204      	strlt	r2, [sp, #16]
 8002a7e:	7823      	ldrb	r3, [r4, #0]
 8002a80:	2b2e      	cmp	r3, #46	; 0x2e
 8002a82:	d10c      	bne.n	8002a9e <_vfiprintf_r+0x15a>
 8002a84:	7863      	ldrb	r3, [r4, #1]
 8002a86:	2b2a      	cmp	r3, #42	; 0x2a
 8002a88:	d134      	bne.n	8002af4 <_vfiprintf_r+0x1b0>
 8002a8a:	9b03      	ldr	r3, [sp, #12]
 8002a8c:	3402      	adds	r4, #2
 8002a8e:	1d1a      	adds	r2, r3, #4
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	9203      	str	r2, [sp, #12]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	bfb8      	it	lt
 8002a98:	f04f 33ff 	movlt.w	r3, #4294967295
 8002a9c:	9305      	str	r3, [sp, #20]
 8002a9e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002b68 <_vfiprintf_r+0x224>
 8002aa2:	2203      	movs	r2, #3
 8002aa4:	4650      	mov	r0, sl
 8002aa6:	7821      	ldrb	r1, [r4, #0]
 8002aa8:	f000 fb4a 	bl	8003140 <memchr>
 8002aac:	b138      	cbz	r0, 8002abe <_vfiprintf_r+0x17a>
 8002aae:	2240      	movs	r2, #64	; 0x40
 8002ab0:	9b04      	ldr	r3, [sp, #16]
 8002ab2:	eba0 000a 	sub.w	r0, r0, sl
 8002ab6:	4082      	lsls	r2, r0
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	3401      	adds	r4, #1
 8002abc:	9304      	str	r3, [sp, #16]
 8002abe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002ac2:	2206      	movs	r2, #6
 8002ac4:	4829      	ldr	r0, [pc, #164]	; (8002b6c <_vfiprintf_r+0x228>)
 8002ac6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002aca:	f000 fb39 	bl	8003140 <memchr>
 8002ace:	2800      	cmp	r0, #0
 8002ad0:	d03f      	beq.n	8002b52 <_vfiprintf_r+0x20e>
 8002ad2:	4b27      	ldr	r3, [pc, #156]	; (8002b70 <_vfiprintf_r+0x22c>)
 8002ad4:	bb1b      	cbnz	r3, 8002b1e <_vfiprintf_r+0x1da>
 8002ad6:	9b03      	ldr	r3, [sp, #12]
 8002ad8:	3307      	adds	r3, #7
 8002ada:	f023 0307 	bic.w	r3, r3, #7
 8002ade:	3308      	adds	r3, #8
 8002ae0:	9303      	str	r3, [sp, #12]
 8002ae2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002ae4:	443b      	add	r3, r7
 8002ae6:	9309      	str	r3, [sp, #36]	; 0x24
 8002ae8:	e768      	b.n	80029bc <_vfiprintf_r+0x78>
 8002aea:	460c      	mov	r4, r1
 8002aec:	2001      	movs	r0, #1
 8002aee:	fb0c 3202 	mla	r2, ip, r2, r3
 8002af2:	e7a6      	b.n	8002a42 <_vfiprintf_r+0xfe>
 8002af4:	2300      	movs	r3, #0
 8002af6:	f04f 0c0a 	mov.w	ip, #10
 8002afa:	4619      	mov	r1, r3
 8002afc:	3401      	adds	r4, #1
 8002afe:	9305      	str	r3, [sp, #20]
 8002b00:	4620      	mov	r0, r4
 8002b02:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002b06:	3a30      	subs	r2, #48	; 0x30
 8002b08:	2a09      	cmp	r2, #9
 8002b0a:	d903      	bls.n	8002b14 <_vfiprintf_r+0x1d0>
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d0c6      	beq.n	8002a9e <_vfiprintf_r+0x15a>
 8002b10:	9105      	str	r1, [sp, #20]
 8002b12:	e7c4      	b.n	8002a9e <_vfiprintf_r+0x15a>
 8002b14:	4604      	mov	r4, r0
 8002b16:	2301      	movs	r3, #1
 8002b18:	fb0c 2101 	mla	r1, ip, r1, r2
 8002b1c:	e7f0      	b.n	8002b00 <_vfiprintf_r+0x1bc>
 8002b1e:	ab03      	add	r3, sp, #12
 8002b20:	9300      	str	r3, [sp, #0]
 8002b22:	462a      	mov	r2, r5
 8002b24:	4630      	mov	r0, r6
 8002b26:	4b13      	ldr	r3, [pc, #76]	; (8002b74 <_vfiprintf_r+0x230>)
 8002b28:	a904      	add	r1, sp, #16
 8002b2a:	f3af 8000 	nop.w
 8002b2e:	4607      	mov	r7, r0
 8002b30:	1c78      	adds	r0, r7, #1
 8002b32:	d1d6      	bne.n	8002ae2 <_vfiprintf_r+0x19e>
 8002b34:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002b36:	07d9      	lsls	r1, r3, #31
 8002b38:	d405      	bmi.n	8002b46 <_vfiprintf_r+0x202>
 8002b3a:	89ab      	ldrh	r3, [r5, #12]
 8002b3c:	059a      	lsls	r2, r3, #22
 8002b3e:	d402      	bmi.n	8002b46 <_vfiprintf_r+0x202>
 8002b40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002b42:	f7ff fde1 	bl	8002708 <__retarget_lock_release_recursive>
 8002b46:	89ab      	ldrh	r3, [r5, #12]
 8002b48:	065b      	lsls	r3, r3, #25
 8002b4a:	f53f af1d 	bmi.w	8002988 <_vfiprintf_r+0x44>
 8002b4e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002b50:	e71c      	b.n	800298c <_vfiprintf_r+0x48>
 8002b52:	ab03      	add	r3, sp, #12
 8002b54:	9300      	str	r3, [sp, #0]
 8002b56:	462a      	mov	r2, r5
 8002b58:	4630      	mov	r0, r6
 8002b5a:	4b06      	ldr	r3, [pc, #24]	; (8002b74 <_vfiprintf_r+0x230>)
 8002b5c:	a904      	add	r1, sp, #16
 8002b5e:	f000 f87d 	bl	8002c5c <_printf_i>
 8002b62:	e7e4      	b.n	8002b2e <_vfiprintf_r+0x1ea>
 8002b64:	080032c6 	.word	0x080032c6
 8002b68:	080032cc 	.word	0x080032cc
 8002b6c:	080032d0 	.word	0x080032d0
 8002b70:	00000000 	.word	0x00000000
 8002b74:	0800291f 	.word	0x0800291f

08002b78 <_printf_common>:
 8002b78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b7c:	4616      	mov	r6, r2
 8002b7e:	4699      	mov	r9, r3
 8002b80:	688a      	ldr	r2, [r1, #8]
 8002b82:	690b      	ldr	r3, [r1, #16]
 8002b84:	4607      	mov	r7, r0
 8002b86:	4293      	cmp	r3, r2
 8002b88:	bfb8      	it	lt
 8002b8a:	4613      	movlt	r3, r2
 8002b8c:	6033      	str	r3, [r6, #0]
 8002b8e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002b92:	460c      	mov	r4, r1
 8002b94:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002b98:	b10a      	cbz	r2, 8002b9e <_printf_common+0x26>
 8002b9a:	3301      	adds	r3, #1
 8002b9c:	6033      	str	r3, [r6, #0]
 8002b9e:	6823      	ldr	r3, [r4, #0]
 8002ba0:	0699      	lsls	r1, r3, #26
 8002ba2:	bf42      	ittt	mi
 8002ba4:	6833      	ldrmi	r3, [r6, #0]
 8002ba6:	3302      	addmi	r3, #2
 8002ba8:	6033      	strmi	r3, [r6, #0]
 8002baa:	6825      	ldr	r5, [r4, #0]
 8002bac:	f015 0506 	ands.w	r5, r5, #6
 8002bb0:	d106      	bne.n	8002bc0 <_printf_common+0x48>
 8002bb2:	f104 0a19 	add.w	sl, r4, #25
 8002bb6:	68e3      	ldr	r3, [r4, #12]
 8002bb8:	6832      	ldr	r2, [r6, #0]
 8002bba:	1a9b      	subs	r3, r3, r2
 8002bbc:	42ab      	cmp	r3, r5
 8002bbe:	dc2b      	bgt.n	8002c18 <_printf_common+0xa0>
 8002bc0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002bc4:	1e13      	subs	r3, r2, #0
 8002bc6:	6822      	ldr	r2, [r4, #0]
 8002bc8:	bf18      	it	ne
 8002bca:	2301      	movne	r3, #1
 8002bcc:	0692      	lsls	r2, r2, #26
 8002bce:	d430      	bmi.n	8002c32 <_printf_common+0xba>
 8002bd0:	4649      	mov	r1, r9
 8002bd2:	4638      	mov	r0, r7
 8002bd4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002bd8:	47c0      	blx	r8
 8002bda:	3001      	adds	r0, #1
 8002bdc:	d023      	beq.n	8002c26 <_printf_common+0xae>
 8002bde:	6823      	ldr	r3, [r4, #0]
 8002be0:	6922      	ldr	r2, [r4, #16]
 8002be2:	f003 0306 	and.w	r3, r3, #6
 8002be6:	2b04      	cmp	r3, #4
 8002be8:	bf14      	ite	ne
 8002bea:	2500      	movne	r5, #0
 8002bec:	6833      	ldreq	r3, [r6, #0]
 8002bee:	f04f 0600 	mov.w	r6, #0
 8002bf2:	bf08      	it	eq
 8002bf4:	68e5      	ldreq	r5, [r4, #12]
 8002bf6:	f104 041a 	add.w	r4, r4, #26
 8002bfa:	bf08      	it	eq
 8002bfc:	1aed      	subeq	r5, r5, r3
 8002bfe:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002c02:	bf08      	it	eq
 8002c04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	bfc4      	itt	gt
 8002c0c:	1a9b      	subgt	r3, r3, r2
 8002c0e:	18ed      	addgt	r5, r5, r3
 8002c10:	42b5      	cmp	r5, r6
 8002c12:	d11a      	bne.n	8002c4a <_printf_common+0xd2>
 8002c14:	2000      	movs	r0, #0
 8002c16:	e008      	b.n	8002c2a <_printf_common+0xb2>
 8002c18:	2301      	movs	r3, #1
 8002c1a:	4652      	mov	r2, sl
 8002c1c:	4649      	mov	r1, r9
 8002c1e:	4638      	mov	r0, r7
 8002c20:	47c0      	blx	r8
 8002c22:	3001      	adds	r0, #1
 8002c24:	d103      	bne.n	8002c2e <_printf_common+0xb6>
 8002c26:	f04f 30ff 	mov.w	r0, #4294967295
 8002c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c2e:	3501      	adds	r5, #1
 8002c30:	e7c1      	b.n	8002bb6 <_printf_common+0x3e>
 8002c32:	2030      	movs	r0, #48	; 0x30
 8002c34:	18e1      	adds	r1, r4, r3
 8002c36:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002c3a:	1c5a      	adds	r2, r3, #1
 8002c3c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002c40:	4422      	add	r2, r4
 8002c42:	3302      	adds	r3, #2
 8002c44:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002c48:	e7c2      	b.n	8002bd0 <_printf_common+0x58>
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	4622      	mov	r2, r4
 8002c4e:	4649      	mov	r1, r9
 8002c50:	4638      	mov	r0, r7
 8002c52:	47c0      	blx	r8
 8002c54:	3001      	adds	r0, #1
 8002c56:	d0e6      	beq.n	8002c26 <_printf_common+0xae>
 8002c58:	3601      	adds	r6, #1
 8002c5a:	e7d9      	b.n	8002c10 <_printf_common+0x98>

08002c5c <_printf_i>:
 8002c5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002c60:	7e0f      	ldrb	r7, [r1, #24]
 8002c62:	4691      	mov	r9, r2
 8002c64:	2f78      	cmp	r7, #120	; 0x78
 8002c66:	4680      	mov	r8, r0
 8002c68:	460c      	mov	r4, r1
 8002c6a:	469a      	mov	sl, r3
 8002c6c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002c6e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002c72:	d807      	bhi.n	8002c84 <_printf_i+0x28>
 8002c74:	2f62      	cmp	r7, #98	; 0x62
 8002c76:	d80a      	bhi.n	8002c8e <_printf_i+0x32>
 8002c78:	2f00      	cmp	r7, #0
 8002c7a:	f000 80d5 	beq.w	8002e28 <_printf_i+0x1cc>
 8002c7e:	2f58      	cmp	r7, #88	; 0x58
 8002c80:	f000 80c1 	beq.w	8002e06 <_printf_i+0x1aa>
 8002c84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002c88:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002c8c:	e03a      	b.n	8002d04 <_printf_i+0xa8>
 8002c8e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002c92:	2b15      	cmp	r3, #21
 8002c94:	d8f6      	bhi.n	8002c84 <_printf_i+0x28>
 8002c96:	a101      	add	r1, pc, #4	; (adr r1, 8002c9c <_printf_i+0x40>)
 8002c98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002c9c:	08002cf5 	.word	0x08002cf5
 8002ca0:	08002d09 	.word	0x08002d09
 8002ca4:	08002c85 	.word	0x08002c85
 8002ca8:	08002c85 	.word	0x08002c85
 8002cac:	08002c85 	.word	0x08002c85
 8002cb0:	08002c85 	.word	0x08002c85
 8002cb4:	08002d09 	.word	0x08002d09
 8002cb8:	08002c85 	.word	0x08002c85
 8002cbc:	08002c85 	.word	0x08002c85
 8002cc0:	08002c85 	.word	0x08002c85
 8002cc4:	08002c85 	.word	0x08002c85
 8002cc8:	08002e0f 	.word	0x08002e0f
 8002ccc:	08002d35 	.word	0x08002d35
 8002cd0:	08002dc9 	.word	0x08002dc9
 8002cd4:	08002c85 	.word	0x08002c85
 8002cd8:	08002c85 	.word	0x08002c85
 8002cdc:	08002e31 	.word	0x08002e31
 8002ce0:	08002c85 	.word	0x08002c85
 8002ce4:	08002d35 	.word	0x08002d35
 8002ce8:	08002c85 	.word	0x08002c85
 8002cec:	08002c85 	.word	0x08002c85
 8002cf0:	08002dd1 	.word	0x08002dd1
 8002cf4:	682b      	ldr	r3, [r5, #0]
 8002cf6:	1d1a      	adds	r2, r3, #4
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	602a      	str	r2, [r5, #0]
 8002cfc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002d00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002d04:	2301      	movs	r3, #1
 8002d06:	e0a0      	b.n	8002e4a <_printf_i+0x1ee>
 8002d08:	6820      	ldr	r0, [r4, #0]
 8002d0a:	682b      	ldr	r3, [r5, #0]
 8002d0c:	0607      	lsls	r7, r0, #24
 8002d0e:	f103 0104 	add.w	r1, r3, #4
 8002d12:	6029      	str	r1, [r5, #0]
 8002d14:	d501      	bpl.n	8002d1a <_printf_i+0xbe>
 8002d16:	681e      	ldr	r6, [r3, #0]
 8002d18:	e003      	b.n	8002d22 <_printf_i+0xc6>
 8002d1a:	0646      	lsls	r6, r0, #25
 8002d1c:	d5fb      	bpl.n	8002d16 <_printf_i+0xba>
 8002d1e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8002d22:	2e00      	cmp	r6, #0
 8002d24:	da03      	bge.n	8002d2e <_printf_i+0xd2>
 8002d26:	232d      	movs	r3, #45	; 0x2d
 8002d28:	4276      	negs	r6, r6
 8002d2a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002d2e:	230a      	movs	r3, #10
 8002d30:	4859      	ldr	r0, [pc, #356]	; (8002e98 <_printf_i+0x23c>)
 8002d32:	e012      	b.n	8002d5a <_printf_i+0xfe>
 8002d34:	682b      	ldr	r3, [r5, #0]
 8002d36:	6820      	ldr	r0, [r4, #0]
 8002d38:	1d19      	adds	r1, r3, #4
 8002d3a:	6029      	str	r1, [r5, #0]
 8002d3c:	0605      	lsls	r5, r0, #24
 8002d3e:	d501      	bpl.n	8002d44 <_printf_i+0xe8>
 8002d40:	681e      	ldr	r6, [r3, #0]
 8002d42:	e002      	b.n	8002d4a <_printf_i+0xee>
 8002d44:	0641      	lsls	r1, r0, #25
 8002d46:	d5fb      	bpl.n	8002d40 <_printf_i+0xe4>
 8002d48:	881e      	ldrh	r6, [r3, #0]
 8002d4a:	2f6f      	cmp	r7, #111	; 0x6f
 8002d4c:	bf0c      	ite	eq
 8002d4e:	2308      	moveq	r3, #8
 8002d50:	230a      	movne	r3, #10
 8002d52:	4851      	ldr	r0, [pc, #324]	; (8002e98 <_printf_i+0x23c>)
 8002d54:	2100      	movs	r1, #0
 8002d56:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002d5a:	6865      	ldr	r5, [r4, #4]
 8002d5c:	2d00      	cmp	r5, #0
 8002d5e:	bfa8      	it	ge
 8002d60:	6821      	ldrge	r1, [r4, #0]
 8002d62:	60a5      	str	r5, [r4, #8]
 8002d64:	bfa4      	itt	ge
 8002d66:	f021 0104 	bicge.w	r1, r1, #4
 8002d6a:	6021      	strge	r1, [r4, #0]
 8002d6c:	b90e      	cbnz	r6, 8002d72 <_printf_i+0x116>
 8002d6e:	2d00      	cmp	r5, #0
 8002d70:	d04b      	beq.n	8002e0a <_printf_i+0x1ae>
 8002d72:	4615      	mov	r5, r2
 8002d74:	fbb6 f1f3 	udiv	r1, r6, r3
 8002d78:	fb03 6711 	mls	r7, r3, r1, r6
 8002d7c:	5dc7      	ldrb	r7, [r0, r7]
 8002d7e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002d82:	4637      	mov	r7, r6
 8002d84:	42bb      	cmp	r3, r7
 8002d86:	460e      	mov	r6, r1
 8002d88:	d9f4      	bls.n	8002d74 <_printf_i+0x118>
 8002d8a:	2b08      	cmp	r3, #8
 8002d8c:	d10b      	bne.n	8002da6 <_printf_i+0x14a>
 8002d8e:	6823      	ldr	r3, [r4, #0]
 8002d90:	07de      	lsls	r6, r3, #31
 8002d92:	d508      	bpl.n	8002da6 <_printf_i+0x14a>
 8002d94:	6923      	ldr	r3, [r4, #16]
 8002d96:	6861      	ldr	r1, [r4, #4]
 8002d98:	4299      	cmp	r1, r3
 8002d9a:	bfde      	ittt	le
 8002d9c:	2330      	movle	r3, #48	; 0x30
 8002d9e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002da2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002da6:	1b52      	subs	r2, r2, r5
 8002da8:	6122      	str	r2, [r4, #16]
 8002daa:	464b      	mov	r3, r9
 8002dac:	4621      	mov	r1, r4
 8002dae:	4640      	mov	r0, r8
 8002db0:	f8cd a000 	str.w	sl, [sp]
 8002db4:	aa03      	add	r2, sp, #12
 8002db6:	f7ff fedf 	bl	8002b78 <_printf_common>
 8002dba:	3001      	adds	r0, #1
 8002dbc:	d14a      	bne.n	8002e54 <_printf_i+0x1f8>
 8002dbe:	f04f 30ff 	mov.w	r0, #4294967295
 8002dc2:	b004      	add	sp, #16
 8002dc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002dc8:	6823      	ldr	r3, [r4, #0]
 8002dca:	f043 0320 	orr.w	r3, r3, #32
 8002dce:	6023      	str	r3, [r4, #0]
 8002dd0:	2778      	movs	r7, #120	; 0x78
 8002dd2:	4832      	ldr	r0, [pc, #200]	; (8002e9c <_printf_i+0x240>)
 8002dd4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002dd8:	6823      	ldr	r3, [r4, #0]
 8002dda:	6829      	ldr	r1, [r5, #0]
 8002ddc:	061f      	lsls	r7, r3, #24
 8002dde:	f851 6b04 	ldr.w	r6, [r1], #4
 8002de2:	d402      	bmi.n	8002dea <_printf_i+0x18e>
 8002de4:	065f      	lsls	r7, r3, #25
 8002de6:	bf48      	it	mi
 8002de8:	b2b6      	uxthmi	r6, r6
 8002dea:	07df      	lsls	r7, r3, #31
 8002dec:	bf48      	it	mi
 8002dee:	f043 0320 	orrmi.w	r3, r3, #32
 8002df2:	6029      	str	r1, [r5, #0]
 8002df4:	bf48      	it	mi
 8002df6:	6023      	strmi	r3, [r4, #0]
 8002df8:	b91e      	cbnz	r6, 8002e02 <_printf_i+0x1a6>
 8002dfa:	6823      	ldr	r3, [r4, #0]
 8002dfc:	f023 0320 	bic.w	r3, r3, #32
 8002e00:	6023      	str	r3, [r4, #0]
 8002e02:	2310      	movs	r3, #16
 8002e04:	e7a6      	b.n	8002d54 <_printf_i+0xf8>
 8002e06:	4824      	ldr	r0, [pc, #144]	; (8002e98 <_printf_i+0x23c>)
 8002e08:	e7e4      	b.n	8002dd4 <_printf_i+0x178>
 8002e0a:	4615      	mov	r5, r2
 8002e0c:	e7bd      	b.n	8002d8a <_printf_i+0x12e>
 8002e0e:	682b      	ldr	r3, [r5, #0]
 8002e10:	6826      	ldr	r6, [r4, #0]
 8002e12:	1d18      	adds	r0, r3, #4
 8002e14:	6961      	ldr	r1, [r4, #20]
 8002e16:	6028      	str	r0, [r5, #0]
 8002e18:	0635      	lsls	r5, r6, #24
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	d501      	bpl.n	8002e22 <_printf_i+0x1c6>
 8002e1e:	6019      	str	r1, [r3, #0]
 8002e20:	e002      	b.n	8002e28 <_printf_i+0x1cc>
 8002e22:	0670      	lsls	r0, r6, #25
 8002e24:	d5fb      	bpl.n	8002e1e <_printf_i+0x1c2>
 8002e26:	8019      	strh	r1, [r3, #0]
 8002e28:	2300      	movs	r3, #0
 8002e2a:	4615      	mov	r5, r2
 8002e2c:	6123      	str	r3, [r4, #16]
 8002e2e:	e7bc      	b.n	8002daa <_printf_i+0x14e>
 8002e30:	682b      	ldr	r3, [r5, #0]
 8002e32:	2100      	movs	r1, #0
 8002e34:	1d1a      	adds	r2, r3, #4
 8002e36:	602a      	str	r2, [r5, #0]
 8002e38:	681d      	ldr	r5, [r3, #0]
 8002e3a:	6862      	ldr	r2, [r4, #4]
 8002e3c:	4628      	mov	r0, r5
 8002e3e:	f000 f97f 	bl	8003140 <memchr>
 8002e42:	b108      	cbz	r0, 8002e48 <_printf_i+0x1ec>
 8002e44:	1b40      	subs	r0, r0, r5
 8002e46:	6060      	str	r0, [r4, #4]
 8002e48:	6863      	ldr	r3, [r4, #4]
 8002e4a:	6123      	str	r3, [r4, #16]
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002e52:	e7aa      	b.n	8002daa <_printf_i+0x14e>
 8002e54:	462a      	mov	r2, r5
 8002e56:	4649      	mov	r1, r9
 8002e58:	4640      	mov	r0, r8
 8002e5a:	6923      	ldr	r3, [r4, #16]
 8002e5c:	47d0      	blx	sl
 8002e5e:	3001      	adds	r0, #1
 8002e60:	d0ad      	beq.n	8002dbe <_printf_i+0x162>
 8002e62:	6823      	ldr	r3, [r4, #0]
 8002e64:	079b      	lsls	r3, r3, #30
 8002e66:	d413      	bmi.n	8002e90 <_printf_i+0x234>
 8002e68:	68e0      	ldr	r0, [r4, #12]
 8002e6a:	9b03      	ldr	r3, [sp, #12]
 8002e6c:	4298      	cmp	r0, r3
 8002e6e:	bfb8      	it	lt
 8002e70:	4618      	movlt	r0, r3
 8002e72:	e7a6      	b.n	8002dc2 <_printf_i+0x166>
 8002e74:	2301      	movs	r3, #1
 8002e76:	4632      	mov	r2, r6
 8002e78:	4649      	mov	r1, r9
 8002e7a:	4640      	mov	r0, r8
 8002e7c:	47d0      	blx	sl
 8002e7e:	3001      	adds	r0, #1
 8002e80:	d09d      	beq.n	8002dbe <_printf_i+0x162>
 8002e82:	3501      	adds	r5, #1
 8002e84:	68e3      	ldr	r3, [r4, #12]
 8002e86:	9903      	ldr	r1, [sp, #12]
 8002e88:	1a5b      	subs	r3, r3, r1
 8002e8a:	42ab      	cmp	r3, r5
 8002e8c:	dcf2      	bgt.n	8002e74 <_printf_i+0x218>
 8002e8e:	e7eb      	b.n	8002e68 <_printf_i+0x20c>
 8002e90:	2500      	movs	r5, #0
 8002e92:	f104 0619 	add.w	r6, r4, #25
 8002e96:	e7f5      	b.n	8002e84 <_printf_i+0x228>
 8002e98:	080032d7 	.word	0x080032d7
 8002e9c:	080032e8 	.word	0x080032e8

08002ea0 <__sflush_r>:
 8002ea0:	898a      	ldrh	r2, [r1, #12]
 8002ea2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ea4:	4605      	mov	r5, r0
 8002ea6:	0710      	lsls	r0, r2, #28
 8002ea8:	460c      	mov	r4, r1
 8002eaa:	d457      	bmi.n	8002f5c <__sflush_r+0xbc>
 8002eac:	684b      	ldr	r3, [r1, #4]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	dc04      	bgt.n	8002ebc <__sflush_r+0x1c>
 8002eb2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	dc01      	bgt.n	8002ebc <__sflush_r+0x1c>
 8002eb8:	2000      	movs	r0, #0
 8002eba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ebc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002ebe:	2e00      	cmp	r6, #0
 8002ec0:	d0fa      	beq.n	8002eb8 <__sflush_r+0x18>
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002ec8:	682f      	ldr	r7, [r5, #0]
 8002eca:	6a21      	ldr	r1, [r4, #32]
 8002ecc:	602b      	str	r3, [r5, #0]
 8002ece:	d032      	beq.n	8002f36 <__sflush_r+0x96>
 8002ed0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002ed2:	89a3      	ldrh	r3, [r4, #12]
 8002ed4:	075a      	lsls	r2, r3, #29
 8002ed6:	d505      	bpl.n	8002ee4 <__sflush_r+0x44>
 8002ed8:	6863      	ldr	r3, [r4, #4]
 8002eda:	1ac0      	subs	r0, r0, r3
 8002edc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002ede:	b10b      	cbz	r3, 8002ee4 <__sflush_r+0x44>
 8002ee0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002ee2:	1ac0      	subs	r0, r0, r3
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002eea:	4628      	mov	r0, r5
 8002eec:	6a21      	ldr	r1, [r4, #32]
 8002eee:	47b0      	blx	r6
 8002ef0:	1c43      	adds	r3, r0, #1
 8002ef2:	89a3      	ldrh	r3, [r4, #12]
 8002ef4:	d106      	bne.n	8002f04 <__sflush_r+0x64>
 8002ef6:	6829      	ldr	r1, [r5, #0]
 8002ef8:	291d      	cmp	r1, #29
 8002efa:	d82b      	bhi.n	8002f54 <__sflush_r+0xb4>
 8002efc:	4a28      	ldr	r2, [pc, #160]	; (8002fa0 <__sflush_r+0x100>)
 8002efe:	410a      	asrs	r2, r1
 8002f00:	07d6      	lsls	r6, r2, #31
 8002f02:	d427      	bmi.n	8002f54 <__sflush_r+0xb4>
 8002f04:	2200      	movs	r2, #0
 8002f06:	6062      	str	r2, [r4, #4]
 8002f08:	6922      	ldr	r2, [r4, #16]
 8002f0a:	04d9      	lsls	r1, r3, #19
 8002f0c:	6022      	str	r2, [r4, #0]
 8002f0e:	d504      	bpl.n	8002f1a <__sflush_r+0x7a>
 8002f10:	1c42      	adds	r2, r0, #1
 8002f12:	d101      	bne.n	8002f18 <__sflush_r+0x78>
 8002f14:	682b      	ldr	r3, [r5, #0]
 8002f16:	b903      	cbnz	r3, 8002f1a <__sflush_r+0x7a>
 8002f18:	6560      	str	r0, [r4, #84]	; 0x54
 8002f1a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002f1c:	602f      	str	r7, [r5, #0]
 8002f1e:	2900      	cmp	r1, #0
 8002f20:	d0ca      	beq.n	8002eb8 <__sflush_r+0x18>
 8002f22:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002f26:	4299      	cmp	r1, r3
 8002f28:	d002      	beq.n	8002f30 <__sflush_r+0x90>
 8002f2a:	4628      	mov	r0, r5
 8002f2c:	f7ff fbee 	bl	800270c <_free_r>
 8002f30:	2000      	movs	r0, #0
 8002f32:	6360      	str	r0, [r4, #52]	; 0x34
 8002f34:	e7c1      	b.n	8002eba <__sflush_r+0x1a>
 8002f36:	2301      	movs	r3, #1
 8002f38:	4628      	mov	r0, r5
 8002f3a:	47b0      	blx	r6
 8002f3c:	1c41      	adds	r1, r0, #1
 8002f3e:	d1c8      	bne.n	8002ed2 <__sflush_r+0x32>
 8002f40:	682b      	ldr	r3, [r5, #0]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d0c5      	beq.n	8002ed2 <__sflush_r+0x32>
 8002f46:	2b1d      	cmp	r3, #29
 8002f48:	d001      	beq.n	8002f4e <__sflush_r+0xae>
 8002f4a:	2b16      	cmp	r3, #22
 8002f4c:	d101      	bne.n	8002f52 <__sflush_r+0xb2>
 8002f4e:	602f      	str	r7, [r5, #0]
 8002f50:	e7b2      	b.n	8002eb8 <__sflush_r+0x18>
 8002f52:	89a3      	ldrh	r3, [r4, #12]
 8002f54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f58:	81a3      	strh	r3, [r4, #12]
 8002f5a:	e7ae      	b.n	8002eba <__sflush_r+0x1a>
 8002f5c:	690f      	ldr	r7, [r1, #16]
 8002f5e:	2f00      	cmp	r7, #0
 8002f60:	d0aa      	beq.n	8002eb8 <__sflush_r+0x18>
 8002f62:	0793      	lsls	r3, r2, #30
 8002f64:	bf18      	it	ne
 8002f66:	2300      	movne	r3, #0
 8002f68:	680e      	ldr	r6, [r1, #0]
 8002f6a:	bf08      	it	eq
 8002f6c:	694b      	ldreq	r3, [r1, #20]
 8002f6e:	1bf6      	subs	r6, r6, r7
 8002f70:	600f      	str	r7, [r1, #0]
 8002f72:	608b      	str	r3, [r1, #8]
 8002f74:	2e00      	cmp	r6, #0
 8002f76:	dd9f      	ble.n	8002eb8 <__sflush_r+0x18>
 8002f78:	4633      	mov	r3, r6
 8002f7a:	463a      	mov	r2, r7
 8002f7c:	4628      	mov	r0, r5
 8002f7e:	6a21      	ldr	r1, [r4, #32]
 8002f80:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8002f84:	47e0      	blx	ip
 8002f86:	2800      	cmp	r0, #0
 8002f88:	dc06      	bgt.n	8002f98 <__sflush_r+0xf8>
 8002f8a:	89a3      	ldrh	r3, [r4, #12]
 8002f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8002f90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f94:	81a3      	strh	r3, [r4, #12]
 8002f96:	e790      	b.n	8002eba <__sflush_r+0x1a>
 8002f98:	4407      	add	r7, r0
 8002f9a:	1a36      	subs	r6, r6, r0
 8002f9c:	e7ea      	b.n	8002f74 <__sflush_r+0xd4>
 8002f9e:	bf00      	nop
 8002fa0:	dfbffffe 	.word	0xdfbffffe

08002fa4 <_fflush_r>:
 8002fa4:	b538      	push	{r3, r4, r5, lr}
 8002fa6:	690b      	ldr	r3, [r1, #16]
 8002fa8:	4605      	mov	r5, r0
 8002faa:	460c      	mov	r4, r1
 8002fac:	b913      	cbnz	r3, 8002fb4 <_fflush_r+0x10>
 8002fae:	2500      	movs	r5, #0
 8002fb0:	4628      	mov	r0, r5
 8002fb2:	bd38      	pop	{r3, r4, r5, pc}
 8002fb4:	b118      	cbz	r0, 8002fbe <_fflush_r+0x1a>
 8002fb6:	6a03      	ldr	r3, [r0, #32]
 8002fb8:	b90b      	cbnz	r3, 8002fbe <_fflush_r+0x1a>
 8002fba:	f7ff fa9f 	bl	80024fc <__sinit>
 8002fbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d0f3      	beq.n	8002fae <_fflush_r+0xa>
 8002fc6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002fc8:	07d0      	lsls	r0, r2, #31
 8002fca:	d404      	bmi.n	8002fd6 <_fflush_r+0x32>
 8002fcc:	0599      	lsls	r1, r3, #22
 8002fce:	d402      	bmi.n	8002fd6 <_fflush_r+0x32>
 8002fd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002fd2:	f7ff fb98 	bl	8002706 <__retarget_lock_acquire_recursive>
 8002fd6:	4628      	mov	r0, r5
 8002fd8:	4621      	mov	r1, r4
 8002fda:	f7ff ff61 	bl	8002ea0 <__sflush_r>
 8002fde:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002fe0:	4605      	mov	r5, r0
 8002fe2:	07da      	lsls	r2, r3, #31
 8002fe4:	d4e4      	bmi.n	8002fb0 <_fflush_r+0xc>
 8002fe6:	89a3      	ldrh	r3, [r4, #12]
 8002fe8:	059b      	lsls	r3, r3, #22
 8002fea:	d4e1      	bmi.n	8002fb0 <_fflush_r+0xc>
 8002fec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002fee:	f7ff fb8b 	bl	8002708 <__retarget_lock_release_recursive>
 8002ff2:	e7dd      	b.n	8002fb0 <_fflush_r+0xc>

08002ff4 <__swbuf_r>:
 8002ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ff6:	460e      	mov	r6, r1
 8002ff8:	4614      	mov	r4, r2
 8002ffa:	4605      	mov	r5, r0
 8002ffc:	b118      	cbz	r0, 8003006 <__swbuf_r+0x12>
 8002ffe:	6a03      	ldr	r3, [r0, #32]
 8003000:	b90b      	cbnz	r3, 8003006 <__swbuf_r+0x12>
 8003002:	f7ff fa7b 	bl	80024fc <__sinit>
 8003006:	69a3      	ldr	r3, [r4, #24]
 8003008:	60a3      	str	r3, [r4, #8]
 800300a:	89a3      	ldrh	r3, [r4, #12]
 800300c:	071a      	lsls	r2, r3, #28
 800300e:	d525      	bpl.n	800305c <__swbuf_r+0x68>
 8003010:	6923      	ldr	r3, [r4, #16]
 8003012:	b31b      	cbz	r3, 800305c <__swbuf_r+0x68>
 8003014:	6823      	ldr	r3, [r4, #0]
 8003016:	6922      	ldr	r2, [r4, #16]
 8003018:	b2f6      	uxtb	r6, r6
 800301a:	1a98      	subs	r0, r3, r2
 800301c:	6963      	ldr	r3, [r4, #20]
 800301e:	4637      	mov	r7, r6
 8003020:	4283      	cmp	r3, r0
 8003022:	dc04      	bgt.n	800302e <__swbuf_r+0x3a>
 8003024:	4621      	mov	r1, r4
 8003026:	4628      	mov	r0, r5
 8003028:	f7ff ffbc 	bl	8002fa4 <_fflush_r>
 800302c:	b9e0      	cbnz	r0, 8003068 <__swbuf_r+0x74>
 800302e:	68a3      	ldr	r3, [r4, #8]
 8003030:	3b01      	subs	r3, #1
 8003032:	60a3      	str	r3, [r4, #8]
 8003034:	6823      	ldr	r3, [r4, #0]
 8003036:	1c5a      	adds	r2, r3, #1
 8003038:	6022      	str	r2, [r4, #0]
 800303a:	701e      	strb	r6, [r3, #0]
 800303c:	6962      	ldr	r2, [r4, #20]
 800303e:	1c43      	adds	r3, r0, #1
 8003040:	429a      	cmp	r2, r3
 8003042:	d004      	beq.n	800304e <__swbuf_r+0x5a>
 8003044:	89a3      	ldrh	r3, [r4, #12]
 8003046:	07db      	lsls	r3, r3, #31
 8003048:	d506      	bpl.n	8003058 <__swbuf_r+0x64>
 800304a:	2e0a      	cmp	r6, #10
 800304c:	d104      	bne.n	8003058 <__swbuf_r+0x64>
 800304e:	4621      	mov	r1, r4
 8003050:	4628      	mov	r0, r5
 8003052:	f7ff ffa7 	bl	8002fa4 <_fflush_r>
 8003056:	b938      	cbnz	r0, 8003068 <__swbuf_r+0x74>
 8003058:	4638      	mov	r0, r7
 800305a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800305c:	4621      	mov	r1, r4
 800305e:	4628      	mov	r0, r5
 8003060:	f000 f806 	bl	8003070 <__swsetup_r>
 8003064:	2800      	cmp	r0, #0
 8003066:	d0d5      	beq.n	8003014 <__swbuf_r+0x20>
 8003068:	f04f 37ff 	mov.w	r7, #4294967295
 800306c:	e7f4      	b.n	8003058 <__swbuf_r+0x64>
	...

08003070 <__swsetup_r>:
 8003070:	b538      	push	{r3, r4, r5, lr}
 8003072:	4b2a      	ldr	r3, [pc, #168]	; (800311c <__swsetup_r+0xac>)
 8003074:	4605      	mov	r5, r0
 8003076:	6818      	ldr	r0, [r3, #0]
 8003078:	460c      	mov	r4, r1
 800307a:	b118      	cbz	r0, 8003084 <__swsetup_r+0x14>
 800307c:	6a03      	ldr	r3, [r0, #32]
 800307e:	b90b      	cbnz	r3, 8003084 <__swsetup_r+0x14>
 8003080:	f7ff fa3c 	bl	80024fc <__sinit>
 8003084:	89a3      	ldrh	r3, [r4, #12]
 8003086:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800308a:	0718      	lsls	r0, r3, #28
 800308c:	d422      	bmi.n	80030d4 <__swsetup_r+0x64>
 800308e:	06d9      	lsls	r1, r3, #27
 8003090:	d407      	bmi.n	80030a2 <__swsetup_r+0x32>
 8003092:	2309      	movs	r3, #9
 8003094:	602b      	str	r3, [r5, #0]
 8003096:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800309a:	f04f 30ff 	mov.w	r0, #4294967295
 800309e:	81a3      	strh	r3, [r4, #12]
 80030a0:	e034      	b.n	800310c <__swsetup_r+0x9c>
 80030a2:	0758      	lsls	r0, r3, #29
 80030a4:	d512      	bpl.n	80030cc <__swsetup_r+0x5c>
 80030a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80030a8:	b141      	cbz	r1, 80030bc <__swsetup_r+0x4c>
 80030aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80030ae:	4299      	cmp	r1, r3
 80030b0:	d002      	beq.n	80030b8 <__swsetup_r+0x48>
 80030b2:	4628      	mov	r0, r5
 80030b4:	f7ff fb2a 	bl	800270c <_free_r>
 80030b8:	2300      	movs	r3, #0
 80030ba:	6363      	str	r3, [r4, #52]	; 0x34
 80030bc:	89a3      	ldrh	r3, [r4, #12]
 80030be:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80030c2:	81a3      	strh	r3, [r4, #12]
 80030c4:	2300      	movs	r3, #0
 80030c6:	6063      	str	r3, [r4, #4]
 80030c8:	6923      	ldr	r3, [r4, #16]
 80030ca:	6023      	str	r3, [r4, #0]
 80030cc:	89a3      	ldrh	r3, [r4, #12]
 80030ce:	f043 0308 	orr.w	r3, r3, #8
 80030d2:	81a3      	strh	r3, [r4, #12]
 80030d4:	6923      	ldr	r3, [r4, #16]
 80030d6:	b94b      	cbnz	r3, 80030ec <__swsetup_r+0x7c>
 80030d8:	89a3      	ldrh	r3, [r4, #12]
 80030da:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80030de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030e2:	d003      	beq.n	80030ec <__swsetup_r+0x7c>
 80030e4:	4621      	mov	r1, r4
 80030e6:	4628      	mov	r0, r5
 80030e8:	f000 f85d 	bl	80031a6 <__smakebuf_r>
 80030ec:	89a0      	ldrh	r0, [r4, #12]
 80030ee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80030f2:	f010 0301 	ands.w	r3, r0, #1
 80030f6:	d00a      	beq.n	800310e <__swsetup_r+0x9e>
 80030f8:	2300      	movs	r3, #0
 80030fa:	60a3      	str	r3, [r4, #8]
 80030fc:	6963      	ldr	r3, [r4, #20]
 80030fe:	425b      	negs	r3, r3
 8003100:	61a3      	str	r3, [r4, #24]
 8003102:	6923      	ldr	r3, [r4, #16]
 8003104:	b943      	cbnz	r3, 8003118 <__swsetup_r+0xa8>
 8003106:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800310a:	d1c4      	bne.n	8003096 <__swsetup_r+0x26>
 800310c:	bd38      	pop	{r3, r4, r5, pc}
 800310e:	0781      	lsls	r1, r0, #30
 8003110:	bf58      	it	pl
 8003112:	6963      	ldrpl	r3, [r4, #20]
 8003114:	60a3      	str	r3, [r4, #8]
 8003116:	e7f4      	b.n	8003102 <__swsetup_r+0x92>
 8003118:	2000      	movs	r0, #0
 800311a:	e7f7      	b.n	800310c <__swsetup_r+0x9c>
 800311c:	20000064 	.word	0x20000064

08003120 <_sbrk_r>:
 8003120:	b538      	push	{r3, r4, r5, lr}
 8003122:	2300      	movs	r3, #0
 8003124:	4d05      	ldr	r5, [pc, #20]	; (800313c <_sbrk_r+0x1c>)
 8003126:	4604      	mov	r4, r0
 8003128:	4608      	mov	r0, r1
 800312a:	602b      	str	r3, [r5, #0]
 800312c:	f7fd fcf6 	bl	8000b1c <_sbrk>
 8003130:	1c43      	adds	r3, r0, #1
 8003132:	d102      	bne.n	800313a <_sbrk_r+0x1a>
 8003134:	682b      	ldr	r3, [r5, #0]
 8003136:	b103      	cbz	r3, 800313a <_sbrk_r+0x1a>
 8003138:	6023      	str	r3, [r4, #0]
 800313a:	bd38      	pop	{r3, r4, r5, pc}
 800313c:	200001c8 	.word	0x200001c8

08003140 <memchr>:
 8003140:	4603      	mov	r3, r0
 8003142:	b510      	push	{r4, lr}
 8003144:	b2c9      	uxtb	r1, r1
 8003146:	4402      	add	r2, r0
 8003148:	4293      	cmp	r3, r2
 800314a:	4618      	mov	r0, r3
 800314c:	d101      	bne.n	8003152 <memchr+0x12>
 800314e:	2000      	movs	r0, #0
 8003150:	e003      	b.n	800315a <memchr+0x1a>
 8003152:	7804      	ldrb	r4, [r0, #0]
 8003154:	3301      	adds	r3, #1
 8003156:	428c      	cmp	r4, r1
 8003158:	d1f6      	bne.n	8003148 <memchr+0x8>
 800315a:	bd10      	pop	{r4, pc}

0800315c <__swhatbuf_r>:
 800315c:	b570      	push	{r4, r5, r6, lr}
 800315e:	460c      	mov	r4, r1
 8003160:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003164:	4615      	mov	r5, r2
 8003166:	2900      	cmp	r1, #0
 8003168:	461e      	mov	r6, r3
 800316a:	b096      	sub	sp, #88	; 0x58
 800316c:	da0c      	bge.n	8003188 <__swhatbuf_r+0x2c>
 800316e:	89a3      	ldrh	r3, [r4, #12]
 8003170:	2100      	movs	r1, #0
 8003172:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003176:	bf0c      	ite	eq
 8003178:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800317c:	2340      	movne	r3, #64	; 0x40
 800317e:	2000      	movs	r0, #0
 8003180:	6031      	str	r1, [r6, #0]
 8003182:	602b      	str	r3, [r5, #0]
 8003184:	b016      	add	sp, #88	; 0x58
 8003186:	bd70      	pop	{r4, r5, r6, pc}
 8003188:	466a      	mov	r2, sp
 800318a:	f000 f849 	bl	8003220 <_fstat_r>
 800318e:	2800      	cmp	r0, #0
 8003190:	dbed      	blt.n	800316e <__swhatbuf_r+0x12>
 8003192:	9901      	ldr	r1, [sp, #4]
 8003194:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8003198:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800319c:	4259      	negs	r1, r3
 800319e:	4159      	adcs	r1, r3
 80031a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031a4:	e7eb      	b.n	800317e <__swhatbuf_r+0x22>

080031a6 <__smakebuf_r>:
 80031a6:	898b      	ldrh	r3, [r1, #12]
 80031a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80031aa:	079d      	lsls	r5, r3, #30
 80031ac:	4606      	mov	r6, r0
 80031ae:	460c      	mov	r4, r1
 80031b0:	d507      	bpl.n	80031c2 <__smakebuf_r+0x1c>
 80031b2:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80031b6:	6023      	str	r3, [r4, #0]
 80031b8:	6123      	str	r3, [r4, #16]
 80031ba:	2301      	movs	r3, #1
 80031bc:	6163      	str	r3, [r4, #20]
 80031be:	b002      	add	sp, #8
 80031c0:	bd70      	pop	{r4, r5, r6, pc}
 80031c2:	466a      	mov	r2, sp
 80031c4:	ab01      	add	r3, sp, #4
 80031c6:	f7ff ffc9 	bl	800315c <__swhatbuf_r>
 80031ca:	9900      	ldr	r1, [sp, #0]
 80031cc:	4605      	mov	r5, r0
 80031ce:	4630      	mov	r0, r6
 80031d0:	f7ff fb04 	bl	80027dc <_malloc_r>
 80031d4:	b948      	cbnz	r0, 80031ea <__smakebuf_r+0x44>
 80031d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80031da:	059a      	lsls	r2, r3, #22
 80031dc:	d4ef      	bmi.n	80031be <__smakebuf_r+0x18>
 80031de:	f023 0303 	bic.w	r3, r3, #3
 80031e2:	f043 0302 	orr.w	r3, r3, #2
 80031e6:	81a3      	strh	r3, [r4, #12]
 80031e8:	e7e3      	b.n	80031b2 <__smakebuf_r+0xc>
 80031ea:	89a3      	ldrh	r3, [r4, #12]
 80031ec:	6020      	str	r0, [r4, #0]
 80031ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031f2:	81a3      	strh	r3, [r4, #12]
 80031f4:	9b00      	ldr	r3, [sp, #0]
 80031f6:	6120      	str	r0, [r4, #16]
 80031f8:	6163      	str	r3, [r4, #20]
 80031fa:	9b01      	ldr	r3, [sp, #4]
 80031fc:	b15b      	cbz	r3, 8003216 <__smakebuf_r+0x70>
 80031fe:	4630      	mov	r0, r6
 8003200:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003204:	f000 f81e 	bl	8003244 <_isatty_r>
 8003208:	b128      	cbz	r0, 8003216 <__smakebuf_r+0x70>
 800320a:	89a3      	ldrh	r3, [r4, #12]
 800320c:	f023 0303 	bic.w	r3, r3, #3
 8003210:	f043 0301 	orr.w	r3, r3, #1
 8003214:	81a3      	strh	r3, [r4, #12]
 8003216:	89a3      	ldrh	r3, [r4, #12]
 8003218:	431d      	orrs	r5, r3
 800321a:	81a5      	strh	r5, [r4, #12]
 800321c:	e7cf      	b.n	80031be <__smakebuf_r+0x18>
	...

08003220 <_fstat_r>:
 8003220:	b538      	push	{r3, r4, r5, lr}
 8003222:	2300      	movs	r3, #0
 8003224:	4d06      	ldr	r5, [pc, #24]	; (8003240 <_fstat_r+0x20>)
 8003226:	4604      	mov	r4, r0
 8003228:	4608      	mov	r0, r1
 800322a:	4611      	mov	r1, r2
 800322c:	602b      	str	r3, [r5, #0]
 800322e:	f7fd fc4f 	bl	8000ad0 <_fstat>
 8003232:	1c43      	adds	r3, r0, #1
 8003234:	d102      	bne.n	800323c <_fstat_r+0x1c>
 8003236:	682b      	ldr	r3, [r5, #0]
 8003238:	b103      	cbz	r3, 800323c <_fstat_r+0x1c>
 800323a:	6023      	str	r3, [r4, #0]
 800323c:	bd38      	pop	{r3, r4, r5, pc}
 800323e:	bf00      	nop
 8003240:	200001c8 	.word	0x200001c8

08003244 <_isatty_r>:
 8003244:	b538      	push	{r3, r4, r5, lr}
 8003246:	2300      	movs	r3, #0
 8003248:	4d05      	ldr	r5, [pc, #20]	; (8003260 <_isatty_r+0x1c>)
 800324a:	4604      	mov	r4, r0
 800324c:	4608      	mov	r0, r1
 800324e:	602b      	str	r3, [r5, #0]
 8003250:	f7fd fc4d 	bl	8000aee <_isatty>
 8003254:	1c43      	adds	r3, r0, #1
 8003256:	d102      	bne.n	800325e <_isatty_r+0x1a>
 8003258:	682b      	ldr	r3, [r5, #0]
 800325a:	b103      	cbz	r3, 800325e <_isatty_r+0x1a>
 800325c:	6023      	str	r3, [r4, #0]
 800325e:	bd38      	pop	{r3, r4, r5, pc}
 8003260:	200001c8 	.word	0x200001c8

08003264 <_init>:
 8003264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003266:	bf00      	nop
 8003268:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800326a:	bc08      	pop	{r3}
 800326c:	469e      	mov	lr, r3
 800326e:	4770      	bx	lr

08003270 <_fini>:
 8003270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003272:	bf00      	nop
 8003274:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003276:	bc08      	pop	{r3}
 8003278:	469e      	mov	lr, r3
 800327a:	4770      	bx	lr
